---
layout: post
title:  "HTB Writeup [Windows - Hard] - Tally"
published: false
---

![](/Assets/Tally/Tally.png)

## Summary
- 

---

## NMAP
```
PORT      STATE SERVICE            VERSION
21/tcp    open  ftp                Microsoft ftpd
| ftp-syst: 
|_  SYST: Windows_NT
80/tcp    open  http               Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-generator: Microsoft SharePoint
| http-title: Site doesn't have a title (text/html; charset=utf-8).
|_Requested resource was http://tally/_layouts/15/start.aspx#/default.aspx
81/tcp    open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Bad Request
135/tcp   open  msrpc              Microsoft Windows RPC
139/tcp   open  netbios-ssn        Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds       Microsoft Windows Server 2008 R2 - 2012 microsoft-ds
808/tcp   open  ccproxy-http?
1433/tcp  open  ms-sql-s           Microsoft SQL Server 2016 13.00.1601.00; RTM
| ms-sql-ntlm-info: 
|   Target_Name: TALLY
|   NetBIOS_Domain_Name: TALLY
|   NetBIOS_Computer_Name: TALLY
|   DNS_Domain_Name: TALLY
|   DNS_Computer_Name: TALLY
|_  Product_Version: 10.0.14393
| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback
| Not valid before: 2022-08-23T12:49:21
|_Not valid after:  2052-08-23T12:49:21
|_ssl-date: 2022-08-23T13:01:38+00:00; 0s from scanner time.
5985/tcp  open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
15567/tcp open  http               Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
| http-auth: 
| HTTP/1.1 401 Unauthorized\x0D
|   Negotiate
|_  NTLM
| http-ntlm-info: 
|   Target_Name: TALLY
|   NetBIOS_Domain_Name: TALLY
|   NetBIOS_Computer_Name: TALLY
|   DNS_Domain_Name: TALLY
|   DNS_Computer_Name: TALLY
|_  Product_Version: 10.0.14393
|_http-title: Site doesn't have a title.
32843/tcp open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Service Unavailable
32844/tcp open  ssl/http           Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_ssl-date: 2022-08-23T13:01:38+00:00; 0s from scanner time.
| ssl-cert: Subject: commonName=SharePoint Services/organizationName=Microsoft/countryName=US
| Subject Alternative Name: DNS:localhost, DNS:tally
| Not valid before: 2017-09-17T22:51:16
|_Not valid after:  9999-01-01T00:00:00
|_http-server-header: Microsoft-HTTPAPI/2.0
| tls-alpn: 
|   h2
|_  http/1.1
|_http-title: Service Unavailable
32846/tcp open  storagecraft-image StorageCraft Image Manager
47001/tcp open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open  msrpc              Microsoft Windows RPC
49665/tcp open  msrpc              Microsoft Windows RPC
49666/tcp open  msrpc              Microsoft Windows RPC
49667/tcp open  msrpc              Microsoft Windows RPC
49668/tcp open  msrpc              Microsoft Windows RPC
49669/tcp open  msrpc              Microsoft Windows RPC
49670/tcp open  msrpc              Microsoft Windows RPC
Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows

Host script results:
| ms-sql-info: 
|   10.10.10.59:1433: 
|     Version: 
|       name: Microsoft SQL Server 2016 RTM
|       number: 13.00.1601.00
|       Product: Microsoft SQL Server 2016
|       Service pack level: RTM
|       Post-SP patches applied: false
|_    TCP port: 1433
| smb2-time: 
|   date: 2022-08-23T13:00:42
|_  start_date: 2022-08-23T12:49:00
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled but not required
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
```

`nmap` gives us a bunch of information:
1. FTP port open
2. There's a Microsoft SharePoint Instance on port 80
3. MSSQL on default port 1433
4. WinRM available
5. Another HTTP port there on 15567

## Quick FTP Check
Before checking SharePoint, we pass by FTP to see if it's offering any freebies :D

![](no-ftp-anon.jpg)

Nope!

## Enumerating Sharepoint
Checking the website, we get redirected to `/_layouts/15/start.aspx#/default.aspx`

![](sharepoint-home-page.jpg)

To enumerate SharePoint, we will do a `gobuster` using a wordlist from `seclists`.

when doing a quick `find`, we get two lists. But they happen to be almost identical.

![](comparing-sharpoint-wordlists.jpg)

the `sharepoint.txt` had more endpoints. for max coverage, I removed the first `/` from `Sharepoint.fuzz.txt` and added both to one inclusive list.

![](adding-up-sharepoint-lists.jpg)

![](gobuster.jpg)

we get a load of pages to check. One was special though: `/_layouts/15/viewlsts.aspx`

![](sharepoint-file-list.jpg)

The "Documents" list had something interesting

![](documents-sub-site.jpg)

When we opened the file we found ourselves a password :)

![](ftp-details-document.jpg)

Before trying anything, we went back to verify the "Site Pages" list

![](site-pages-list.jpg)

We have a lot of information here

![](migration-update-note.jpg)

- we got 4 usernames: Rahul, ftp_user, Sarah & Tim
- we know Rahul is expected to put an `index.html` file in the "Intranet" folder which we're sure either Sarah or Tim will open. This is could very well be a client-side attack vector.

but let's first spray those credentials over both SMB and FTP

![](smb-worked-for-ftp-user.jpg)

SMB worked, but there was no permissions over any shares.

We did a RID enumeration to find the local users after the `--users` flag failed.

![](user-enumeration.jpg)

But it looks like that's as far we're going to go with SMB. let's get back to FTP because we're positive we have access there.

![](ftp-access-confirmed-hydra.jpg)

## Back to FTP

![](ftp-directories.jpg)

After browsing the FTP and finding a lot of files and folders there, we decide we should download it to our kali to be able to use utilities like `find` and for speed.

we can do so with `wget`'s `-m` flag (for mirror).

```bash
wget -m ftp://ftp_user:'UTDRSCH53c"$6hys'@tally
```

when we go into the "Intranet" folder (mentioned in the note we found earlier), we find a sub-folder called binaries.

It contained a certain version of the Firefox browser which was vulnerable.

![](3-exploits-for-vuln-firefox.jpg)

## Checking Out Firefox Exploits

Our theory is: if we found this installer, that means that there's a high chance it's being used in the environment.

And since either Sarah or Tim will be checking an `index.html` from Rahul, they will probably use that version of Firefox to do so.

And that's where the exploit should come in.

To confirm our theory and before spending any time on this path, we will upload an `index.html` to the "Intranet" folder



We first check the Metasploit module but it turned out it wasn't a match for the version we found.

![](MSF-firefox-exploit-no-match.jpg)

